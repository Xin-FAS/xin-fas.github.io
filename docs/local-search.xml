<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端开发实用网站</title>
    <link href="/2023/08/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <url>/2023/08/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="easings"><a href="#easings" class="headerlink" title="easings"></a>easings</h2><p>网址：<a href="https://easings.net/">https://easings.net/</a></p><p>介绍：获取贝塞尔曲线对应的<code>css</code>属性和<code>js</code>函数</p><h2 id="cubic-bezier"><a href="#cubic-bezier" class="headerlink" title="cubic-bezier"></a>cubic-bezier</h2><p>网址：<a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></p><p>介绍：在线调试贝塞尔曲线，支持导入和导出</p><p>更多：<a href="https://yisibl.github.io/cubic-bezier">https://yisibl.github.io/cubic-bezier</a></p><h2 id="picsum"><a href="#picsum" class="headerlink" title="picsum"></a>picsum</h2><p>网址：<a href="https://picsum.photos/">https://picsum.photos/</a></p><p>介绍：在线随机图片接口，支持自定义宽高和图片分类</p><h2 id="cssgradient"><a href="#cssgradient" class="headerlink" title="cssgradient"></a>cssgradient</h2><p>网址：<a href="https://cssgradient.io/">https://cssgradient.io/</a></p><p>介绍：在线调试<code>css</code>渐变属性</p><h2 id="colorhunt（需要T）"><a href="#colorhunt（需要T）" class="headerlink" title="colorhunt（需要T）"></a>colorhunt（需要T）</h2><p>网址：<a href="https://colorhunt.co/">https://colorhunt.co/</a></p><p>介绍：在线调色板</p><h2 id="SMMS"><a href="#SMMS" class="headerlink" title="SMMS"></a>SMMS</h2><p>网址1：<a href="https://sm.ms/%EF%BC%88%E9%9C%80%E8%A6%81T%EF%BC%89">https://sm.ms/（需要T）</a></p><p>网址2：<a href="https://smms.app/">https://smms.app/</a></p><p>介绍：免费图床</p><h2 id="ChinaZ"><a href="#ChinaZ" class="headerlink" title="ChinaZ"></a>ChinaZ</h2><p>网址：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p>介绍：检测一个网址在全国各地的访问速度</p><h2 id="17ce"><a href="#17ce" class="headerlink" title="17ce"></a>17ce</h2><p>网址：<a href="https://www.17ce.com/">https://www.17ce.com/</a></p><p>功能同上：这个网址不能测试一些网址，如<code>github page</code></p><h2 id="欢迎来交换补充"><a href="#欢迎来交换补充" class="headerlink" title="欢迎来交换补充"></a>欢迎来交换补充</h2>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具网站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将Hammer封装为指令使用</title>
    <link href="/2023/08/18/%E5%B0%86Hammer%E5%B0%81%E8%A3%85%E4%B8%BA%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/18/%E5%B0%86Hammer%E5%B0%81%E8%A3%85%E4%B8%BA%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Hammer-js"><a href="#Hammer-js" class="headerlink" title="Hammer.js"></a>Hammer.js</h2><p>简单介绍：监听手势触发（上下滑动，左右滑动，长按等）</p><p>官网文档：<a href="https://hammerjs.github.io/getting-started/">https://hammerjs.github.io/getting-started/</a></p><h2 id="封装为指令使用（hammer-directive）"><a href="#封装为指令使用（hammer-directive）" class="headerlink" title="封装为指令使用（hammer-directive）"></a>封装为指令使用（hammer-directive）</h2><p>使用前记得先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hammerjs<br></code></pre></td></tr></table></figure><h3 id="Vue2-版本"><a href="#Vue2-版本" class="headerlink" title="Vue2 版本"></a>Vue2 版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Hammer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;hammerjs&#x27;</span><br><br><span class="hljs-comment">// 获取变量类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getTypeof</span> = value =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注册hammer事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> el 注册对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 事件名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cb 回调函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> options hammerjs的其他配置，见官网</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">signInHammer</span> = (<span class="hljs-params">el, key, cb, options = &#123;&#125;</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> hammer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hammer</span>(el);<br>    hammer.<span class="hljs-title function_">on</span>(key, cb);<br>    <span class="hljs-comment">// 需要特殊处理的事件</span><br>    <span class="hljs-keyword">const</span> eventHandlerMap = &#123;<br>        setSwipe () &#123;<br>            hammer.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;swipe&#x27;</span>).<span class="hljs-title function_">set</span>(&#123;<br>                <span class="hljs-attr">direction</span>: <span class="hljs-title class_">Hammer</span>.<span class="hljs-property">DIRECTION_VERTICAL</span>,<br>                ...options<br>            &#125;)<br>        &#125;,<br>        setPinch () &#123;<br>            hammer.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;pinch&#x27;</span>).<span class="hljs-title function_">set</span>(&#123;<br>                <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>                ...options<br>            &#125;)<br>        &#125;,<br>        setRotate () &#123;<br>            hammer.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;rotate&#x27;</span>).<span class="hljs-title function_">set</span>(&#123;<br>                <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>                ...options<br>            &#125;)<br>        &#125;,<br>        setPan () &#123;<br>            hammer.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;pan&#x27;</span>).<span class="hljs-title function_">set</span>(&#123;<br>                <span class="hljs-attr">direction</span>: <span class="hljs-title class_">Hammer</span>.<span class="hljs-property">DIRECTION_ALL</span>,<br>                ...options<br>            &#125;)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 监听垂直方向需要配置下</span><br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;swipeup&#x27;</span> || key === <span class="hljs-string">&#x27;swipedown&#x27;</span>) <span class="hljs-keyword">return</span> eventHandlerMap.<span class="hljs-title function_">setSwipe</span>()<br>    <span class="hljs-comment">// 捏合和旋转识别器处于禁用状态，开启</span><br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;pinch&#x27;</span>) <span class="hljs-keyword">return</span> eventHandlerMap.<span class="hljs-title function_">setPinch</span>()<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;rotate&#x27;</span>) <span class="hljs-keyword">return</span> eventHandlerMap.<span class="hljs-title function_">setRotate</span>()<br>    <span class="hljs-comment">// pan 事件监听方向</span><br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;pan&#x27;</span>) <span class="hljs-keyword">return</span> eventHandlerMap.<span class="hljs-title function_">setPan</span>()<br>    <span class="hljs-comment">// 其他事件可以配置的情况下使用配置</span><br>    hammer.<span class="hljs-title function_">get</span>(key)?.<span class="hljs-title function_">set</span>(options)<br>&#125;<br><br><span class="hljs-keyword">const</span> hammer = &#123;<br>    <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding, vNode</span>) &#123;<br>        <span class="hljs-comment">// 遍历修饰符，添加对应事件</span><br>        <span class="hljs-keyword">const</span> eventMap = binding.<span class="hljs-property">value</span>;<br>        <span class="hljs-comment">// 获取当前实例</span><br>        <span class="hljs-keyword">const</span> vueInstance = vNode.<span class="hljs-property">context</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> eventMap) &#123;<br>            <span class="hljs-comment">// 绑定目标</span><br>            <span class="hljs-keyword">const</span> value = eventMap[key];<br>            <span class="hljs-comment">// 目标类型</span><br>            <span class="hljs-keyword">const</span> valueTypeof = <span class="hljs-title function_">getTypeof</span>(value)<br>            <span class="hljs-keyword">const</span> handler = &#123;<br>                <span class="hljs-title class_">String</span>: <span class="hljs-function">(<span class="hljs-params">value, options</span>) =&gt;</span> &#123;<br>                    <span class="hljs-comment">// 防止事件名输错</span><br>                    <span class="hljs-keyword">if</span> (!(value <span class="hljs-keyword">in</span> vueInstance)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;不存在当前名称事件：&#x27;</span> + value)<br>                    <span class="hljs-title function_">signInHammer</span>(el, key, vueInstance[value], options)<br>                &#125;,<br>                <span class="hljs-title class_">Function</span>: <span class="hljs-function">(<span class="hljs-params">value, options</span>) =&gt;</span> <span class="hljs-title function_">signInHammer</span>(el, key, value, options),<br>                <span class="hljs-title class_">Object</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-comment">// 使用handler属性注册</span><br>                    <span class="hljs-keyword">if</span> (!(<span class="hljs-string">&#x27;handler&#x27;</span> <span class="hljs-keyword">in</span> value)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未指定处理事件！&#x27;</span>)<br>                    <span class="hljs-keyword">const</span> handlerType = <span class="hljs-title function_">getTypeof</span>(value.<span class="hljs-property">handler</span>)<br>                    <span class="hljs-keyword">if</span> (handlerType <span class="hljs-keyword">in</span> handler) handler[handlerType](value.<span class="hljs-property">handler</span>, value.<span class="hljs-property">options</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (valueTypeof <span class="hljs-keyword">in</span> handler) handler[valueTypeof](value)<br>            <span class="hljs-comment">// 其他类型提示绑定失败</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;hammer指令配置类型错误！&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> hammer<br><br></code></pre></td></tr></table></figure><h3 id="Vue3-版本"><a href="#Vue3-版本" class="headerlink" title="Vue3 版本"></a>Vue3 版本</h3><p>vue3 版本区别就是在指令的事件名称从<code>bind</code>改为了<code>mounted</code>，其他没变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">const</span> hammer = &#123;<br>    mounted (el, binding, vNode) &#123;<br>        <span class="hljs-comment">// 遍历修饰符，添加对应事件</span><br>...<br></code></pre></td></tr></table></figure><h2 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h2><p>引入后注册为指令（以<code>Vue3</code>为例）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> hammerDirective <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/hammer-directive&quot;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;hammer&#x27;</span>, hammerDirective)<br></code></pre></td></tr></table></figure><p>在监听标签上使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">swipeupRemote</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;向上滑&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">swipedown</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;向下滑&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">press</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;长按2s&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> hammerOptions = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">swipeup</span>: swipeupRemote,</span><br><span class="language-javascript">    swipedown,</span><br><span class="language-javascript">    <span class="hljs-attr">press</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">handler</span>: press,</span><br><span class="language-javascript">        <span class="hljs-attr">options</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">time</span>: <span class="hljs-number">2000</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-hammer</span>=<span class="hljs-string">&quot;hammerOptions&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: sandybrown;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>可监听事件见hammerjs官网文档，指令的类型如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> eventType = <span class="hljs-built_in">string</span> | <span class="hljs-title class_">Function</span><br><span class="hljs-keyword">type</span> eventHandler = &#123;<br>    <span class="hljs-attr">handler</span>: eventType,<br>    options?: <span class="hljs-title class_">Object</span><br>&#125;<br><span class="hljs-keyword">interface</span> vHammer &#123;<br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: eventType | eventHandler,<br>&#125;<br></code></pre></td></tr></table></figure><p>当事件名为字符串时，将自动去当前实例找事件，未找到则会出现Error提示</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue2</tag>
      
      <tag>Vue3</tag>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取路径中的文件名</title>
    <link href="/2023/08/18/%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    <url>/2023/08/18/%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>功能：传递文件路径，获取其中的文件地址</p><p>一些例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;D:\\static\\pages\\index.html&#x27;</span>) <span class="hljs-comment">// index.html</span><br><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;D:/static/pages/index.html&#x27;</span>) <span class="hljs-comment">// index.html</span><br><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;D:/static/pages/index&#x27;</span>) <span class="hljs-comment">// index</span><br><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;../index.vue&#x27;</span>) <span class="hljs-comment">// index.vue</span><br><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;./../index.text.vue&#x27;</span>) <span class="hljs-comment">// index.text.vue</span><br><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;./../index.text.vue&#x27;</span>, <span class="hljs-literal">false</span>) <span class="hljs-comment">// index.text</span><br><span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;D:/static/pages/.git&#x27;</span>) <span class="hljs-comment">// .git</span><br><span class="hljs-title function_">basename</span>() <span class="hljs-comment">// Error错误</span><br></code></pre></td></tr></table></figure><h2 id="basename-js"><a href="#basename-js" class="headerlink" title="basename.js"></a>basename.js</h2><p>第一种写法：查找最后的分号后截取获取文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取路径中的文件名，仿path.basename</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> suffix 是否保留文件后缀</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">basename</span> = (<span class="hljs-params">path, suffix = <span class="hljs-literal">true</span></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 防止传递空</span><br>    <span class="hljs-keyword">if</span> (!path) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;路径不可为空！&#x27;</span>)<br>    <span class="hljs-comment">// 找 / 分隔</span><br>    <span class="hljs-keyword">let</span> index = path.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-comment">// 如果没有就找 \\ 分隔</span><br>    index = index !== -<span class="hljs-number">1</span> ? index : path.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;\\&#x27;</span>)<br>    <span class="hljs-comment">// 返回后一位到最后</span><br>    <span class="hljs-keyword">let</span> fileName = path.<span class="hljs-title function_">substring</span>(index + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> (suffix) <span class="hljs-keyword">return</span> fileName<br>    <span class="hljs-comment">// 需要去除后缀</span><br>    <span class="hljs-keyword">const</span> suffixIndex = fileName.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (suffixIndex !== -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> fileName.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, suffixIndex)<br>    <span class="hljs-keyword">return</span> fileName<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种写法：使用正则直接获取文件名 ——by Kar</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取路径中的文件名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> suffix 是否保留文件后缀</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type"> string | undefined </span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getFileName</span> = (<span class="hljs-params">path, suffix = <span class="hljs-literal">true</span></span>) =&gt; (suffix ?<br>        <span class="hljs-regexp">/.*[/\\](.*?)$/</span> :<br>        <span class="hljs-regexp">/.*[/\\](.*?)\..*?$/</span>).<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;/&#x27;</span> + path)?.[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>细节：最后匹配时添加<code>/</code>防止出现单文件名导致正则中正反斜杠匹配不上，帅就完事了</p>          </div>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建一样的博客</title>
    <link href="/2023/08/17/%E6%90%AD%E5%BB%BA%E4%B8%80%E6%A0%B7%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/17/%E6%90%AD%E5%BB%BA%E4%B8%80%E6%A0%B7%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>官网：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 全局安装hexo<br>npm install hexo-cli -g<br># 创建一个叫做init-blog的文件夹（名字任意）并初始化<br>hexo init init-blog<br># 进入文件夹后启动<br><span class="hljs-built_in">cd</span> init-blog<br>npm install<br>hexo s<br></code></pre></td></tr></table></figure><p>这里个人博客就搭建好了，下面使用主题</p><h2 id="使用fluid主题"><a href="#使用fluid主题" class="headerlink" title="使用fluid主题"></a>使用fluid主题</h2><h3 id="github下载源码并放入"><a href="#github下载源码并放入" class="headerlink" title="github下载源码并放入"></a>github下载源码并放入</h3><p>地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>下载完成后解压，修改名称为<code>fluid</code>放入博客目录的<code>theme</code>文件夹下，然后复制主题的<code>_config.yml</code>到博客目录，并改名为<code>_config.fluid.yml</code></p><h3 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h3><p>找到并修改博客目录中的<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><blockquote><p>tips：注意是修改不是添加</p></blockquote><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>以下配置都在<code>博客目录/_config.fluid.yml</code>中进行</p><h3 id="基础页面配置"><a href="#基础页面配置" class="headerlink" title="基础页面配置"></a>基础页面配置</h3><ol><li>配置关于页：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%B3%E4%BA%8E%E9%A1%B5">https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%B3%E4%BA%8E%E9%A1%B5</a></li><li>配置友链页：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5">https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5</a></li></ol><h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p>详情见：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E8%AF%84%E8%AE%BA">https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E8%AF%84%E8%AE%BA</a></p><p>个人使用<code>valine</code>，官网：<a href="https://valine.js.org/">https://valine.js.org/</a></p><p>使用流程：</p><ol><li>登录&#x2F;注册<a href="https://console.leancloud.app/">LeanCloud国际版</a>，创建应用</li><li>进入设置，记录下应用的appid，appkey</li><li>进入配置文件，将appid和appkey填入<code>valine</code>中，其他跟着<code>fluid</code>文档配置就可以了</li></ol><h3 id="设置页面顶部大图"><a href="#设置页面顶部大图" class="headerlink" title="设置页面顶部大图"></a>设置页面顶部大图</h3><p>详见：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E5%A4%A7%E5%9B%BE">https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E5%A4%A7%E5%9B%BE</a></p><h3 id="设置副标题"><a href="#设置副标题" class="headerlink" title="设置副标题"></a>设置副标题</h3><p>搜索<code>slogan:</code>，修改<code>text</code></p><h3 id="设置导航左侧标题"><a href="#设置导航左侧标题" class="headerlink" title="设置导航左侧标题"></a>设置导航左侧标题</h3><p>搜索<code>navbar:</code>，修改<code>blog_title</code></p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>搜索<code>footer:</code>，修改<code>content</code></p><h3 id="添加自定义css文件路径"><a href="#添加自定义css文件路径" class="headerlink" title="添加自定义css文件路径"></a>添加自定义css文件路径</h3><p>搜索<code>custom_css:</code>，添加一个博客目录下的<code>source</code>的路径，如</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">custom_css:</span> <span class="hljs-string">css/f-index.css</span><br></code></pre></td></tr></table></figure><p>这里用的就是<code>博客目录/source/css/f-index.css</code></p><h3 id="文章默认封面"><a href="#文章默认封面" class="headerlink" title="文章默认封面"></a>文章默认封面</h3><p>配置<code>default_index_img:</code></p><h3 id="配置代码高亮"><a href="#配置代码高亮" class="headerlink" title="配置代码高亮"></a>配置代码高亮</h3><p>搜索<code>highlightjs:</code></p><h2 id="更多个性配置（个人）"><a href="#更多个性配置（个人）" class="headerlink" title="更多个性配置（个人）"></a>更多个性配置（个人）</h2><p>前置说明：</p><ul><li>博客配置：_config.yml</li><li>主题配置：_config.fluid.yml</li></ul><h3 id="修改文章末尾地址"><a href="#修改文章末尾地址" class="headerlink" title="修改文章末尾地址"></a>修改文章末尾地址</h3><p>在博客配置中找到<code>permalink:</code>，修改它的上一个，也就是<code>url</code>，如</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://xin-fas.github.io</span><br></code></pre></td></tr></table></figure><h3 id="网站基础信息"><a href="#网站基础信息" class="headerlink" title="网站基础信息"></a>网站基础信息</h3><p>在博客配置中修改<code># Site</code>区域</p><p>详情见：<a href="https://hexo.io/zh-cn/docs/configuration.html#%E7%BD%91%E7%AB%99">https://hexo.io/zh-cn/docs/configuration.html#%E7%BD%91%E7%AB%99</a></p><h3 id="顶部菜单背景色"><a href="#顶部菜单背景色" class="headerlink" title="顶部菜单背景色"></a>顶部菜单背景色</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-comment">#f2f2f2</span><br><span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-comment">#323232</span><br></code></pre></td></tr></table></figure><h3 id="顶部菜单不透明度"><a href="#顶部菜单不透明度" class="headerlink" title="顶部菜单不透明度"></a>顶部菜单不透明度</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">navbar:</span><br><span class="hljs-attr">alpha:</span> <span class="hljs-number">.9</span><br></code></pre></td></tr></table></figure><h3 id="亮色主题下拉导航栏文字颜色"><a href="#亮色主题下拉导航栏文字颜色" class="headerlink" title="亮色主题下拉导航栏文字颜色"></a>亮色主题下拉导航栏文字颜色</h3><p>在之前配置过的自定义css文件中，写入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 配置亮色模式下滑时导航栏文字颜色 */</span><br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;light&quot;</span>]</span> <span class="hljs-selector-class">.top-nav-collapse</span> <span class="hljs-selector-pseudo">:is</span>(<span class="hljs-selector-class">.nav-link</span>, <span class="hljs-selector-tag">strong</span>) &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#222</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码块使用mac边框"><a href="#代码块使用mac边框" class="headerlink" title="代码块使用mac边框"></a>代码块使用mac边框</h3><p>自定义css文件中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* mac代码样式 */</span><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &#123;<br>    <span class="hljs-attribute">transition</span>: background .<span class="hljs-number">2s</span> ease-in-out;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--highlight-bg-color);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">7px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>);<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">30px</span><br>&#125;<br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">9px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fc625d</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &gt; <span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border-top-style</span>: solid;<br>    <span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">transition</span>: border-top-color .<span class="hljs-number">3s</span>;<br>&#125;<br><span class="hljs-comment">/* 亮色 */</span><br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;light&quot;</span>]</span> <span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &gt; <span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border-top-color</span>: <span class="hljs-number">#eee</span>;<br>&#125;<br><span class="hljs-comment">/* 暗色 */</span><br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &gt; <span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border-top-color</span>: <span class="hljs-number">#444</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="超链接背景色"><a href="#超链接背景色" class="headerlink" title="超链接背景色"></a>超链接背景色</h3><p>主题配置文件中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br><span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#3eaf7c&quot;</span><br><br><span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#42b983d9&quot;</span><br><span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#3eaf7cd9&quot;</span><br></code></pre></td></tr></table></figure><h3 id="文字块的颜色配置"><a href="#文字块的颜色配置" class="headerlink" title="文字块的颜色配置"></a>文字块的颜色配置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* `` 的样式配置 */</span><br><span class="hljs-comment">/* 亮色 */</span><br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;light&quot;</span>]</span> &#123;<br>    <span class="hljs-attr">--inlinecode-bg-color</span>: <span class="hljs-number">#fef0f0</span><br>&#125;<br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;light&quot;</span>]</span> <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">code</span>, <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">code</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#c7254e</span>;<br>&#125;<br><span class="hljs-comment">/* 暗色 */</span><br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &#123;<br>    <span class="hljs-attr">--inlinecode-bg-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">254</span>, <span class="hljs-number">240</span>, <span class="hljs-number">240</span>, <span class="hljs-number">0.1</span>);<br>&#125;<br><span class="hljs-selector-tag">html</span><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">code</span>, <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">code</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#f3b37f</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改编译时控制台输出字符"><a href="#修改编译时控制台输出字符" class="headerlink" title="修改编译时控制台输出字符"></a>修改编译时控制台输出字符</h3><p>在线制作字符码：<a href="http://patorjk.com/software/taag">http://patorjk.com/software/taag</a></p><p>全局搜索<code>hexo.log.info</code>，修改输出内容，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">    hexo.<span class="hljs-property">log</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`</span><br><span class="hljs-string">   _  __   _               ____   ___    ____</span><br><span class="hljs-string">  | |/_/  (_)  ___  ____  / __/  / _ |  / __/</span><br><span class="hljs-string"> _&gt;  &lt;   / /  / _ \\/___/ / _/   / __ | _\\ \\</span><br><span class="hljs-string">/_/|_|  /_/  /_//_/     /_/    /_/ |_|/___/</span><br><span class="hljs-string">    `</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="修改运行时控制台输出"><a href="#修改运行时控制台输出" class="headerlink" title="修改运行时控制台输出"></a>修改运行时控制台输出</h3><p>全局搜索<code>billboard:</code>，修改<code>console.log</code></p><h3 id="修改浏览器图标"><a href="#修改浏览器图标" class="headerlink" title="修改浏览器图标"></a>修改浏览器图标</h3><p>主题配置中修改<code>favicon:</code>和<code>apple_touch_icon:</code></p><h3 id="修改首页和归档中一页显示数"><a href="#修改首页和归档中一页显示数" class="headerlink" title="修改首页和归档中一页显示数"></a>修改首页和归档中一页显示数</h3><p>博客配置中搜索<code>per_page:</code>，前面为<code>index</code>就是首页展示数，建议首页显示15，归档页面显示20</p><h3 id="显示更新日期"><a href="#显示更新日期" class="headerlink" title="显示更新日期"></a>显示更新日期</h3><ol><li>文章头部显示，主题配置中搜索<code>updated:</code>，开启<code>enable</code>，并将下方标签类型改为<code>success</code></li><li>文章底部显示，主题配置中搜索<code>update_date:</code>，开启<code>enable</code></li></ol><h3 id="关闭图片显示标题"><a href="#关闭图片显示标题" class="headerlink" title="关闭图片显示标题"></a>关闭图片显示标题</h3><p>主题配置中搜索<code>image_caption:</code>，关闭</p><h3 id="开启三级标题以上不折叠"><a href="#开启三级标题以上不折叠" class="headerlink" title="开启三级标题以上不折叠"></a>开启三级标题以上不折叠</h3><p>主题配置中搜索<code>collapseDepth:</code>，修改为3</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>至此，你就已经建成了一个和我一模一样的博客系统，快去更新吧，添加友链可以发邮件到<a href="mailto:&#120;&#x69;&#110;&#x2e;&#102;&#x61;&#x73;&#64;&#x6f;&#x75;&#116;&#x6c;&#x6f;&#111;&#x6b;&#46;&#99;&#x6f;&#109;">&#120;&#x69;&#110;&#x2e;&#102;&#x61;&#x73;&#64;&#x6f;&#x75;&#116;&#x6c;&#x6f;&#111;&#x6b;&#46;&#99;&#x6f;&#109;</a>中，内容请包含一个昵称，博客地址，简介和头像，后续博客有更多自定义修改会同步到这篇文章中</p>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轮播组件（carousel）</title>
    <link href="/2023/08/17/%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6%EF%BC%88carousel%EF%BC%89/"/>
    <url>/2023/08/17/%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6%EF%BC%88carousel%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>能实现左右上下切换</li><li>支持动态添加数据项</li><li>可自定义的左右切换箭头</li><li>可无缝循环</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以Vue2为例，最简结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">FCarouselList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/FCarouselList.vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title class_">FCarouselList</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    data () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: [</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;1&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">keyName</span>: <span class="hljs-string">&#x27;label1&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;2&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">keyName</span>: <span class="hljs-string">&#x27;label2&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;3&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">keyName</span>: <span class="hljs-string">&#x27;label3&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            ],</span><br><span class="language-javascript">            <span class="hljs-attr">activeKey</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        getDemo () &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">label</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1000</span>),</span><br><span class="language-javascript">               <span class="hljs-attr">keyName</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1000</span> + <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        unshiftBeforePrev () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">unshift</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDemo</span>())</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toPrev</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        pushBeforeNext () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDemo</span>())</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toNext</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        toNext () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">fCarouselList</span>.<span class="hljs-title function_">scrollToNext</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        toPrev () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">fCarouselList</span>.<span class="hljs-title function_">scrollToPrev</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        toFirst () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">fCarouselList</span>.<span class="hljs-title function_">scrollToFirst</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        toLast () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">fCarouselList</span>.<span class="hljs-title function_">scrollToLast</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FCarouselList</span></span><br><span class="hljs-tag">            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fCarouselList&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">key-name</span>=<span class="hljs-string">&quot;keyName&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;activeKey&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">loop</span></span><br><span class="hljs-tag">        &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item&quot;</span>&gt;</span><br>                    数据：&#123;&#123; item.label &#125;&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">FCarouselList</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;unshiftBeforePrev&quot;</span>&gt;</span>往前添加数据后上一个<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;pushBeforeNext&quot;</span>&gt;</span>往后添加数据后下一个<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toNext&quot;</span>&gt;</span>下一个<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toPrev&quot;</span>&gt;</span>上一个<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toFirst&quot;</span>&gt;</span>第一个<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toLast&quot;</span>&gt;</span>最后一个<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; activeKey &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.carousel-item</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: sandybrown;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="note note-secondary">            <p>需要注意的点：</p><ol><li><code>key</code>的类型一定要是字符串</li><li><code>添加数据后立即切换</code>操作，当不使用内置方法自己修改绑定值时，需要添加<code>setTimeout</code></li><li>当使用<code>垂直滚动</code>功能时，一定要让父元素添加高度</li><li><code>template</code>中的元素并不会默认撑满，为默认大小</li></ol>          </div><h2 id="实际使用举例"><a href="#实际使用举例" class="headerlink" title="实际使用举例"></a>实际使用举例</h2><p>完成按需加载滚动列表的功能实现，如：</p><p><img src="https://s2.loli.net/2023/08/22/jkVui4v3GrTSnfp.png" alt="image.png"></p><h2 id="FCarouselList-vue"><a href="#FCarouselList-vue" class="headerlink" title="FCarouselList.vue"></a>FCarouselList.vue</h2><h3 id="Vue2版本"><a href="#Vue2版本" class="headerlink" title="Vue2版本"></a>Vue2版本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> lock</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 双向绑定</span></span><br><span class="language-javascript">        <span class="hljs-attr">value</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 绑定key</span></span><br><span class="language-javascript">        <span class="hljs-attr">keyName</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;key&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 初始数据</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: []</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 是否开启循环</span></span><br><span class="language-javascript">        <span class="hljs-attr">loop</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 垂直滚动，需要父元素有高度</span></span><br><span class="language-javascript">        <span class="hljs-attr">vertical</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 显示箭头</span></span><br><span class="language-javascript">        <span class="hljs-attr">arrow</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    data () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">renderData</span>: [],</span><br><span class="language-javascript">            <span class="hljs-comment">// 当前这次是否为平滑（为了区分从after或before的矫正）</span></span><br><span class="language-javascript">            <span class="hljs-attr">isSmooth</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        renderData () &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">startScroll</span>()</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;$props.value&#x27;</span> (_, before) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 首次赋值不执行平滑滚动</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">startScroll</span>(before)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 首次 + 深度</span></span><br><span class="language-javascript">        <span class="hljs-string">&#x27;$props.data&#x27;</span>: &#123;</span><br><span class="language-javascript">            handler (after) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderData</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(after))</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 开始滚动，isSmooth：是否平滑滚动</span></span><br><span class="language-javascript">        startScroll (isSmooth = <span class="hljs-literal">false</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> smooth = isSmooth &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">isSmooth</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> duration = <span class="hljs-number">300</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> carouseList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">carouseList</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (smooth) carouseList.<span class="hljs-property">style</span>.<span class="hljs-property">transitionDuration</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123; duration &#125;</span>ms`</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 垂直计算高度，水平计算宽度</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">vertical</span>) carouseList.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate3d(0, calc(<span class="hljs-subst">$&#123; -<span class="hljs-variable language_">this</span>.activeIndex &#125;</span> * <span class="hljs-subst">$&#123; getComputedStyle(carouseList).height &#125;</span>), 0)`</span></span><br><span class="language-javascript">                <span class="hljs-keyword">else</span> carouseList.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate3d(calc(<span class="hljs-subst">$&#123; -<span class="hljs-variable language_">this</span>.activeIndex &#125;</span> * <span class="hljs-subst">$&#123; getComputedStyle(carouseList).width &#125;</span>), 0, 0)`</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 监听结束后关闭时间，开启矫正</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (!smooth) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">scrollend</span>()</span><br><span class="language-javascript">                lock &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(lock)</span><br><span class="language-javascript">                lock = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    carouseList.<span class="hljs-property">style</span>.<span class="hljs-property">transitionDuration</span> = <span class="hljs-string">&#x27;0ms&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">scrollend</span>()</span><br><span class="language-javascript">                &#125;, duration)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用下标换key</span></span><br><span class="language-javascript">        getKeyByIndex (index) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>[index][<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">keyName</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 监听滚动结束</span></span><br><span class="language-javascript">        scrollend (event) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">loop</span>) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">            <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 还原滚动状态</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isSmooth</span> = <span class="hljs-literal">true</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> sectionAfterKey = <span class="hljs-variable language_">this</span>.<span class="hljs-property">sectionAfterKey</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 如果在上面两个区间中，则调整回去</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (!sectionAfterKey[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isSmooth</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, sectionAfterKey[<span class="hljs-number">1</span>])</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 操作方法</span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 滚动至下一个</span></span><br><span class="language-javascript">        scrollToNext () &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKeyByIndex</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nextIndex</span>))</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 滚动至上一个</span></span><br><span class="language-javascript">        scrollToPrev () &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKeyByIndex</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">prevIndex</span>))</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 滚动到首个</span></span><br><span class="language-javascript">        scrollToFirst () &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKeyByIndex</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstIndex</span>))</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 滚动到最后一个</span></span><br><span class="language-javascript">        scrollToLast () &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKeyByIndex</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">lastIndex</span>))</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 根据当前是否为loop模式，确定使用的数据</span></span><br><span class="language-javascript">        activeData () &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">loop</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">loopData</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 根据当前模式获取第一个下标</span></span><br><span class="language-javascript">        firstIndex () &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">loop</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderData</span>.<span class="hljs-property">length</span> : <span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 根据当前模式获取最后一个下标</span></span><br><span class="language-javascript">        lastIndex () &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderData</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">loop</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstIndex</span> : <span class="hljs-number">0</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 需要矫正后的key，[是否需要矫正，矫正后的key]</span></span><br><span class="language-javascript">        sectionAfterKey () &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> key = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">value</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> execAfter = <span class="hljs-regexp">/(.*?)_after$/</span>.<span class="hljs-title function_">exec</span>(key)</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> execKey</span><br><span class="language-javascript">            <span class="hljs-comment">// 判断after区间</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (execAfter) execKey = execAfter[<span class="hljs-number">1</span>]</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> execBefore = <span class="hljs-regexp">/(.*?)_before$/</span>.<span class="hljs-title function_">exec</span>(key)</span><br><span class="language-javascript">            <span class="hljs-comment">// 判断before区间</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (execBefore) execKey = execBefore[<span class="hljs-number">1</span>]</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (execKey !== <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> [ <span class="hljs-literal">true</span>, execKey ]</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> [ <span class="hljs-literal">false</span>, key ]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 循环时使用的数据</span></span><br><span class="language-javascript">        loopData () &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 复制一个，改变key值防止重复</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> <span class="hljs-title function_">copy</span> = (<span class="hljs-params">arr, tag</span>) =&gt; &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> keyName = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">keyName</span></span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> (&#123;</span><br><span class="language-javascript">                    ...v,</span><br><span class="language-javascript">                    [keyName]: <span class="hljs-string">`<span class="hljs-subst">$&#123; v[keyName] &#125;</span>_<span class="hljs-subst">$&#123; tag &#125;</span>`</span></span><br><span class="language-javascript">                &#125;))</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> [</span><br><span class="language-javascript">                ...<span class="hljs-title function_">copy</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">renderData</span>, <span class="hljs-string">&#x27;before&#x27;</span>),</span><br><span class="language-javascript">                ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">renderData</span>,</span><br><span class="language-javascript">                ...<span class="hljs-title function_">copy</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">renderData</span>, <span class="hljs-string">&#x27;after&#x27;</span>)</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 当前渲染元素下标</span></span><br><span class="language-javascript">        activeIndex () &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v[<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">keyName</span>] === <span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 下一个元素下标</span></span><br><span class="language-javascript">        nextIndex () &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 如果是循环模式，就算到了最后一个也不应该回到初始</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">loop</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> + <span class="hljs-number">1</span>) % <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 上一个元素下标</span></span><br><span class="language-javascript">        prevIndex () &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 如果是循环模式，就算到了第一个也不应该回到最后</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">loop</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">activeIndex</span> - <span class="hljs-number">1</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>.<span class="hljs-property">length</span>) % <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    mounted () &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 如果value为空，则默认赋值为第一个数据</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">$props</span>.<span class="hljs-property">value</span>) <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getKeyByIndex</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstIndex</span>))</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;carouse-list__wrapper&#x27;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[vertical ? &#x27;carouse-list__wrapper-vertical&#x27; : &#x27;carouse-list__wrapper-level&#x27;]&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;carouse-list__scroll&#x27;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;carouseList&#x27;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carouse-list__item&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item of activeData&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item[keyName]&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&#x27;item&#x27;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;carouse-list__item-default&#x27;</span>&gt;</span><br>                        数据：&#123;&#123; item &#125;&#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;carousel__arrow_prev carousel__arrow&#x27;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;scrollToPrev&#x27;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;arrow&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prev&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">t</span>=<span class="hljs-string">&quot;1692708427506&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 1024 1024&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">p-id</span>=<span class="hljs-string">&quot;7609&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M729.6 931.2l-416-425.6 416-416c9.6-9.6 9.6-25.6 0-35.2-9.6-9.6-25.6-9.6-35.2 0l-432 435.2c-9.6 9.6-9.6 25.6 0 35.2l432 441.6c9.6 9.6 25.6 9.6 35.2 0C739.2 956.8 739.2 940.8 729.6 931.2z&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">p-id</span>=<span class="hljs-string">&quot;7610&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;carousel__arrow_next carousel__arrow&#x27;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;scrollToNext&#x27;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;arrow&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">t</span>=<span class="hljs-string">&quot;1692708401118&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 1024 1024&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">p-id</span>=<span class="hljs-string">&quot;7478&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mx_n_1692708401118&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M761.6 489.6l-432-435.2c-9.6-9.6-25.6-9.6-35.2 0-9.6 9.6-9.6 25.6 0 35.2l416 416-416 425.6c-9.6 9.6-9.6 25.6 0 35.2s25.6 9.6 35.2 0l432-441.6C771.2 515.2 771.2 499.2 761.6 489.6z&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">p-id</span>=<span class="hljs-string">&quot;7479&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;scss&#x27;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.carouse-list__wrapper</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.carouse-list__scroll</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-css">        <span class="hljs-attribute">transition-timing-function</span>: ease;</span><br><span class="language-css"></span><br><span class="language-css">        &amp; &gt; * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.carouse-list__item-default</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.carousel__arrow</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: .<span class="hljs-number">2s</span>;</span><br><span class="language-css">        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">100</span>;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        <span class="hljs-attribute">pointer-events</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-class">.carouse-list__wrapper-level</span> &#123;</span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">50%</span>, <span class="hljs-number">0</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow_prev</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow_next</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-class">.carouse-list__wrapper-vertical</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.carouse-list__scroll</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(-<span class="hljs-number">50%</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow_prev</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow_next</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-selector-class">.carousel__arrow</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">pointer-events</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Vue3后续有时间再添加"><a href="#Vue3后续有时间再添加" class="headerlink" title="Vue3后续有时间再添加"></a>Vue3后续有时间再添加</h3>]]></content>
    
    
    <categories>
      
      <category>自用组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue2.7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows使用nvm</title>
    <link href="/2023/08/16/windows%E4%BD%BF%E7%94%A8nvm/"/>
    <url>/2023/08/16/windows%E4%BD%BF%E7%94%A8nvm/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>NVM是node的版本管理工具，用于在一个设备上同时拥有多个node版本，并快速切换使用对应版本npm，同作者所说，nvm最初是基于Mac&#x2F;Linux的独立项目，并不包含windows的使用，但是他们还是推出了<code>nvm for windows</code></p><p>nvm（mac&#x2F;linux）：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><p>nvm for windows：<a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p><blockquote><p>目前作者已打算放弃nvm for windows，开发Runtime（NVM4W 2.0.0）作为下一代windows的node管理工具，更多介绍：<a href="https://github.com/coreybutler/nvm-windows/wiki/Runtime">https://github.com/coreybutler/nvm-windows/wiki/Runtime</a></p></blockquote><h2 id="准备操作"><a href="#准备操作" class="headerlink" title="准备操作"></a>准备操作</h2><p>使用nvm管理前，本地必须要先清空node环境</p><h2 id="下载并安装nvm-for-windows"><a href="#下载并安装nvm-for-windows" class="headerlink" title="下载并安装nvm for windows"></a>下载并安装nvm for windows</h2><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>最好使用exe进行安装，后续就不需要手动配置环境变量，下载后跟着一步步走就行了，记一下nvm的安装路径，后续需要修改镜像地址</p><h2 id="配置镜像地址"><a href="#配置镜像地址" class="headerlink" title="配置镜像地址"></a>配置镜像地址</h2><p>打开nvm的安装路径，在文件夹中找到<code>setting.txt</code>，把下面两行复制到最后</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">node_mirror :https://npm.taobao.org/mirrors/node/<br>npm_mirror: https://npm.taobao.org/mirrors/npm/<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先查看下可供下载的版本，除了下面这行命令外，也可以直接去node官网查看<a href="https://nodejs.org/en/download/releases">https://nodejs.org/en/download/releases</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nvm list available<br></code></pre></td></tr></table></figure><p>选择好之后下载，如18.17.1</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nvm install <span class="hljs-number">18</span>.<span class="hljs-number">17</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>建议使用 LTS（长期支持）版本，<code>nvm install lts</code>可以下载最新的LTS版本</p></blockquote><p>最后使用这个版本就可以了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nvm use <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>使用<code>use</code>命令时输入的版本号只要保证可以找到并且唯一就行</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><code>nvm install &lt;version&gt;</code>：下载指定版本，可以用<code>lts</code>下载最新的LTS版本，用<code>latest</code>下载最新版本</li><li><code>nvm uninstall &lt;version&gt;</code>：卸载指定版本</li><li><code>nvm list [available]</code>：查看本地node版本列表，在末尾键入<code>available</code>以显示可供下载的版本列表</li><li><code>nvm use &lt;version&gt;</code>：切换到指定版本，支持开头模糊匹配</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用微PE重装系统</title>
    <link href="/2023/08/14/%E4%BD%BF%E7%94%A8%E5%BE%AEPE%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/08/14/%E4%BD%BF%E7%94%A8%E5%BE%AEPE%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="WinPE介绍"><a href="#WinPE介绍" class="headerlink" title="WinPE介绍"></a>WinPE介绍</h2><p>微软文档：<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro">https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro</a></p><p>简单来说PE系统（windows预安装系统）主要功能就是用于刷机和修复windows系统</p><blockquote><p>PE系统也是一个windows系统，只不过这个系统去掉了大部分的功能，只保留了基本的运行环境</p></blockquote><h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h2><p>一个u盘</p><h2 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h2><ol><li>一个系统镜像，也就是iso文件，可以去MSDN下载（需要哪个就装哪个，在制作WTG的那篇中对各系统版本有作介绍）</li><li>微PE工具箱，下载地址<a href="https://www.wepe.com.cn/download.html">https://www.wepe.com.cn/download.html</a></li></ol><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>请先满足以上两个要求</p><h3 id="制作PE盘"><a href="#制作PE盘" class="headerlink" title="制作PE盘"></a>制作PE盘</h3><p>打开微PE工具箱，点击右下角USB形状的图标，安装PE到U盘，点开之后，选择好待写入U盘后点击立即安装就可以了</p><p>安装完成后，把系统镜像放入U盘中，这样PE盘就制作好了</p><blockquote><p>这时查看自己的设备，会多出一个EFI分区，这个分区是用于存放PE系统的分区，不要放入任何东西</p></blockquote><h3 id="启动PE系统"><a href="#启动PE系统" class="headerlink" title="启动PE系统"></a>启动PE系统</h3><p>直接重启，进入BIOS修改启动选项 Setting &gt; Security 为所用u盘，选好后保存退出</p><h3 id="重装方法一"><a href="#重装方法一" class="headerlink" title="重装方法一"></a>重装方法一</h3><p>进入PE系统后，直接打开U盘，右键镜像文件后装载后跟着提示走</p><h3 id="重装方法二"><a href="#重装方法二" class="headerlink" title="重装方法二"></a>重装方法二</h3><h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><p>在PE系统中先打开分区工具（DiskGenius），在左边磁盘中选中设备，如下图：</p><p><img src="https://s2.loli.net/2023/08/14/6EG2HzqsbtoCawY.png" alt="image.png"></p><p>上图中为右键红框中的HDO:VMwarexxxxxxx，步骤</p><ol><li>右键后点击删除所有分区</li><li>点击左上角保存更改</li><li>右键后点击快速分区</li></ol><blockquote><p>自己看清楚哪个才是设备的系统盘，不要选错把自己PE盘格了</p></blockquote><p>会看到如下：</p><p><img src="https://s2.loli.net/2023/08/14/Cvf1325ril4RPeN.png" alt="sp20230814_230414_515.png"></p><p>自己选择分区数量和选择分区大小后点击确定就可以了</p><h4 id="使用windows安装器"><a href="#使用windows安装器" class="headerlink" title="使用windows安装器"></a>使用windows安装器</h4><p>打开桌面上的windows安装器，第一个选择系统镜像，第三个为选择安装驱动器的位置，打开搜索后选择C盘</p><p>然后在这个选项中选择需要安装的系统版本</p><p><img src="https://s2.loli.net/2023/08/14/ziOcPxJl7gbYk9s.png" alt="image.png"></p><p>选择好了之后其他都不需要改，点击安装，出现的弹窗点击确认等待安装</p><p>安装完成之后，拔掉u盘，重启电脑就可以进入系统的初始化页面了</p>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js数字转中文数字</title>
    <link href="/2023/08/14/js%E6%95%B0%E5%AD%97%E8%BD%AC%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97/"/>
    <url>/2023/08/14/js%E6%95%B0%E5%AD%97%E8%BD%AC%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>获取对应数字的中文读法数字字符串，使用如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getChineseNumber</span>(<span class="hljs-number">100000</span>) <span class="hljs-comment">// 十万</span><br><span class="hljs-title function_">getChineseNumber</span>(<span class="hljs-number">10000000</span>) <span class="hljs-comment">// 一千万</span><br><span class="hljs-title function_">getChineseNumber</span>(<span class="hljs-number">1234</span>) <span class="hljs-comment">// 一千二百三十四</span><br><span class="hljs-title function_">getChineseNumber</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// 零</span><br><span class="hljs-title function_">getChineseNumber</span>(<span class="hljs-number">123456789</span>) <span class="hljs-comment">// 一亿二千三百四十五万六千七百八十九</span><br><span class="hljs-title function_">getChineseNumber</span>(<span class="hljs-number">12312312312312312</span>) <span class="hljs-comment">// 一亿二千三百一十二万三千一百二十三亿一千二百三十一万二千三百一十二</span><br></code></pre></td></tr></table></figure><p>数字需要满足以下条件：</p><ol><li>小于10^7</li><li>为正整数</li></ol><h2 id="getChineseNumber"><a href="#getChineseNumber" class="headerlink" title="getChineseNumber"></a>getChineseNumber</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getChineseNumber</span> = num =&gt; &#123;<br>    <span class="hljs-keyword">const</span> arr1 = [ <span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>, <span class="hljs-string">&#x27;七&#x27;</span>, <span class="hljs-string">&#x27;八&#x27;</span>, <span class="hljs-string">&#x27;九&#x27;</span> ]<br>    <span class="hljs-keyword">const</span> arr2 = [ <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span> ]<br>    <span class="hljs-keyword">if</span> (!num || <span class="hljs-built_in">isNaN</span>(num)) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;零&#x27;</span><br>    <span class="hljs-keyword">const</span> english = num.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [ index, char ] <span class="hljs-keyword">of</span> english.<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">entries</span>()) result = arr1[+char] + arr2[index] + result<br>    <span class="hljs-comment">// 去除空白位</span><br>    result = result<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/零(千|百|十)/g</span>, <span class="hljs-string">&#x27;零&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/十零/g</span>, <span class="hljs-string">&#x27;十&#x27;</span>)<br>    <span class="hljs-comment">// 去除尾部剩余零</span><br>    result = result.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/零+$/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment">// 去除连续多个零</span><br>    result = result.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/零+/g</span>, <span class="hljs-string">&#x27;零&#x27;</span>)<br>    <span class="hljs-comment">// 保留大单位</span><br>    result = result<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/零亿/g</span>, <span class="hljs-string">&#x27;亿&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/零万/g</span>, <span class="hljs-string">&#x27;万&#x27;</span>)<br>    <span class="hljs-comment">// 去除前置一十为十</span><br>    result = result.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^一十/g</span>, <span class="hljs-string">&#x27;十&#x27;</span>)<br>    <span class="hljs-comment">// 放置1后面全是零</span><br>    result = result.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/亿万/g</span>, <span class="hljs-string">&#x27;亿&#x27;</span>)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>制作WTG</title>
    <link href="/2023/08/13/%E5%88%B6%E4%BD%9CWTG/"/>
    <url>/2023/08/13/%E5%88%B6%E4%BD%9CWTG/</url>
    
    <content type="html"><![CDATA[<h2 id="WTG介绍"><a href="#WTG介绍" class="headerlink" title="WTG介绍"></a>WTG介绍</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>WTG即Windows to go，简称为WTG。对于WTG的规定请看：</p><p><a href="https://learn.microsoft.com/zh-cn/windows/deployment/planning/windows-to-go-overview">https://learn.microsoft.com/zh-cn/windows/deployment/planning/windows-to-go-overview</a></p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>WTG和使用它的设备相互独立，资料互不影响</li><li>WTG的u盘可以随声携带</li><li>WTG可以让你在不同电脑中使用自己熟悉的环境</li><li>即使u盘已经装了WTG系统，但还可以正常使用</li></ol><h2 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h2><h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h3><p>一个32g以上u盘</p><blockquote><p>个人建议：有条件最好使用外接的固态硬盘</p></blockquote><h3 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h3><p>官方：<a href="https://www.microsoft.com/zh-cn/software-download">https://www.microsoft.com/zh-cn/software-download</a></p><p>MSDN（有迅雷推荐使用）：<a href="https://msdn.itellyou.cn/?lang=zh-cn">https://msdn.itellyou.cn/?lang=zh-cn</a></p><blockquote><p>版本选择：</p><ol><li>Enterprise：企业版（推荐）</li><li>Education：教育版（不推荐）</li><li>Multiple Editions：多个版本，后续可选（推荐）</li><li>Pro：专业版（推荐）</li><li>Pro N：专业版（欧洲）</li><li>Home：家庭版（不推荐）</li><li>Pro xxxxx：专业工作站（推荐）</li></ol></blockquote><h3 id="下载WTG辅助工具"><a href="#下载WTG辅助工具" class="headerlink" title="下载WTG辅助工具"></a>下载WTG辅助工具</h3><p>萝卜头：<a href="https://bbs.luobotou.org/thread-761-1-1.html">https://bbs.luobotou.org/thread-761-1-1.html</a></p><h3 id="使用辅助工具"><a href="#使用辅助工具" class="headerlink" title="使用辅助工具"></a>使用辅助工具</h3><p> <img src="https://s2.loli.net/2023/08/13/FYsEgWKwfD9Odm4.png" alt="image.png"></p><ol><li><p>点击浏览，选择系统镜像</p></li><li><p>点击选择移动设备（目标u盘）</p></li><li><p>选择安装分卷（选择系统镜像中的版本，如下载的是多个版本的镜像，看上方的版本选择）</p></li></ol><p>上方选择好之后，在右侧高级功能中点击分区</p><p> <img src="https://s2.loli.net/2023/08/13/k6WaBubIeE3sgrw.png" alt="image.png"></p><p>建议：分两个区，分区1为系统盘</p><p>选择好之后点击部署，慢慢等待就可以了</p><h2 id="使用WTG系统"><a href="#使用WTG系统" class="headerlink" title="使用WTG系统"></a>使用WTG系统</h2><ol><li>当软件提示制作完成之后，重启电脑，进入BIOS，具体查看对应主板按键或笔记本按键（通常为F2）</li><li>设置系统启动项为你的u盘后F10保存即可（BIOS中Security）</li></ol>]]></content>
    
    
    <categories>
      
      <category>教程文档</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot保存图片</title>
    <link href="/2022/08/19/springboot%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/"/>
    <url>/2022/08/19/springboot%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;avatar.intUrl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String intUrl;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;avatar.outUrl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String outUrl;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadAvatar</span><span class="hljs-params">(MultipartFile multipartFile)</span> &#123;<br>        <span class="hljs-comment">// 获取file文件后缀名</span><br>        String[] arrayString = multipartFile.getOriginalFilename().split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileSuffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.&quot;</span> + arrayString[arrayString.length - <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// 新生成文件名，创建File对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + System.currentTimeMillis() + fileSuffix;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(intUrl, fileName);<br>        <span class="hljs-comment">// 写入指定路径，抛出io异常</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            multipartFile.transferTo(file);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outUrl + fileName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>上传图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python简单爬虫</title>
    <link href="/2022/08/16/python%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
    <url>/2022/08/16/python%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="通用头部参数"><a href="#通用头部参数" class="headerlink" title="通用头部参数"></a>通用头部参数</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Cookie</td><td>用户信息，在headers部分，包含登录校验、签名认证才可能需要cookie</td></tr><tr><td>User-Agent</td><td>UA是最基本的headers之一，是浏览器类型，其中包含windows系统信息，html版本和浏览器版本和内核信息</td></tr><tr><td>Referer</td><td>Referer也是最基本的headers之一——防盗链接，它用来验证你的来源，需要告诉请求地址，是从哪里来的</td></tr><tr><td>Origin</td><td>域名，带http协议的是域名</td></tr><tr><td>Host</td><td>主机名称</td></tr><tr><td>Content-Type</td><td>请求内容的类型</td></tr><tr><td>Content-Length</td><td>内容的长度</td></tr><tr><td>Connection</td><td>链接方式，TCP的长 短链接</td></tr><tr><td>Accept-Language</td><td>语言</td></tr><tr><td>Accept-Encoding</td><td>编码</td></tr><tr><td>Accept</td><td>获取数据的类型</td></tr></tbody></table><blockquote><p>问题一：如何知道cookie有无加密？</p><p>通过set-cookie属性判断</p></blockquote><h2 id="私有头部参数"><a href="#私有头部参数" class="headerlink" title="私有头部参数"></a>私有头部参数</h2><p>对于私有的头部参数，可能是时间戳或加密的信息，需要在发起程序中搜索对应名称寻找是如何生成的</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>sign</td><td>签名，需要解密</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="断点找请求信息"><a href="#断点找请求信息" class="headerlink" title="断点找请求信息"></a>断点找请求信息</h2><ol><li>复制请求地址（不含网站名，如 <code>/front/search</code>）添加到源代码中的xhr断点中，刷新请求</li><li>点击下一步或快捷键F9，调试到出现需要的路径（<code>cacheURL</code>）</li><li>找到请求头（<code>request</code>），里面所需的字段名就是前端校验的字段名，都需要模拟填充</li><li>再看到请求配置项（<code>options</code>）【这步也可以直接在控制台输入<code>options</code>查看】，复制data替换</li><li>调试完成后删除所有断点</li></ol><h2 id="关于接口数据搜索为空"><a href="#关于接口数据搜索为空" class="headerlink" title="关于接口数据搜索为空"></a>关于接口数据搜索为空</h2><h3 id="判断原因"><a href="#判断原因" class="headerlink" title="判断原因"></a>判断原因</h3><p>先确定是静态数据还是动态数据，静态数据和动态数据搜索失败有以下问题：</p><p><strong>静态数据：</strong></p><ol><li>字体加密问题</li></ol><p><strong>动态数据：</strong></p><ol><li>Unicode编码中文问题</li><li>数据加密问题</li></ol><p><strong>判断是否为静态数据：</strong></p><p>直接去源代码的静态代码中查找所要的数据，没有就说明数据是动态加载的</p><p><strong>判断是否为编码问题：</strong></p><p>使用数字去搜索，没有找到数据地址，说明数据经过加密</p><h2 id="跟栈调试"><a href="#跟栈调试" class="headerlink" title="跟栈调试"></a>跟栈调试</h2><p>跟栈调试主要是为了寻找js的加密函数</p><p><strong>具体步骤：</strong></p><p>找到请求资源中的发起程序，找到js源代码，对应行打上断点（点击行号），然后刷新浏览器或点击相同获取资源的地址，在渲染出静态页面后，开始通过跳过函数的形式找数据（就是之前看到很长的字符串），看到数据后，放慢速度找解析后的明文数据（找到后可以直接在控制台输入属性名获取值），然后进入源码解析部分打上断点（这里可取消之前的断点），详细查看找到解析函数的本地地址的源代码复制到自己的js中，再次刷新，选择单步调试（F9），查看传入函数的参数信息，配合上下文可找到其中的变量参数</p><h2 id="寻找加密函数"><a href="#寻找加密函数" class="headerlink" title="寻找加密函数"></a>寻找加密函数</h2><p>加密后的数据data不是为一个正常对象，而是一大串的字符串</p><blockquote><p>要知道的原理：</p><p>加密数据要正常在浏览器上显示，肯定在浏览器的js中有解密的操作</p><p>加密的数据无法通过xhr断点调试来找到数据</p></blockquote><h3 id="方式一（较为麻烦）："><a href="#方式一（较为麻烦）：" class="headerlink" title="方式一（较为麻烦）："></a>方式一（较为麻烦）：</h3><p>找到最大的数据源，利用发起程序从源代码中一步步找（具体看上面跟栈调试）</p><h3 id="方式二（简单）："><a href="#方式二（简单）：" class="headerlink" title="方式二（简单）："></a>方式二（简单）：</h3><p>利用异步请求为JSON交互的原理，先寻找调用过数据接口的js，然后寻找到<code>JSON.parse</code>后面的数据函数即是加密函数，断点后可进入查看</p><h2 id="解密操作"><a href="#解密操作" class="headerlink" title="解密操作"></a>解密操作</h2><p>找到加密函数后，利用变量参数声明一个环境变量，在加密函数中分析加密算法，如<code>AES</code></p><blockquote><p>跟栈调试过程中可能会卡住，将调试窗口弹出可缓解</p><p>声明环境变量如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">window = <span class="hljs-keyword">global</span><br>window.c = <span class="hljs-string">&quot;3sd&amp;d2&quot;</span><br>window.r = <span class="hljs-string">&quot;4h@$udD2s&quot;</span><br>window.a = <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></blockquote><p>此时的js如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span> = <span class="hljs-variable language_">global</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">c</span> = <span class="hljs-string">&quot;3sd&amp;d2&quot;</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">r</span> = <span class="hljs-string">&quot;4h@$udD2s&quot;</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&quot;*&quot;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">decode</span> = (<span class="hljs-params">n, e</span>) =&gt; &#123;<br>    e = e || <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-title function_">concat</span>(c).<span class="hljs-title function_">concat</span>(r).<span class="hljs-title function_">concat</span>(a);<br>    <span class="hljs-keyword">var</span> t = o.<span class="hljs-property">a</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(e)<br>        , i = o.<span class="hljs-property">a</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(n, t, &#123;<br>        <span class="hljs-attr">mode</span>: o.<span class="hljs-property">a</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span>,<br>        <span class="hljs-attr">padding</span>: o.<span class="hljs-property">a</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>    &#125;);<br>    <span class="hljs-keyword">return</span> o.<span class="hljs-property">a</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">stringify</span>(i).<span class="hljs-title function_">toString</span>()<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>decrypt 解密的意思，所以这里看到是AES加密算法</p><p>安装crypto-js（前端加密常用）包用与AES解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i crypto-js<br></code></pre></td></tr></table></figure></blockquote><p>导入crypto-js这个包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cryptoJs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br></code></pre></td></tr></table></figure><p>分析加密函数可得，<code>o.a</code> 即是AES解密库<code>cryptoJs</code>，所以替换即可，最后将获取的加密数据放入即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> key = <span class="hljs-string">&quot;GX/x7w1X1XbC/GMS/...&quot;</span><br><br><span class="hljs-keyword">const</span> cryptoJs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-variable language_">window</span> = <span class="hljs-variable language_">global</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">c</span> = <span class="hljs-string">&quot;3sd&amp;d2&quot;</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">r</span> = <span class="hljs-string">&quot;4h@$udD2s&quot;</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&quot;*&quot;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">decode</span> = (<span class="hljs-params">n, e</span>) =&gt; &#123;<br>    e = e || <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-title function_">concat</span>(c).<span class="hljs-title function_">concat</span>(r).<span class="hljs-title function_">concat</span>(a);<br>    <span class="hljs-keyword">var</span> t = cryptoJs.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(e)<br>        , i = cryptoJs.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(n, t, &#123;<br>        <span class="hljs-attr">mode</span>: cryptoJs.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span>,<br>        <span class="hljs-attr">padding</span>: cryptoJs.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>    &#125;);<br>    <span class="hljs-keyword">return</span> cryptoJs.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">stringify</span>(i).<span class="hljs-title function_">toString</span>()<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">decode</span>(key));<br></code></pre></td></tr></table></figure><blockquote><p>这里的e通过跟栈调试发现为空值，所以不用管</p></blockquote><p>以上就是逆向解密，但是上面的加密数据不够完善，大型网站也不止是abs加密</p><h2 id="使用python执行js代码"><a href="#使用python执行js代码" class="headerlink" title="使用python执行js代码"></a>使用python执行js代码</h2><p>现有解密函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">t</span>) &#123;<br>    <span class="hljs-keyword">const</span> cryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./crypto-js/crypto-js&#x27;</span>),<br>        f = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;jo8j9wGw%6HbxfFn&quot;</span>),<br>        m = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>),<br>        e = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Hex</span>.<span class="hljs-title function_">parse</span>(t),<br>        n = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(e),<br>        a = cryptoJS.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(n, f, &#123;<br>            <span class="hljs-attr">iv</span>: m,<br>            <span class="hljs-attr">mode</span>: cryptoJS.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>            <span class="hljs-attr">padding</span>: cryptoJS.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>        &#125;),<br>        r = a.<span class="hljs-title function_">toString</span>(cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(r)<br>&#125;<br></code></pre></td></tr></table></figure><p>要在python中使用，完成整体流程，就要使用到<code>PyExecJS</code>这个包下的<code>execjs</code></p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install PyExecJS<br></code></pre></td></tr></table></figure><p>引入使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> execjs <span class="hljs-keyword">import</span> <span class="hljs-built_in">compile</span><br>setName = <span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    function setName (name) &#123;</span><br><span class="hljs-string">        return &#x27;hello &#x27; + name</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>).call(<span class="hljs-string">&#x27;setName&#x27;</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>)<br><span class="hljs-built_in">print</span>(setName) <span class="hljs-comment"># hello FSAN</span><br></code></pre></td></tr></table></figure><ol><li>先使用compile创建一个js的文件环境</li><li>然后使用call去执行里面的函数名，传递参数</li><li>返回值就是js函数的返回值</li></ol><blockquote><p>如果返回的内容有中文的话，会出现乱码问题，进入报错的文件将encoding修改为’utf8’即可</p></blockquote><h2 id="完整爬取流程（简单aes加密）"><a href="#完整爬取流程（简单aes加密）" class="headerlink" title="完整爬取流程（简单aes加密）"></a>完整爬取流程（简单aes加密）</h2><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> requests <span class="hljs-keyword">import</span> get<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random, randint<br><span class="hljs-keyword">from</span> execjs <span class="hljs-keyword">import</span> <span class="hljs-built_in">compile</span><br><br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://jzsc.mohurd.gov.cn/data/company&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 获取本地js解密函数</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./main.js&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    decryptFn = <span class="hljs-built_in">compile</span>(file.read())<br><br><br><span class="hljs-comment"># 请求加密数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">page</span>):<br>    url = <span class="hljs-string">f&#x27;https://jzsc.mohurd.gov.cn/api/webApi/dataservice/query/comp/list?pg=<span class="hljs-subst">&#123;page&#125;</span>&amp;pgsz=15&amp;total=0&#x27;</span><br>    sleep(random() + randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> get(url=url, headers=headers).text<br><br><br><span class="hljs-comment"># 获取分页数据</span><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    <span class="hljs-comment"># 解密后写入本地</span><br>    decryptData = decryptFn.call(<span class="hljs-string">&#x27;h&#x27;</span>, get_data(page))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./jsonData/decryptDataForPage<span class="hljs-subst">&#123;page&#125;</span>.json&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(loads(decryptData))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;page&#125;</span>页数据已保存&#x27;</span>)<br></code></pre></td></tr></table></figure><p>main.js（解密函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">t</span>) &#123;<br>    <span class="hljs-keyword">const</span> cryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./crypto-js/crypto-js&#x27;</span>),<br>        f = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;jo8j9wGw%6HbxfFn&quot;</span>),<br>        m = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>),<br>        e = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Hex</span>.<span class="hljs-title function_">parse</span>(t),<br>        n = cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(e),<br>        a = cryptoJS.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(n, f, &#123;<br>            <span class="hljs-attr">iv</span>: m,<br>            <span class="hljs-attr">mode</span>: cryptoJS.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>            <span class="hljs-attr">padding</span>: cryptoJS.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>        &#125;),<br>        r = a.<span class="hljs-title function_">toString</span>(cryptoJS.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(r)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h2><p>掌握web逆向技术，需要掌握的加密算法有：</p><ol><li>MD5</li><li>AES</li><li>DES</li><li>RSA</li><li>HASH</li><li>ECC</li><li>SHA</li></ol><h3 id="MD5加密特征"><a href="#MD5加密特征" class="headerlink" title="MD5加密特征"></a>MD5加密特征</h3><p>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">t = <span class="hljs-title function_">h</span>(t, u, v, w, x[o + <span class="hljs-number">0</span>], y, <span class="hljs-number">3614090360</span>),<br>w = <span class="hljs-title function_">h</span>(w, t, u, v, x[o + <span class="hljs-number">1</span>], z, <span class="hljs-number">3905402710</span>),<br>v = <span class="hljs-title function_">h</span>(v, w, t, u, x[o + <span class="hljs-number">2</span>], A, <span class="hljs-number">606105819</span>),<br>u = <span class="hljs-title function_">h</span>(u, v, w, t, x[o + <span class="hljs-number">3</span>], B, <span class="hljs-number">3250441966</span>),<br>t = <span class="hljs-title function_">h</span>(t, u, v, w, x[o + <span class="hljs-number">4</span>], y, <span class="hljs-number">4118548399</span>),<br>w = <span class="hljs-title function_">h</span>(w, t, u, v, x[o + <span class="hljs-number">5</span>], z, <span class="hljs-number">1200080426</span>),<br>v = <span class="hljs-title function_">h</span>(v, w, t, u, x[o + <span class="hljs-number">6</span>], A, <span class="hljs-number">2821735955</span>),<br>u = <span class="hljs-title function_">h</span>(u, v, w, t, x[o + <span class="hljs-number">7</span>], B, <span class="hljs-number">4249261313</span>),<br>t = <span class="hljs-title function_">h</span>(t, u, v, w, x[o + <span class="hljs-number">8</span>], y, <span class="hljs-number">1770035416</span>),<br>w = <span class="hljs-title function_">h</span>(w, t, u, v, x[o + <span class="hljs-number">9</span>], z, <span class="hljs-number">2336552879</span>),<br>v = <span class="hljs-title function_">h</span>(v, w, t, u, x[o + <span class="hljs-number">10</span>], A, <span class="hljs-number">4294925233</span>),<br>u = <span class="hljs-title function_">h</span>(u, v, w, t, x[o + <span class="hljs-number">11</span>], B, <span class="hljs-number">2304563134</span>),<br>t = <span class="hljs-title function_">h</span>(t, u, v, w, x[o + <span class="hljs-number">12</span>], y, <span class="hljs-number">1804603682</span>),<br></code></pre></td></tr></table></figure><p>用数字做混淆的就是MD5加密</p><h2 id="响应数据为纯json渲染"><a href="#响应数据为纯json渲染" class="headerlink" title="响应数据为纯json渲染"></a>响应数据为纯json渲染</h2><p>与ajax数据相比：纯json数据在前面会有数据名，如：<code>mtopjson2(&#123;api: ...&#125;)</code></p><p>而ajax前面是没有这个字符串的</p><h2 id="某案例中的sign解密"><a href="#某案例中的sign解密" class="headerlink" title="某案例中的sign解密"></a>某案例中的sign解密</h2><p>在数据源的发起程序中搜索sign，寻找到如下代码段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> f = <span class="hljs-string">&quot;//&quot;</span> + (d.<span class="hljs-property">prefix</span> ? d.<span class="hljs-property">prefix</span> + <span class="hljs-string">&quot;.&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) + (d.<span class="hljs-property">subDomain</span> ? d.<span class="hljs-property">subDomain</span> + <span class="hljs-string">&quot;.&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) + d.<span class="hljs-property">mainDomain</span> + <span class="hljs-string">&quot;/h5/&quot;</span> + c.<span class="hljs-property">api</span>.<span class="hljs-title function_">toLowerCase</span>() + <span class="hljs-string">&quot;/&quot;</span> + c.<span class="hljs-property">v</span>.<span class="hljs-title function_">toLowerCase</span>() + <span class="hljs-string">&quot;/&quot;</span><br>              , g = c.<span class="hljs-property">appKey</span> || (<span class="hljs-string">&quot;waptest&quot;</span> === d.<span class="hljs-property">subDomain</span> ? <span class="hljs-string">&quot;4272&quot;</span> : <span class="hljs-string">&quot;12574478&quot;</span>)<br>              , i = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>()<br>              , j = <span class="hljs-title function_">h</span>(d.<span class="hljs-property">token</span> + <span class="hljs-string">&quot;&amp;&quot;</span> + i + <span class="hljs-string">&quot;&amp;&quot;</span> + g + <span class="hljs-string">&quot;&amp;&quot;</span> + c.<span class="hljs-property">data</span>)<br>              , k = &#123;<br>                <span class="hljs-attr">jsv</span>: w,<br>                <span class="hljs-attr">appKey</span>: g,<br>                <span class="hljs-attr">t</span>: i,<br>                <span class="hljs-attr">sign</span>: j<br>            &#125;<br>              , l = &#123;<br>                <span class="hljs-attr">data</span>: c.<span class="hljs-property">data</span>,<br>                <span class="hljs-attr">ua</span>: c.<span class="hljs-property">ua</span><br>            &#125;;<br></code></pre></td></tr></table></figure><p>从这里就可以发现sign这个签名是 <code>h(d.token + &quot;&amp;&quot; + i + &quot;&amp;&quot; + g + &quot;&amp;&quot; + c.data)</code>这段生成的</p><p>分析：数据主体加密函数是h，打断点后查看直接获取token的值，扣代码到js，先不管是否是动态数据</p><p>看到<code>c.data</code>就要和请求体中的data比较，因为可能不止一个加密，可跳过再次比较，对上之后，在控制台中输入<code>c.data</code>可直接获取</p><blockquote><p>为什么不直接复制，要先在控制台打印再复制：</p><p>直接复制会导致其中的引号出现问题，控制台打印出来cv就能用</p></blockquote><p>之后进入h源码中，扣下整个函数后执行代码得到sign值</p><p>获取sign值后还需要验证：打断点后获取到i的值（时间戳，看页面上sign值是否和本地得到的sign值相同），相同则解密函数正确</p><h2 id="其他小知识"><a href="#其他小知识" class="headerlink" title="其他小知识"></a>其他小知识</h2><h3 id="有提示加密的响应数据"><a href="#有提示加密的响应数据" class="headerlink" title="有提示加密的响应数据"></a>有提示加密的响应数据</h3><p>比如在预览数据中，有一个<code>isEncrypt</code>属性，那么就可以直接使用这个属性去搜索加密函数</p><h3 id="iv属性判断"><a href="#iv属性判断" class="headerlink" title="iv属性判断"></a>iv属性判断</h3><p>在加密过程中发现iv属性设置，就是AES加密模型</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Less使用</title>
    <link href="/2022/08/13/Less%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/13/Less%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Less（Leaner Style Sheets 的缩写）是一门CSS扩展语言，也成为CSS预处理器。</p><p>在CSS的语法基础上，引入了变量，Mixin（混入），运算已经函数等功能，简化了CSS的编写，降低了CSS的维护成本，<a href="http://lesscss.cn/">进入Less中文网站</a></p><p>目前只记录简单使用，主流还是SCSS，详见另一篇</p><h2 id="配置webstorm自动编译"><a href="#配置webstorm自动编译" class="headerlink" title="配置webstorm自动编译"></a>配置webstorm自动编译</h2><h3 id="安装less模块"><a href="#安装less模块" class="headerlink" title="安装less模块"></a>安装less模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全局安装less</span><br>npm i less -g<br><span class="hljs-comment"># 安装less的插件，用于压缩代码</span><br>npm i less-plugin-clean-css -g<br></code></pre></td></tr></table></figure><h3 id="配置webstorm"><a href="#配置webstorm" class="headerlink" title="配置webstorm"></a>配置webstorm</h3><p>进入 File&gt;Settings&gt;Tools&gt;File Watcher ，添加less编译，全默认就行</p><blockquote><p>program这个地方填写的是less的cmd文件路径，不知道地址的直接搜索lessc.cmd，一般全局装好less模块就自动补上了</p></blockquote><p>配置完了重启下webstorm，需要注意的是，编译的less文件<strong>需要放置在css文件下</strong>，因为默认配置中就是如此</p><h2 id="Less变量"><a href="#Less变量" class="headerlink" title="Less变量"></a>Less变量</h2><p>定义一个变量</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">@变量名: 值;<br></code></pre></td></tr></table></figure><p>使用一个变量</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">属性名: @变量名<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@font-color:</span> <span class="hljs-number">#666</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@font-color</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@font-color</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>变量命名规则：</p><ol><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li><li>必须以<code>;</code>结尾</li></ol><p>于SCSS相比：less的变量声明用<code>@</code>，而scss使用<code>$</code></p></blockquote><h2 id="Less嵌套"><a href="#Less嵌套" class="headerlink" title="Less嵌套"></a>Less嵌套</h2><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@font-color:</span> <span class="hljs-number">#666</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@font-color</span>;<br><br>  <span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">@font-color</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="伪类、结构伪类选择器"><a href="#伪类、结构伪类选择器" class="headerlink" title="伪类、结构伪类选择器"></a>伪类、结构伪类选择器</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@font-color:</span> <span class="hljs-number">#666</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@font-color</span>;<br><br>  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span><span class="hljs-selector-tag">-child</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00a4ff</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有<code>&amp;</code>，那么编译后就有一个空格，被当作是子类</p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>同理伪类选择器，使用<code>&amp;</code>符号就可以</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@font-color:</span> <span class="hljs-number">#666</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@font-color</span>;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;this is after&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在嵌套代码上，less和scss写法相同</p></blockquote><h2 id="Less运算"><a href="#Less运算" class="headerlink" title="Less运算"></a>Less运算</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@border-width:</span> <span class="hljs-number">10px</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span> - <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span> * <span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-variable">@border-width</span> + <span class="hljs-number">10</span> solid <span class="hljs-number">#000</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>同理，写法和scss是一样的</p><p>注意点：</p><ol><li>在运算符的两边最好留一个空格</li><li>做运算时，如果两边只有一个单位，就以这个单位为最后运算结果</li><li>做运算时，如果两边都有单位，则以前面的运算单位为结果</li><li>新版本除法需要使用括号，如：<code>font-size: (320px / @span);</code></li></ol></blockquote><p>甚至颜色都可以运算：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span> - <span class="hljs-number">#222</span>;    <span class="hljs-comment">// color: #444</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>less</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端布局说明</title>
    <link href="/2022/08/10/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/10/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h2><h3 id="PC常见"><a href="#PC常见" class="headerlink" title="PC常见"></a>PC常见</h3><ul><li>360浏览器（双内核IE和Webkit）</li><li>谷歌浏览器（Webkit内核）</li><li>火狐浏览器（Gecko内核）</li><li>QQ浏览器（双内核IE和Webkit）</li><li>百度浏览器（双内核Trident和Blink（Webkit））【已停止维护】</li><li>搜狗浏览器（Webkit内核）</li><li>IE浏览器【已淘汰，转Edge（Webkit内核）】</li></ul><h3 id="移动端常见"><a href="#移动端常见" class="headerlink" title="移动端常见"></a>移动端常见</h3><ul><li>UC浏览器</li><li>QQ浏览器</li><li>欧朋浏览器</li><li>百度手机浏览器</li><li>360安全浏览器</li><li>谷歌浏览器</li><li>搜狗手机浏览器</li><li>猎豹浏览器</li><li>夸克浏览器</li><li>其他如：Via，Edge</li></ul><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p>总结：要兼容移动端主流浏览器，处理Webkit内核浏览器即可</p><h2 id="物理像素和物理像素比"><a href="#物理像素和物理像素比" class="headerlink" title="物理像素和物理像素比"></a>物理像素和物理像素比</h2><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了，比如苹果6&#x2F;7&#x2F;8 是 750 * 1334<br>我们开发时候的1px不是一定等于1个物理像素（PC端页面，1个px等于1个物理像素，移动端不是）<br>一个px能显示的物理像素个数称为物理像素比，如 苹果8 的像素比为2.0，物理像素为750，所以实际开发像素只有350px</p><blockquote><p>这个差别来源说明：<br>PC端和早前的手机屏幕或者普通手机屏幕都是 1CSS像素 &#x3D; 1物理像素的<br>但是手机端提出了 Retina（视网膜屏幕）显示技术，可以把更多的物理像素点压缩到屏幕中，从而达到更高的分辨率，所以这就是手机中 物理像素 &#x3D; 开发像素 * 物理像素比</p></blockquote><h2 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h2><p>对于一张50px * 50px的图片，在手机Retina屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊<br>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题<br>通常使用二倍图，因为iPhone 6&#x2F;7&#x2F;8 的影响，但是现在还存在3倍图4倍图的情况，这个看实际开发公司需求<br>还有一点就是要注意背景图片的缩放问题</p><h3 id="img宽高缩放："><a href="#img宽高缩放：" class="headerlink" title="img宽高缩放："></a>img宽高缩放：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img100.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;这是 100px * 100px 的图片&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在2.0物理像素比的手机中显示，50px宽高css像素会产生100px宽高的物理像素，也就是说100px * 100px的图片刚好填慢，不会产生模糊</p><h3 id="二倍精灵图"><a href="#二倍精灵图" class="headerlink" title="二倍精灵图"></a>二倍精灵图</h3><p>要使用二倍精灵图，不能直接测量xy，正确使用步骤如下：</p><ol><li>测量出所需图标的坐标后，各取一半，如二倍图中为 -162px 0，代码中背景偏移就为 -81px 0</li><li>需要使用<code>background-size</code>属性写精灵图宽度的一半，高度不写或auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">...</span>) no-repeat -<span class="hljs-number">81px</span> <span class="hljs-number">0</span>;<br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">200px</span> auto;<br></code></pre></td></tr></table></figure><h2 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h2><h3 id="单独移动端页面（和PC页面分开）"><a href="#单独移动端页面（和PC页面分开）" class="headerlink" title="单独移动端页面（和PC页面分开）"></a>单独移动端页面（和PC页面分开）</h3><p>举例：</p><ul><li>京东商城手机版</li><li>淘宝触屏版</li><li>苏宁易购手机版</li><li>…</li></ul><blockquote><p>这类单独制作移动端从路由可以看出，如 m.taobao.comm.jd.com</p></blockquote><p>技术选型：</p><ul><li>流式布局（百分比布局）</li><li>flex弹性</li><li>rem + 媒体查询</li></ul><p>一般都是混合使用</p><h3 id="响应式页面兼容移动端"><a href="#响应式页面兼容移动端" class="headerlink" title="响应式页面兼容移动端"></a>响应式页面兼容移动端</h3><p>举例：</p><ul><li>三星手机官网</li><li>…</li></ul><p>缺点：制作麻烦，需要花费大量精力去调试兼容性问题</p><p>技术上来说，底层都是根据媒体查询实现的，如tailwindcss，bootstrap</p><h2 id="移动端CSS初始化"><a href="#移动端CSS初始化" class="headerlink" title="移动端CSS初始化"></a>移动端CSS初始化</h2><p>对于移动端的css，初始化就不用手动了，推荐使用 normalize.css</p><p>包下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">npm i normalize.css<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>保护了有价值的默认值</li><li>修复了浏览器的bug</li><li>是模块化的</li><li>拥有详细的文档</li></ol><h2 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-comment">/* 清除点击高亮 */</span><br>    -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;<br>&#125;<br><br><span class="hljs-selector-tag">input</span>, <span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-comment">/* 移动端浏览器默认外观在ios上加上这个属性才能给按钮和输入框自定义样式 */</span><br>-webkit-appearance: none;   <br>&#125;<br><br><span class="hljs-selector-tag">img</span>, <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-comment">/* 禁用长按页面时的弹出菜单 */</span><br>    -webkit-touch-callout: none;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h2><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>流式布局，就是百分比布局，也称非固定像素布局。主要是针对宽度像素百分比控制实现自动缩放</p><p>当盒子被缩放到过大或者过小的时候，盒子内容就会被排挤或填充，所以需要用到以下两个属性：</p><p>max-width 最大宽度   min-width 最小宽度</p><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><p>常见就不说明了；</p><h3 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h3><p>就是依据html标签中的字体大小</p><h3 id="vw-vh布局"><a href="#vw-vh布局" class="headerlink" title="vw&#x2F;vh布局"></a>vw&#x2F;vh布局</h3><p>1vw(viewport width)  &#x3D; 1&#x2F;100 视口宽度</p><p>1vh(viewport height) &#x3D; 1&#x2F;100 视口高度</p><p>基础使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,use-scalable=no&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 设计图中有一个 50px * 50px 的盒子，设计图宽度375px，换算为vw */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* （50 / 3.75）vw */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">13.3333vw</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">13.3333vw</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 3.75px字体大小，（3.75 / 3.75）vw */</span></span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1vw</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff7c2d</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is viewport<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在开发中，vw就够用了，vh不太需要，如b站的布局就是使用的vw</p></blockquote><p>可使用vw代替媒体查询，如下：</p><pre><code class="scss">$span: 10;// 设计图为750px，我分10份，因为10好计算$font-span: 75;html &#123;  font-size: 100vw / $span;&#125;// 限制超过750px按照750计算@media screen and (min-width: 750px) &#123;    html &#123;        font-size: 75    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>布局方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Router 6</title>
    <link href="/2022/07/31/React-Router-6/"/>
    <url>/2022/07/31/React-Router-6/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之前记录的react脚手架中，我记录的全是react router 6的用法，这里来统计一下，也详细记录下react-router</p><h3 id="React-Router介绍"><a href="#React-Router介绍" class="headerlink" title="React Router介绍"></a>React Router介绍</h3><p>React Router 以三个不同的报发布到npm上，它们分别为：</p><ol><li>react-router：路由的核心库，提供了很多的：组件，钩子</li><li>react-router-dom：包含了react-router所有内容，并添加一些专门用于DOM的组件，例如<code>&lt;BrowserRouter&gt;</code>等</li><li>react-router-native：包含了react-router所有内容，并添加一些专门用于ReactNative的API，例如<code>&lt;NativeRouter&gt;</code>等。</li></ol><p>相比React Router 5版本，改变了什么</p><ol><li>内置组件的变化：移除<code>&lt;Switch&gt;</code>，新增<code>&lt;Routes&gt;</code>等</li><li>语法的变化：<code>component=&#123;About&#125;</code>变为<code>element=&#123;&lt;About /&gt;&#125;</code>等</li><li>新增多个hook：<code>useParams</code>，<code>useNavigate</code>，<code>useMatch</code>等</li><li><strong>官方明确推荐使用函数式组件！！</strong></li></ol><h2 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h2><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><p>不演示</p><h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><p>同上</p><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>同上</p><h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h3><p>同上，在5中使用 activeClassName定义当前样式名，6里面想想className和style使用回调函数就能记起来了，建议封装一个方法中，不然太冗余了</p><p>属性<code>end</code>，默认为false，当有子路由时，使用end属性可以使访问子路由时父路由不高亮</p><h3 id="Routes和Route"><a href="#Routes和Route" class="headerlink" title="Routes和Route"></a>Routes和Route</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Route</span> caseSensitive path=<span class="hljs-string">&quot;/main&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuLink</span> /&gt;</span></span>&#125; /&gt;<br></code></pre></td></tr></table></figure><blockquote><p>caseSensitive：是否区分大小写，默认不区分，false</p></blockquote><p>其他不演示了</p><h3 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h3><p>只要渲染就跳转，如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [sum, setSum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            当sum值为2时自动跳转到home</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setSum(sum + 1)&#125;&gt;点击增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            &#123;sum === 2 ? <span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前sum值为：&#123;sum&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><p>一般用来做路由重定向</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Loading ...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>&#125;&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/new&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Suspense</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Navigate</span> to=<span class="hljs-string">&quot;/home&quot;</span> replace /&gt;<br></code></pre></td></tr></table></figure><p>replace为true可以使路由跳转后无法后退</p></blockquote><h3 id="useRoutes（important！）"><a href="#useRoutes（important！）" class="headerlink" title="useRoutes（important！）"></a>useRoutes（important！）</h3><p>使用useRoutes对路由进行对象化，和vue一样</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> routes = <span class="hljs-title function_">useRoutes</span>([<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/main&quot;</span> /&gt;</span></span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/main&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuLink</span> /&gt;</span></span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/my&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">My</span> /&gt;</span></span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/plus&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentPlus</span> /&gt;</span></span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/CP&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ChildrenAndParent</span> /&gt;</span></span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/catch&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Catch</span> /&gt;</span></span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/new&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RouteNew</span> /&gt;</span></span><br>    &#125;<br>]) <span class="hljs-keyword">as</span> <span class="hljs-title class_">ReactElement</span><br><br>...<br><br><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">h1</span>&gt;</span>Loading ...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">            &#123;routes&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><blockquote><p>一般来说可以直接封装出去，单独一个路由文件（感觉回来了！！），注意这里是<code>element</code>属性不是<code>component</code>😀</p></blockquote><p>在子组件上，直接使用children属性，同vue：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/main&#x27;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Main</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;goA&#x27;</span>,<br>            <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">A</span> /&gt;</span></span><br>        &#125;<br>    ]<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="Outlet（important！）"><a href="#Outlet（important！）" class="headerlink" title="Outlet（important！）"></a>Outlet（important！）</h3><p>配合嵌套路由使用，定义渲染位置，同vue中的<code>router-view</code></p><h3 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h3><p>接收路由中携带的params参数<code>/detail/1/FSAN</code>，注册路由时需要使用<code>:参数名</code></p><h3 id="useMatch"><a href="#useMatch" class="headerlink" title="useMatch"></a>useMatch</h3><p>分析一个地址，如：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">useMatch</span>(<span class="hljs-string">&#x27;/home/message/detail/:id/:title&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>使用<code>:参数名</code>支持匹配</p></blockquote><h3 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h3><p>接收路由中携带的search参数<code>/detail?id=1&amp;title=FSAN</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> [search, setSearch] = <span class="hljs-title function_">useSearchParams</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>))<br><span class="hljs-title function_">setSearch</span>(<span class="hljs-string">&#x27;id=2&amp;title=BSAN&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>使用urlEncoded格式的字符串修改search参数</p></blockquote><h3 id="useLocaltion（important！）"><a href="#useLocaltion（important！）" class="headerlink" title="useLocaltion（important！）"></a>useLocaltion（important！）</h3><p>分析当前路由，并且可以从中获取到传递的state数据</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">useLocation</span>())<br></code></pre></td></tr></table></figure><p>link传递state数据</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Link</span> to=<span class="hljs-string">&quot;/home&quot;</span> state=&#123;&#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span><br>&#125;&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><h3 id="useNavigate（important！）"><a href="#useNavigate（important！）" class="headerlink" title="useNavigate（important！）"></a>useNavigate（important！）</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toPath</span> = (<span class="hljs-params">path:<span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>    <span class="hljs-title function_">navigate</span>(path)<br>    <span class="hljs-comment">// or</span><br>    <span class="hljs-title function_">navigate</span>(path, &#123;<br>        <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">state</span>: &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-comment">// or</span><br>    <span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编程式导航，一看就懂了吧</p></blockquote><h3 id="useNavigationType"><a href="#useNavigationType" class="headerlink" title="useNavigationType"></a>useNavigationType</h3><p>返回当前的导航类型（用户是怎么来的）</p><table><thead><tr><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>POP</td><td>在浏览器中直接打开这个路由组件（刷新页面）</td></tr><tr><td>PUSH</td><td>通过跳转进来的</td></tr><tr><td>REPLACE</td><td>通过替代当前路由记录进来的（replace）</td></tr></tbody></table><h3 id="useOutlet"><a href="#useOutlet" class="headerlink" title="useOutlet"></a>useOutlet</h3><p>查看当前渲染的路由组件</p><h3 id="useResolvedPath"><a href="#useResolvedPath" class="headerlink" title="useResolvedPath"></a>useResolvedPath</h3><p>给定一个url值，解析其中的path，search，hash值</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React16.8+扩展</title>
    <link href="/2022/07/29/React16.8+%E6%89%A9%E5%B1%95/"/>
    <url>/2022/07/29/React16.8+%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="setState（状态更新）"><a href="#setState（状态更新）" class="headerlink" title="setState（状态更新）"></a>setState（状态更新）</h2><p>在类组件中，setState用于更新state中的数据，有以下两种写法：</p><ol><li>对象式：<code>setState(stateChange, [callback])</code><ol><li>stateChange为一个对象，更新后的数据</li><li>callback为render调用后执行的回调函数</li></ol></li><li>函数式<code>setState(updater, [callback])</code><ol><li>updater为一个函数，返回stateChange作为更新后的数据</li><li>update可以接收到state和props</li><li>callback同上</li></ol></li></ol><blockquote><p>因为react中setState为同步函数，但是由setState引起的修改操作是异步的，如果要获取最新的状态数据，需要在回调函数中读取</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tsx">setCount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 对象式写法</span><br>    <span class="hljs-keyword">const</span> &#123; count &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">count</span>: count + <span class="hljs-number">1</span> &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;状态更新完毕&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-comment">// 函数式写法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state: <span class="hljs-built_in">any</span>, props</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;接收到的参数&#x27;</span>, props)<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>        &#125;<br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;状态更新完毕&#x27;</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>手动简化函数式写法：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 函数式写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count &#125;: &#123; count: <span class="hljs-built_in">number</span> &#125;</span>) =&gt;</span> (&#123; <span class="hljs-attr">count</span>: count + <span class="hljs-number">1</span> &#125;), <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;状态更新完毕&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><p>对象式写法其实是函数式写法的语法糖，推荐使用条件：</p><ol><li>当修改后的状态不需要在state基础上更新时，使用对象式写法</li><li>当需要在state基础上更新时，使用函数式</li></ol><h2 id="lazyload（组件懒加载）"><a href="#lazyload（组件懒加载）" class="headerlink" title="lazyload（组件懒加载）"></a>lazyload（组件懒加载）</h2><p>lazyload一般来说是对于路由组件使用的，用法如下：</p><h3 id="不使用懒加载的路由"><a href="#不使用懒加载的路由" class="headerlink" title="不使用懒加载的路由"></a>不使用懒加载的路由</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MenuLink</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MenuLink&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">My</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/My&#x27;</span><br><br>...<br>&lt;<span class="hljs-title class_">Routes</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/main&quot;</span> /&gt;</span>&#125; /&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/main&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">MenuLink</span> /&gt;</span>&#125; /&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/my&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">My</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="使用懒加载"><a href="#使用懒加载" class="headerlink" title="使用懒加载"></a>使用懒加载</h3><ol><li>引入lazy，用法类似vue3的defineAsyncComponent</li><li>将路由标签使用Suspense标签包裹，并指定加载过程显示组件</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, lazy, <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MenuLink</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/MenuLink&#x27;</span>))<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">My</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/My&#x27;</span>))<br><br>...<br>&lt;<span class="hljs-title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Loading ...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>&#125;&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/main&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/main&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">MenuLink</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/my&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">My</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Suspense</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>fallback可以直接指定一个组件，像这样 <code>&lt;Suspense fallback=&#123;&lt;Loader/&gt;&#125;&gt;</code>，这里的Loader组件必须先引入，不可懒加载</p><p>lazy不可放入函数组件中，会导致浏览器一直处于加载状态</p></blockquote><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>因为函数式组件中没有state状态，所以需要引入useState创建一个状态管理，如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// hooks创建state状态和修改函数</span><br><span class="hljs-keyword">const</span> [countNum, setCountNum]: [<span class="hljs-attr">countNum</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">setCountNum</span>: <span class="hljs-function">(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><blockquote><p>const [参数名，更新函数名] &#x3D; useState(初始值)</p></blockquote><p>setCountNum有两个用法：</p><ol><li>直接传递更新后的数据</li><li>传递一个函数，回调参数为count，返回的是更新后的数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ISetCount</span>&lt;T&gt; = <span class="hljs-function">(<span class="hljs-params">callback: ((count: T) =&gt; T) | <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [count, setCount]: [<span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">setCount</span>: <span class="hljs-title class_">ISetCount</span>&lt;<span class="hljs-built_in">number</span>&gt;] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>)<br>        <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前值为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addCount&#125;</span>&gt;</span>点击增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果使用解构的方式，推荐第一种，因为第一个参数就是count</p></blockquote><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>在React更新DOM后调用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [num]: [<span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">setNum</span>: <span class="hljs-function">(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> [age, setAge]: [<span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">setNum</span>: <span class="hljs-function">(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Effect：渲染完毕&#x27;</span>, num)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Effect：销毁完毕&#x27;</span>, num)<br>        &#125;<br>    &#125;, [num, age])<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setAge(age + 1)&#125;&gt;修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Count</span><br></code></pre></td></tr></table></figure><blockquote><p>执行顺序，首次渲染时，渲染完毕先执行，然后执行一次销毁完毕，后再次执行渲染完毕</p><p>后续更新渲染时：销毁完毕（可以获取到更新前的state） -&gt; 渲染完毕</p><p>useEffect 第二个参数是一个数组，传递的值作为检测值，在后续更新渲染时，检测值发生变化才会触发 useEffect 中的函数，如这里如果比较值只有一个num，则除了第一次渲染会触发函数，后续点击都不会触发，如果是空数组，则只会在第一次渲染render的时候调用一次</p></blockquote><h4 id="自动累加器案例"><a href="#自动累加器案例" class="headerlink" title="自动累加器案例"></a>自动累加器案例</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> root <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../main&#x27;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ISetCount</span>&lt;T&gt; = <span class="hljs-function">(<span class="hljs-params">callback: ((count: T) =&gt; T) | <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [count, setCount]: [<span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">setCount</span>: <span class="hljs-title class_">ISetCount</span>&lt;<span class="hljs-built_in">number</span>&gt;] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>: <span class="hljs-built_in">number</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 第一次render和后续更新调用</span><br>        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>)<br>        &#125;, <span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 第一次render调用一次，后续组件卸载调用</span><br>            <span class="hljs-built_in">clearInterval</span>(timer)<br>        &#125;<br>        <span class="hljs-comment">// 监听数组中的数据，限制发生改变才调用</span><br>    &#125;, [])<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">unNode</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        root.<span class="hljs-title function_">unmount</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前值为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;unNode&#125;</span>&gt;</span>卸载组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>() <span class="hljs-keyword">as</span> <span class="hljs-title class_">MutableRefObject</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inputRef.<span class="hljs-property">current</span>?.<span class="hljs-property">value</span>)<br><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前值为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><blockquote><p>使用<code>?.</code>就算value属性为undefined也不会报错</p></blockquote><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>Fragment标签作用就和vue中的template差不多，当你不想要有一个父标签时可以使用，只支持接收一个参数<code>key</code>方便遍历</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> list = [...<span class="hljs-title class_">Array</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">keys</span>()].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> (&#123; <span class="hljs-attr">id</span>: v, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;F_SAN&#x27;</span> + v.<span class="hljs-title function_">toString</span>() &#125;))<br><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前值为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;unNode&#125;</span>&gt;</span>卸载组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">            list.map(v =&gt; (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;v.key&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span><br><span class="language-xml">            ))</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br><br><span class="hljs-comment">// &lt;p&gt;F_SAN0&lt;/p&gt;</span><br><span class="hljs-comment">// &lt;p&gt;F_SAN1&lt;/p&gt;</span><br><span class="hljs-comment">// &lt;p&gt;F_SAN2&lt;/p&gt;</span><br><span class="hljs-comment">// &lt;p&gt;F_SAN3&lt;/p&gt;</span><br><span class="hljs-comment">// &lt;p&gt;F_SAN4&lt;/p&gt;</span><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><blockquote><p>如果这里是div，那么每个p标签都会套上一个div</p><p><code>[...Array(100).keys()]</code>用于生成指定长度数组，内容为0-99</p></blockquote><h2 id="createContext（上下文）"><a href="#createContext（上下文）" class="headerlink" title="createContext（上下文）"></a>createContext（上下文）</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Provider</span>, <span class="hljs-title class_">Consumer</span> &#125; = <span class="hljs-title function_">createContext</span>(<span class="hljs-string">&#x27;默认值&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">C</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;#<span class="hljs-attr">EFEFEF</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Consumer</span>&gt;</span></span><br><span class="language-xml">                &#123;</span><br><span class="language-xml">                    value =&gt; &#123;</span><br><span class="language-xml">                        const data = JSON.parse(value)</span><br><span class="language-xml">                        return (</span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">                                    &#123;</span><br><span class="language-xml">                                        data.map((v: any) =&gt; (</span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span></span><br><span class="language-xml">                                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;v.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;v.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                                        ))</span><br><span class="language-xml">                                    &#125;</span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">                        )</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Consumer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">B</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;#<span class="hljs-attr">D1D1D1</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是B组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">C</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">My</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> tableData = [<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;F_SAN&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;F_SAN1&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;F_SAN2&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">22</span><br>        &#125;<br>    ]<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;#<span class="hljs-attr">C0A080</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是A组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>A组件的name为<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;JSON.stringify(tableData)&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">B</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">My</span><br></code></pre></td></tr></table></figure><p>可以对于子组件对及其以下的全部孙组件的数据传递</p><blockquote><p>注意用法：</p><ol><li>Provider标签的value属性表示传递数据，也可以为对象或数组，推荐对象写法，解构时无需考虑顺序</li><li>向下传递的所有子组件都可以使用Consumer标签来接收数据，内容是一个函数，value即使传递的数据</li></ol></blockquote><h2 id="useContext（使用上下文）"><a href="#useContext（使用上下文）" class="headerlink" title="useContext（使用上下文）"></a>useContext（使用上下文）</h2><p>在<code>createContext</code>中，传递过去的参数，使用<code>Consumer</code>标签接受较为繁琐，所以就有了<code>useContext</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br><br><span class="hljs-keyword">const</span> dataContext = <span class="hljs-title function_">createContext</span>(<span class="hljs-string">&#x27;默认值&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">C</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">useContext</span>(dataContext)<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(value)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;#<span class="hljs-attr">EFEFEF</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">                    &#123;</span><br><span class="language-xml">                        data.map((v: any) =&gt; (</span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;v.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;v.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                        ))</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">B</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;#<span class="hljs-attr">D1D1D1</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是B组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">C</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">My</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> tableData = [<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;F_SAN&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;F_SAN1&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">21</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;F_SAN2&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">22</span><br>        &#125;<br>    ]<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;#<span class="hljs-attr">C0A080</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是A组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>A组件的name为<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;JSON.stringify(tableData)&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">B</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">My</span><br></code></pre></td></tr></table></figure><p>直接将创建出来的上下文对象交给<code>useContext</code>，就可以获取到其中的值</p><h2 id="优化子父组件渲染"><a href="#优化子父组件渲染" class="headerlink" title="优化子父组件渲染"></a>优化子父组件渲染</h2><p>状态更新后的重新渲染会非常影响性能，特别是子组件数量多的情况下</p><h3 id="类式组件优化"><a href="#类式组件优化" class="headerlink" title="类式组件优化"></a>类式组件优化</h3><h4 id="方法一：自己修改钩子"><a href="#方法一：自己修改钩子" class="headerlink" title="方法一：自己修改钩子"></a>方法一：自己修改钩子</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">shouldComponentUpdate (<span class="hljs-attr">nextProps</span>: <span class="hljs-title class_">Readonly</span>&lt;&#123;&#125;&gt;, <span class="hljs-attr">nextState</span>: <span class="hljs-title class_">Readonly</span>&lt;&#123;&#125;&gt;, <span class="hljs-attr">nextContext</span>: <span class="hljs-built_in">any</span>): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-comment">// 判断更新前后状态，相同则不渲染</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span> !== nextState.<span class="hljs-property">name</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：使用PureComponent"><a href="#方法二：使用PureComponent" class="headerlink" title="方法二：使用PureComponent"></a>方法二：使用PureComponent</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>将Component替换为PureComponent，react将自行浅判断</p></blockquote><h3 id="函数式组件优化"><a href="#函数式组件优化" class="headerlink" title="函数式组件优化"></a>函数式组件优化</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">IndexChildren</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;children render&#x27;</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>从父组件传递的姓名为：&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;parent render&#x27;</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            这是父组件当前更新次数为：&#123;count&#125;，当前姓名为：&#123;name&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count =&gt; count + 1)&#125;&gt;更新状态<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setName(&#x27;FSAN&#x27;)&#125;&gt;更新传递的姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">IndexChildren</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure><blockquote><p>memo默认只会浅比较props，如果需要定制比较，可以给第二个参数传入函数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-comment">/* render using props */</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">areEqual</span>(<span class="hljs-params">prevProps, nextProps</span>) &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  return true if passing nextProps to render would return</span><br><span class="hljs-comment">  the same result as passing prevProps to render,</span><br><span class="hljs-comment">  otherwise return false</span><br><span class="hljs-comment">  */</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-title class_">MyComponent</span>, areEqual);<br></code></pre></td></tr></table></figure><p>注意：和<code>shouldComponentUpdate</code>不同，如果<code>props</code>相同则应返回<code>true</code>，否则返回<code>false</code>。这点二者正好相反。</p></blockquote><h2 id="子父组件两种构成方式"><a href="#子父组件两种构成方式" class="headerlink" title="子父组件两种构成方式"></a>子父组件两种构成方式</h2><h3 id="使用props"><a href="#使用props" class="headerlink" title="使用props"></a>使用props</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是Parent组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                下面是子组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">                &#123;props.children&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Children</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Parent</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Children</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Parent</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure><blockquote><p>也可以这样直接使用属性传递：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是Parent组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                下面是子组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">                &#123;props.render()&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Children</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Parent</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;Children&#125;</span> /&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure><p>使用属性渲染的时候，就可以父组件向子组件传递参数了：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是Parent组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                下面是子组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">                &#123;props.render(&#123;</span><br><span class="language-xml">                    name: &#x27;FSAN&#x27;</span><br><span class="language-xml">                &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Children</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>从父组件接收到的参数为：&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Parent</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;Children&#125;</span> /&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure></blockquote><h3 id="直接子组件放入父组件"><a href="#直接子组件放入父组件" class="headerlink" title="直接子组件放入父组件"></a>直接子组件放入父组件</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是Parent组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                下面是子组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Children</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Children</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Parent</span>)<br></code></pre></td></tr></table></figure><blockquote><p>甚至可以这样：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;div&gt;<br>    下面是子组件<br>    &lt;hr /&gt;<br>    &#123;<span class="hljs-title class_">Children</span>()&#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>传递参数：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是Parent组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                下面是子组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">                &#123;Children(&#123;</span><br><span class="language-xml">                    name: &#x27;FSAN&#x27;</span><br><span class="language-xml">                &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Children</span> = (<span class="hljs-params">props:<span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>从父组件接收到的参数为：&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Parent</span>)<br></code></pre></td></tr></table></figure></blockquote><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// let data = [</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         key: 1,</span><br>    <span class="hljs-comment">//         name: &#x27;FSAN1&#x27;,</span><br>    <span class="hljs-comment">//         age: 20</span><br>    <span class="hljs-comment">//     &#125;,</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         key: 2,</span><br>    <span class="hljs-comment">//         name: &#x27;FSAN2&#x27;,</span><br>    <span class="hljs-comment">//         age: 22</span><br>    <span class="hljs-comment">//     &#125;,</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         key: 3,</span><br>    <span class="hljs-comment">//         name: &#x27;FSAN3&#x27;,</span><br>    <span class="hljs-comment">//         age: 24</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// ]</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">let</span> render<br>    <span class="hljs-keyword">try</span> &#123;<br>        render = (<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                &#123;</span><br><span class="language-xml">                    data.map(v =&gt; (<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.key&#125;</span>&gt;</span>姓名为：&#123;v.name&#125;; 年龄为：&#123;v.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>))</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        )<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>        render = (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发生未知错误！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>        )<br>    &#125;<br>    <span class="hljs-keyword">return</span> render<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><p>类式组件可以使用<code>componentDidCatch</code>生命周期，它会收集错误，可以返回state对象，最后判断渲染即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorBoundary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123; <br>      <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span> <br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromError</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 更新 state 使下一次渲染能够显示降级后的 UI</span><br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">componentDidCatch</span>(<span class="hljs-params">error, errorInfo</span>) &#123;<br>    <span class="hljs-comment">// 你同样可以将错误日志上报给服务器</span><br>    <span class="hljs-title function_">logErrorToMyService</span>(error, errorInfo);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">hasError</span>) &#123;<br>      <span class="hljs-comment">// 你可以自定义降级后的 UI 并渲染</span><br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发生未知错误.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>; <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上是封装好的代码，使用如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">ErrorBoundary</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">ErrorBoundary</span>&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="组件通信方式总结"><a href="#组件通信方式总结" class="headerlink" title="组件通信方式总结"></a>组件通信方式总结</h2><ol><li>props：<ol><li>普通属性</li><li>渲染函数</li></ol></li><li>消息订阅-发布<ol><li>pubs-sub，event等</li></ol></li><li>集中式管理<ol><li>redux，dva等</li></ol></li><li>conText（开发用的少，封装用的多）<ol><li>生产者-消费者模式</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux</title>
    <link href="/2022/07/27/Redux/"/>
    <url>/2022/07/27/Redux/</url>
    
    <content type="html"><![CDATA[<h2 id="Redux介绍"><a href="#Redux介绍" class="headerlink" title="Redux介绍"></a>Redux介绍</h2><p>redux是一个专门用来做状态管理的JS库（不是react插件库），前端三大框架都可以使用，但基本和react配合使用，<a href="https://redux.js.org/">点击进入官方文档</a></p><p>使用条件：</p><ol><li>某个组件的状态，需要让其他组件可以随时拿到（共享）</li><li>一个组件需要改变另一个组件的状态（通信）</li><li>总体原则：能不用就不用，如果不用比较吃力才考虑使用</li></ol><h2 id="三大核心属性"><a href="#三大核心属性" class="headerlink" title="三大核心属性"></a>三大核心属性</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>一个js对象，包含两个属性：</p><ul><li>type：标识属性，值是字符串。多个type用action分开</li><li>payload：数值属性，可选。表示本次动作携带的数据</li></ul><blockquote><p>必须带有<code>type</code>属性，只是说明有事情发生了这件事，并没有说明应该如何跟更新state</p></blockquote><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>一个纯函数，作用：</p><ul><li>初始化状态</li><li>修改状态</li></ul><p>根据传入的旧状态和action，返回新状态</p><blockquote><p><code>(previousState, action) =&gt; newState</code></p></blockquote><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>仓库，redux的核心，整合action和reducer</p><p>特点：</p><ol><li>一个应用只有一个store</li><li>获取状态：<code>store.getState()</code></li><li>创建<code>store</code>时接收<code>reducer</code>作为参数：<code>const store = createStore(reducer)</code></li><li>发起状态更新时，需要分发action：<code>store.dispatch(action)</code></li></ol><blockquote><p>监听状态变化：<code>const unSubscribe = store.subscribe(() =&gt; &#123;&#125;)</code></p><p>取消监听：<code>unSubscribe()</code></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add redux<br><span class="hljs-comment"># or</span><br>npm i redux -S<br></code></pre></td></tr></table></figure><h2 id="使用Redux"><a href="#使用Redux" class="headerlink" title="使用Redux"></a>使用Redux</h2><h3 id="创建store（主要仓库）"><a href="#创建store（主要仓库）" class="headerlink" title="创建store（主要仓库）"></a>创建store（主要仓库）</h3><p>新建 <code>redux / store.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> countReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/countReducer&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(countReducer)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><blockquote><p>在react18版本，<code>createStore</code>已被标记为弃用，新用法需要用到<code>redux-thunk</code>这个中间件（见下面的异步action）</p></blockquote><h4 id="使用RTK（Redux-Toolkit）"><a href="#使用RTK（Redux-Toolkit）" class="headerlink" title="使用RTK（Redux Toolkit）"></a>使用RTK（Redux Toolkit）</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i @reduxjs/toolkit<br><span class="hljs-comment"># or</span><br>yarn add @reduxjs/toolkit<br></code></pre></td></tr></table></figure><h5 id="创建store对象"><a href="#创建store对象" class="headerlink" title="创建store对象"></a>创建store对象</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><span class="hljs-keyword">import</span> countReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/countReducer&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>    <span class="hljs-attr">reducer</span>: countReducer<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h3 id="创建reducers（执行函数）"><a href="#创建reducers（执行函数）" class="headerlink" title="创建reducers（执行函数）"></a>创建reducers（执行函数）</h3><p>新建 <code>redux / reducers / countReducer.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">state</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">action</span>: &#123;<span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span>&#125;) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, data &#125; = action<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state, action)<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state + data<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state - data<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">return</span> state<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>state 当前的state树</li><li>action 要处理的行为</li><li>返回新的state树</li></ol></blockquote><h3 id="获取state的值"><a href="#获取state的值" class="headerlink" title="获取state的值"></a>获取state的值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/store&#x27;</span><br>store.<span class="hljs-title function_">getState</span>()<br></code></pre></td></tr></table></figure><h3 id="使用reducers函数更新state"><a href="#使用reducers函数更新state" class="headerlink" title="使用reducers函数更新state"></a>使用reducers函数更新state</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/store&#x27;</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-attr">data</span>: <span class="hljs-number">1</span> &#125;)<br></code></pre></td></tr></table></figure><blockquote><p>但是注意：就算更新state中的数据，dom也不会刷新，需要手动监听后刷新</p></blockquote><h3 id="手动监听渲染"><a href="#手动监听渲染" class="headerlink" title="手动监听渲染"></a>手动监听渲染</h3><p>直接在<code>main.tsx</code>中建立redux的监听即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redux/store&#x27;</span><br><br><span class="hljs-keyword">const</span> rootDom = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">render</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    rootDom.<span class="hljs-title function_">render</span>(<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">// 初次渲染</span><br><span class="hljs-title function_">render</span>()<br><span class="hljs-comment">// 监听redux中的状态改变重新渲染</span><br>store.<span class="hljs-title function_">subscribe</span>(render)<br></code></pre></td></tr></table></figure><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p>计数器：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// Count -&gt; index.tsx</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/store&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// select标签ref对象</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">selectRef</span>: <span class="hljs-title class_">HTMLSelectElement</span><br>    <span class="hljs-comment">// 操作集合</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: &#123; [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span> &#125; = &#123;<br>        <span class="hljs-string">&#x27;+&#x27;</span> () &#123;<br>            <span class="hljs-title function_">changeState</span>(<span class="hljs-string">&#x27;+&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-string">&#x27;-&#x27;</span> () &#123;<br>            <span class="hljs-title function_">changeState</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-string">&#x27;odd+&#x27;</span> () &#123;<br>            <span class="hljs-keyword">const</span> state = store.<span class="hljs-title function_">getState</span>()<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前为：&#x27;</span>, state)<br>            <span class="hljs-keyword">if</span> (state % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) <span class="hljs-title function_">changeState</span>(<span class="hljs-string">&#x27;+&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-keyword">async</span> <span class="hljs-string">&#x27;async+&#x27;</span> () &#123;<br>            <span class="hljs-title function_">changeState</span>(<span class="hljs-string">&#x27;+&#x27;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 改变redux中状态</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeState</span> = (<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>        store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-keyword">type</span>, <span class="hljs-attr">data</span>: <span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>) &#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(e:</span> <span class="hljs-attr">HTMLSelectElement</span>) =&gt;</span> &#123;</span><br><span class="language-xml">                selectRef = e</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler[</span>&#x27;+&#x27;]&#125;&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler[</span>&#x27;<span class="hljs-attr">-</span>&#x27;]&#125;&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler[</span>&#x27;<span class="hljs-attr">odd</span>+&#x27;]&#125;&gt;</span>当前求和为奇数再加<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler[</span>&#x27;<span class="hljs-attr">async</span>+&#x27;]&#125;&gt;</span>异步加<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Count</span><br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// redux -&gt; reducers -&gt; countReducer.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">state</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">action</span>: &#123;<span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span>&#125;) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, data &#125; = action<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state, action)<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state + data<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state - data<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">return</span> state<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// redux -&gt; store.ts</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> countReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/countReducer&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(countReducer)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h3 id="完善结构"><a href="#完善结构" class="headerlink" title="完善结构"></a>完善结构</h3><h4 id="封装类型ts文件"><a href="#封装类型ts文件" class="headerlink" title="封装类型ts文件"></a>封装类型ts文件</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// src -&gt; typeFile.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Dispatch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAction</span>&lt;T&gt; &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">data</span>: T<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">IAsyncActionFn</span>&lt;T&gt; = <span class="hljs-function">(<span class="hljs-params">dispatch: Dispatch&lt;IAction&lt;T&gt;&gt;</span>) =&gt;</span> <span class="hljs-built_in">void</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICreateAction</span>&lt;T&gt; &#123;<br>    [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">(<span class="hljs-params">data: T</span>) =&gt;</span> (<span class="hljs-title class_">IAction</span>&lt;T&gt; | <span class="hljs-title class_">IAsyncActionFn</span>&lt;T&gt;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IReducerHandle</span>&lt;T&gt; &#123;<br>    [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">(<span class="hljs-params">state: T, data: T</span>) =&gt;</span> T<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="封装type常量文件"><a href="#封装type常量文件" class="headerlink" title="封装type常量文件"></a>封装type常量文件</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// src -&gt; redux -&gt; typeConstant.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">INCREASE</span> = <span class="hljs-string">&#x27;increase&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DECREASE</span> = <span class="hljs-string">&#x27;decrease&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="用于创建action的文件"><a href="#用于创建action的文件" class="headerlink" title="用于创建action的文件"></a>用于创建action的文件</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// redux -&gt; countActionCreator.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Dispatch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IAction</span>, <span class="hljs-title class_">ICreateAction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">INCREASE</span>, <span class="hljs-variable constant_">DECREASE</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../typeConstant&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">increase</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">INCREASE</span>, data &#125;),<br>    <span class="hljs-attr">decrease</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">DECREASE</span>, data &#125;)<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">ICreateAction</span>&lt;<span class="hljs-built_in">number</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="reducer执行文件"><a href="#reducer执行文件" class="headerlink" title="reducer执行文件"></a>reducer执行文件</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// redux -&gt; reducers -&gt; countReducer.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">INCREASE</span>, <span class="hljs-variable constant_">DECREASE</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../typeConstant&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Reducer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IAction</span>, <span class="hljs-title class_">IReducerHandle</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">handle</span>: <span class="hljs-title class_">IReducerHandle</span>&lt;<span class="hljs-built_in">number</span>&gt; = &#123;<br>    [<span class="hljs-variable constant_">INCREASE</span>]: <span class="hljs-function">(<span class="hljs-params">state, data</span>) =&gt;</span> state + data,<br>    [<span class="hljs-variable constant_">DECREASE</span>]: <span class="hljs-function">(<span class="hljs-params">state, data</span>) =&gt;</span> state - data<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-function">(<span class="hljs-params">state = <span class="hljs-number">0</span>, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, data &#125; = action<br>    <span class="hljs-keyword">if</span> (handle[<span class="hljs-keyword">type</span>]) <span class="hljs-keyword">return</span> handle[<span class="hljs-keyword">type</span>](state, data)<br>    <span class="hljs-keyword">return</span> state<br>&#125;) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Reducer</span>&lt;<span class="hljs-built_in">number</span>, <span class="hljs-title class_">IAction</span>&lt;<span class="hljs-built_in">number</span>&gt;&gt;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传统switch</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// switch (type) &#123;</span><br><span class="hljs-comment">// case INCREASE:</span><br><span class="hljs-comment">//     return state + data</span><br><span class="hljs-comment">// case DECREASE:</span><br><span class="hljs-comment">//     return state - data</span><br><span class="hljs-comment">// default:</span><br><span class="hljs-comment">//     return state</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><h3 id="异步action"><a href="#异步action" class="headerlink" title="异步action"></a>异步action</h3><p>同步action就只是封装返回一个有type和data属性的对象</p><p>异步action就是返回一个函数，但是需要引入中间件，因为action只能为一个简单的object对象，需要使用中间件配置store</p><h4 id="配置中间件"><a href="#配置中间件" class="headerlink" title="配置中间件"></a>配置中间件</h4><h5 id="下载中间件"><a href="#下载中间件" class="headerlink" title="下载中间件"></a>下载中间件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install redux-thunk<br><span class="hljs-comment"># or</span><br>yarn add redux-thunk<br></code></pre></td></tr></table></figure><h5 id="在store-ts中配置"><a href="#在store-ts中配置" class="headerlink" title="在store.ts中配置"></a>在store.ts中配置</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; configureStore, applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><span class="hljs-keyword">import</span> countReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/countReducer&#x27;</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>    <span class="hljs-attr">reducer</span>: countReducer,<br>    <span class="hljs-attr">enhancers</span>: [<span class="hljs-title function_">applyMiddleware</span>(thunk)]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><blockquote><p>这里用的是RTK（redux toolkit），不知道的<a href="#%E4%BD%BF%E7%94%A8RTK%EF%BC%88Redux-Toolkit%EF%BC%89">点击此处查看</a></p><p>但不知道为什么，我不配置发现也可以正常使用</p></blockquote><h4 id="创建异步action"><a href="#创建异步action" class="headerlink" title="创建异步action"></a>创建异步action</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Dispatch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IAction</span>, <span class="hljs-title class_">ICreateAction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">INCREASE</span>, <span class="hljs-variable constant_">DECREASE</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../typeConstant&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">creatorAction</span>: <span class="hljs-title class_">ICreateAction</span>&lt;<span class="hljs-built_in">number</span>&gt; = &#123;<br>    <span class="hljs-attr">increase</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">INCREASE</span>, data &#125;),<br>    <span class="hljs-attr">decrease</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">DECREASE</span>, data &#125;),<br>    <span class="hljs-attr">asyncIncrease</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-function">(<span class="hljs-params">dispatch: Dispatch&lt;IAction&lt;<span class="hljs-built_in">number</span>&gt;&gt;</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">dispatch</span>(creatorAction.<span class="hljs-title function_">increase</span>(data) <span class="hljs-keyword">as</span> <span class="hljs-title class_">IAction</span>&lt;<span class="hljs-built_in">number</span>&gt;)<br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> creatorAction<br></code></pre></td></tr></table></figure><blockquote><p>返回的回调函数中第一个参数为<code>dispatch</code></p><p>这样调用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">changeState</span>(countAction.<span class="hljs-property">asyncIncrease</span>)<br><br><span class="hljs-comment">// 根据选中值改变redux中状态</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">changeState</span> = (<span class="hljs-params">actionFn: <span class="hljs-built_in">Function</span></span>) =&gt; &#123;<br>    store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">actionFn</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>)))<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="使用React-Redux"><a href="#使用React-Redux" class="headerlink" title="使用React-Redux"></a>使用React-Redux</h2><p>react看在项目都使用redux状态管理，所以自己出了一个库，就叫<a href="https://react-redux.js.org/">react-redux</a>，配合原生<code>redux</code>使用</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>所有的UI组件都应该包裹一个容器组件，他们是父子关系</li><li>容器组件是真正和redux打交道的，里面可以随意的使用redux的api</li><li>UI组件中不能使用任何redux的api</li><li>容器组件可以传给UI组件的东西<ol><li>redux中所保存的状态</li><li>用于操作状态的方法</li></ol></li><li>备注：容器给UI传递：状态，操作状态的方法，均通过props传递</li></ol><h3 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install react-redux<br><span class="hljs-comment"># or</span><br>yarn add react-redux<br></code></pre></td></tr></table></figure><h3 id="创建容器组件"><a href="#创建容器组件" class="headerlink" title="创建容器组件"></a>创建容器组件</h3><p>创建 <code>src/containers/Count/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../components/Count&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>()(<span class="hljs-title class_">Count</span>)<br></code></pre></td></tr></table></figure><blockquote><p>就相当于使用react-redux对UI组件进行了封装，在外面套了层容器</p><p>注意点： </p><ol><li>UI组件中不可出现redux的API，如<code>store.getState()</code></li><li>容器要有store属性，绑定你的store对象，如下</li></ol></blockquote><p>将渲染的组件从UI组件改为容器组件并为容器组件传递store对象（没有会报错）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// App.tsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./containers/Count&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redux/store&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><blockquote><p>使用了connect连接之后就相当于UI组件变成了容器组件的子组件</p></blockquote><h3 id="使用容器组件向UI组件传递状态和函数"><a href="#使用容器组件向UI组件传递状态和函数" class="headerlink" title="使用容器组件向UI组件传递状态和函数"></a>使用容器组件向UI组件传递状态和函数</h3><p>在connect方法第一次调用时传递参数即可，在标签处只能使用store</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../components/Count&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">stateObject</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<br>    <span class="hljs-attr">myName</span>: <span class="hljs-string">&#x27;F_SAN&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fnObject</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<br>    <span class="hljs-attr">getName</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;名字为F_SAN&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(stateObject, fnObject)(<span class="hljs-title class_">Count</span>)<br></code></pre></td></tr></table></figure><blockquote><p>connect两个参数返回的都是一个简单对象，第一个传递状态，第二个传递函数</p></blockquote><h3 id="UI组件接收参数和函数对象"><a href="#UI组件接收参数和函数对象" class="headerlink" title="UI组件接收参数和函数对象"></a>UI组件接收参数和函数对象</h3><p>对于class组件来说，直接使用props就可以接收到，对于函数式组件来说，写在第一个参数接收</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProps</span> &#123;<br>    <span class="hljs-attr">myName</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-title function_">getName</span>(): <span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params">props: IProps</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; myName, getName &#125; = props<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName, <span class="hljs-title function_">getName</span>())<br>    <br>    ...<br></code></pre></td></tr></table></figure><h3 id="修改计数器案例"><a href="#修改计数器案例" class="headerlink" title="修改计数器案例"></a>修改计数器案例</h3><p>封装类型接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStateObject</span> &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFnObject</span> &#123;<br>    <span class="hljs-title function_">increase</span>(<span class="hljs-attr">insertValue</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">void</span><br><br>    <span class="hljs-title function_">decrease</span>(<span class="hljs-attr">insertValue</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">void</span><br><br>    <span class="hljs-title function_">asyncIncrease</span>(<span class="hljs-attr">insertValue</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IStateObject</span>, <span class="hljs-title class_">IFnObject</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在容器组件中添加获取当前计数器和插入删除api</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../components/Count&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> countActionCreator <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/action/countActionCreator&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IStateObject</span>, <span class="hljs-title class_">IFnObject</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Dispatch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 接收的参数即是自动调用的store.getState()</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">stateObject</span> = (<span class="hljs-params">state: <span class="hljs-built_in">any</span></span>) =&gt; (&#123;<br>    <span class="hljs-comment">// 当前redux中的计数值</span><br>    <span class="hljs-attr">count</span>: state<br>&#125;) <span class="hljs-keyword">as</span> <span class="hljs-title class_">IStateObject</span><br><br><span class="hljs-comment">// 接收的参数就是store中的dispatch函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fnObject</span> = (<span class="hljs-params">dispatch: Dispatch&lt;<span class="hljs-built_in">any</span>&gt;</span>) =&gt; (&#123;<br>    <span class="hljs-comment">// 通知redux执行增加操作</span><br>    <span class="hljs-attr">increase</span>: <span class="hljs-function"><span class="hljs-params">insertValue</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">dispatch</span>(countActionCreator.<span class="hljs-title function_">increase</span>(insertValue))<br>    &#125;,<br>    <span class="hljs-comment">// 通知redux执行删除操作</span><br>    <span class="hljs-attr">decrease</span>: <span class="hljs-function"><span class="hljs-params">insertValue</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">dispatch</span>(countActionCreator.<span class="hljs-title function_">decrease</span>(insertValue))<br>    &#125;,<br>    <span class="hljs-comment">// 异步增加</span><br>    <span class="hljs-attr">asyncIncrease</span>: <span class="hljs-function"><span class="hljs-params">insertValue</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">dispatch</span>(countActionCreator.<span class="hljs-title function_">asyncIncrease</span>(insertValue))<br>    &#125;<br>&#125;) <span class="hljs-keyword">as</span> <span class="hljs-title class_">IFnObject</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(stateObject, fnObject)(<span class="hljs-title class_">Count</span>)<br></code></pre></td></tr></table></figure><blockquote><p>所以这里是不需要引用store的，在connect中都封装好了，这里对于fnObject有一个最简的写法（默认分发），直接写成一个对象，而不是返回一个对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用dispatch分发的最简形式，自动使用dispatch调用函数返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> &#123; increase, decrease, asyncIncrease &#125; = countActionCreator<br><span class="hljs-keyword">const</span> fnObject = &#123;<br>    increase,<br>    decrease,<br>    asyncIncrease<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(stateObject, fnObject)(<span class="hljs-title class_">Count</span>)<br></code></pre></td></tr></table></figure></blockquote><p>修改后的UI组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IProps</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params">props: IProps</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; count, increase, decrease, asyncIncrease &#125; = props<br>    <span class="hljs-comment">// select标签ref对象</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">selectRef</span>: <span class="hljs-title class_">HTMLSelectElement</span><br>    <span class="hljs-comment">// 操作集合</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: &#123; [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span> &#125; = &#123;<br>        increase () &#123;<br>            <span class="hljs-title function_">increase</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;,<br>        decrease () &#123;<br>            <span class="hljs-title function_">decrease</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;,<br>        increaseByOdd () &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前为：&#x27;</span>, count)<br>            <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) <span class="hljs-title function_">increase</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;,<br>        asyncIncrease () &#123;<br>            <span class="hljs-title function_">asyncIncrease</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前求和为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(e:</span> <span class="hljs-attr">HTMLSelectElement</span>) =&gt;</span> &#123;</span><br><span class="language-xml">                selectRef = e</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>一<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>二<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.increase&#125;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.decrease&#125;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.increaseByOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.asyncIncrease&#125;</span>&gt;</span>异步加<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Count</span><br></code></pre></td></tr></table></figure><blockquote><p>之前使用redux 的时候，状态发生改变后，页面并不会重新渲染，手动监听当时的代码是这样的：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> rootDom = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">render</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    rootDom.<span class="hljs-title function_">render</span>(<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">// 初次渲染</span><br><span class="hljs-title function_">render</span>()<br><span class="hljs-comment">// 监听redux中的状态改变重新渲染</span><br>store.<span class="hljs-title function_">subscribe</span>(render)<br></code></pre></td></tr></table></figure><p>但是，用了react-redux之后，因为是react自己出的，当容器组件的状态发生改变，会自动的渲染一次到UI组件上，就可以省略监听的代码了</p></blockquote><h3 id="自动传递store属性（Provider）"><a href="#自动传递store属性（Provider）" class="headerlink" title="自动传递store属性（Provider）"></a>自动传递store属性（Provider）</h3><p>对于很多容器组件都需要传递store时，如下写法会太麻烦：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./containers/Count&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redux/store&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>所以就有了<code>Provider</code>，我们只需要在main.tsx中将App整个套起来，它就可以自动为每个容器组件加上store属性</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redux/store&#x27;</span><br><br><span class="hljs-keyword">const</span> rootDom = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>)<br><br>rootDom.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h3 id="容器组件和UI组件结构优化"><a href="#容器组件和UI组件结构优化" class="headerlink" title="容器组件和UI组件结构优化"></a>容器组件和UI组件结构优化</h3><p>写成多个文件，会使以后的文件成倍增长，所以可以直接将容器组件和UI组件成为一个文件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> countActionCreator <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/action/countActionCreator&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IProps</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UI 组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params">props: IProps</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; count, increase, decrease, asyncIncrease &#125; = props<br>    <span class="hljs-comment">// select标签ref对象</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">selectRef</span>: <span class="hljs-title class_">HTMLSelectElement</span><br>    <span class="hljs-comment">// 操作集合</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: &#123; [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span> &#125; = &#123;<br>        increase () &#123;<br>            <span class="hljs-title function_">increase</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;,<br>        decrease () &#123;<br>            <span class="hljs-title function_">decrease</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;,<br>        increaseByOdd () &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前为：&#x27;</span>, count)<br>            <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) <span class="hljs-title function_">increase</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;,<br>        asyncIncrease () &#123;<br>            <span class="hljs-title function_">asyncIncrease</span>(<span class="hljs-title class_">Number</span>(selectRef.<span class="hljs-property">value</span>))<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前求和为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(e:</span> <span class="hljs-attr">HTMLSelectElement</span>) =&gt;</span> &#123;</span><br><span class="language-xml">                selectRef = e</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>一<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>二<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.increase&#125;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.decrease&#125;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.increaseByOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handler.asyncIncrease&#125;</span>&gt;</span>异步加<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 容器组件</span><br><span class="hljs-comment"> * 使用dispatch分发的最简形式，自动使用dispatch调用函数返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> &#123; increase, decrease, asyncIncrease &#125; = countActionCreator<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<br>    <span class="hljs-function">(<span class="hljs-params">state: <span class="hljs-built_in">any</span></span>) =&gt;</span> (&#123;<br>        <span class="hljs-comment">// 当前redux中的计数值</span><br>        <span class="hljs-attr">count</span>: state<br>    &#125;), &#123;<br>        increase,<br>        decrease,<br>        asyncIncrease<br>    &#125;)(<span class="hljs-title class_">Count</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br></code></pre></td></tr></table></figure><h3 id="多组件共享状态（combineReducers）"><a href="#多组件共享状态（combineReducers）" class="headerlink" title="多组件共享状态（combineReducers）"></a>多组件共享状态（combineReducers）</h3><p>在多个组件下，state就不能是个单一的值，就应该是一个对象，多组件步骤如下</p><ol><li>store处使用<code>combineReducers</code>结合多个<code>reducers</code></li><li>修改容器组件内的connect传递正常的对象（可以直接在connect中获取到所有数据）</li></ol><p>创建Person组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addPerson &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/action/personAction&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRef, <span class="hljs-title class_">MutableRefObject</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; addPerson, person, allAttributes &#125; = props<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allAttributes)<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-title class_">MutableRefObject</span>&lt;<span class="hljs-built_in">any</span>&gt; = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">age</span>: <span class="hljs-title class_">MutableRefObject</span>&lt;<span class="hljs-built_in">any</span>&gt; = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addBtn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-title function_">addPerson</span>(&#123;<br>            <span class="hljs-attr">name</span>: name.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,<br>            <span class="hljs-attr">age</span>: age.<span class="hljs-property">current</span>.<span class="hljs-property">value</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                这是人</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;name&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;age&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;年龄&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addBtn&#125;</span>&gt;</span>添加对象<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                &#123;</span><br><span class="language-xml">                    person.map((v: any) =&gt; (</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span>&#123;v.name&#125; --- &#123;v.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                    ))</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">state: <span class="hljs-built_in">any</span></span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">person</span>: state.<span class="hljs-property">person</span>,<br>    <span class="hljs-attr">allAttributes</span>: state<br>&#125;), &#123;<br>    addPerson<br>&#125;)(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure><p>将store组合成一个对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; configureStore, applyMiddleware, combineReducers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><span class="hljs-keyword">import</span> count <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/count&#x27;</span><br><span class="hljs-keyword">import</span> person <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/person&#x27;</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span><br><br><span class="hljs-keyword">const</span> allRedux = <span class="hljs-title function_">combineReducers</span>(&#123;<br>    count,<br>    person<br>&#125;)<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>    <span class="hljs-attr">reducer</span>: allRedux,<br>    <span class="hljs-attr">enhancers</span>: [<span class="hljs-title function_">applyMiddleware</span>(thunk)]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>Person 的 reducer：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IAction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: &#123; [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">(<span class="hljs-params">data: <span class="hljs-built_in">any</span>, state: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">any</span> &#125; = &#123;<br>    <span class="hljs-attr">addPerson</span>: <span class="hljs-function">(<span class="hljs-params">state, data</span>) =&gt;</span> [&#123; <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(), ...data &#125;, ...state]<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span> = [], <span class="hljs-attr">action</span>: <span class="hljs-title class_">IAction</span>&lt;<span class="hljs-built_in">any</span>&gt;) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, data &#125; = action<br>    <span class="hljs-keyword">if</span> (handler[<span class="hljs-keyword">type</span>]) &#123;<br>        <span class="hljs-keyword">return</span> handler[<span class="hljs-keyword">type</span>](state, data)<br>    &#125;<br>    <span class="hljs-keyword">return</span> state<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在reducer中的state属性是单个组件的</p></blockquote><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>使用<code>@reduxjs/toolkit</code>创建store文件（下载<code>redux-thunk</code>实现中间件异步，多组件需要使用<code>combineReducers</code>组合，将最后的组合对象交给store）</li><li>创建reducer处理文件，接收state和action(<code>&#123;type: xxx, data: xxx&#125;</code>)，暴露一个函数，返回内容就是该组件使用的state，负责具体任务的执行（调用使用<code>dispatch(action)</code>）</li><li>创建构建action的封装文件（<code>actionCreator</code>），使用常量封装type类型，以防调用错误，至此redux构建结束，开始使用react-redux分割</li><li>将普通的组件看作UI组件，不能出现关于redux的api，然后使用connect对UI组件进行包装（connect为高阶函数，第一个方法第一个为参数为暴露的state，第二个为action内容对象或方法对象，第二个方法传入UI组件）</li><li>从外面传入store对象，可以使用<code>Provider</code>标签自动传递</li><li>在UI组件中使用props接收（函数式组件直接写第一个参数接收）</li></ol><h2 id="reducer返回对象注意点："><a href="#reducer返回对象注意点：" class="headerlink" title="reducer返回对象注意点："></a>reducer返回对象注意点：</h2><p>在reducer中，返回的对象地址不可相同，如向数组中添加一个元素后返回这个数组，不可直接使用push或者unshift添加，必须要返回一个深拷贝的数组</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IAction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: &#123; [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">(<span class="hljs-params">data: <span class="hljs-built_in">any</span>, state: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">any</span> &#125; = &#123;<br>    <span class="hljs-attr">addPerson</span>: <span class="hljs-function">(<span class="hljs-params">state, data</span>) =&gt;</span> &#123;<br>        state.<span class="hljs-title function_">unshift</span>(&#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>            <span class="hljs-attr">name</span>: data.<span class="hljs-property">name</span>,<br>            <span class="hljs-attr">age</span>: data.<span class="hljs-property">age</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> state<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span> = [], <span class="hljs-attr">action</span>: <span class="hljs-title class_">IAction</span>&lt;<span class="hljs-built_in">any</span>&gt;) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, data &#125; = action<br>    <span class="hljs-keyword">if</span> (handler[<span class="hljs-keyword">type</span>]) &#123;<br>        <span class="hljs-keyword">return</span> handler[<span class="hljs-keyword">type</span>](state, data)<br>    &#125;<br>    <span class="hljs-keyword">return</span> state<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正确"><a href="#正确" class="headerlink" title="正确"></a>正确</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IAction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../typeFile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: &#123; [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-function">(<span class="hljs-params">data: <span class="hljs-built_in">any</span>, state: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">any</span> &#125; = &#123;<br>    <span class="hljs-attr">addPerson</span>: <span class="hljs-function">(<span class="hljs-params">state, data</span>) =&gt;</span> [&#123; <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(), ...data &#125;, ...state]<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span> = [], <span class="hljs-attr">action</span>: <span class="hljs-title class_">IAction</span>&lt;<span class="hljs-built_in">any</span>&gt;) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, data &#125; = action<br>    <span class="hljs-keyword">if</span> (handler[<span class="hljs-keyword">type</span>]) &#123;<br>        <span class="hljs-keyword">return</span> handler[<span class="hljs-keyword">type</span>](state, data)<br>    &#125;<br>    <span class="hljs-keyword">return</span> state<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fetch请求</title>
    <link href="/2022/07/22/Fetch%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/22/Fetch%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Fetch介绍"><a href="#Fetch介绍" class="headerlink" title="Fetch介绍"></a>Fetch介绍</h2><p>Fetch是在es6出现的，基于promise设计的，但是Fetch并不是ajax的封装，而是原生的js，无需引入包即可使用，没有XMLHttpRequest对象</p><h2 id="相比xhr优点"><a href="#相比xhr优点" class="headerlink" title="相比xhr优点"></a>相比xhr优点</h2><ol><li>语法更加简单，类似axios</li><li>基于es6的Promise对象实现，支持 async &#x2F; await</li><li>对resp，req的操作更加方便</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/getTestData&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;返回消息：&#x27;</span>, res)<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;报错信息&#x27;</span>, err)<br>    &#125;)<br></code></pre></td></tr></table></figure><blockquote><p>这里需要第一次处理res中的json，第一次是联系服务器成功</p></blockquote><p>或者使用 async &#x2F; await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">sendFetch = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// fetch(&#x27;/api/getTestData&#x27;)</span><br>    <span class="hljs-comment">//     .then(res =&gt; res.json())</span><br>    <span class="hljs-comment">//     .then(res =&gt; &#123;</span><br>    <span class="hljs-comment">//         console.log(&#x27;返回消息：&#x27;, res)</span><br>    <span class="hljs-comment">//     &#125;).catch(err =&gt; &#123;</span><br>    <span class="hljs-comment">//         console.log(&#x27;报错信息&#x27;, err)</span><br>    <span class="hljs-comment">//     &#125;)</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/getTestData&#x27;</span>)<br>    <span class="hljs-keyword">const</span> jsonRes = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonRes)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> base = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/postTestData&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(base),<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>&#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;返回消息：&#x27;</span>, res)<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;报错信息&#x27;</span>, err)<br>    &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fetch</tag>
      
      <tag>http请求</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React脚手架</title>
    <link href="/2022/07/17/React%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2022/07/17/React%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建react项目"><a href="#搭建react项目" class="headerlink" title="搭建react项目"></a>搭建react项目</h2><h3 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h3><h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn create react-app 项目名<br><span class="hljs-comment"># or</span><br>npm init react-app 项目名<br><span class="hljs-comment"># or </span><br>npx create-react-app 项目名<br></code></pre></td></tr></table></figure><blockquote><p>使用webpack作为底层服务器，构建比较慢，需要一分钟左右，启动在<code>3000</code>端口</p></blockquote><h3 id="使用vite构建"><a href="#使用vite构建" class="headerlink" title="使用vite构建"></a>使用vite构建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn create vite 项目名<br></code></pre></td></tr></table></figure><p>选择react即可，启动在<code>5173</code>端口</p><h2 id="webpack构建的项目"><a href="#webpack构建的项目" class="headerlink" title="webpack构建的项目"></a>webpack构建的项目</h2><h3 id="public中的结构"><a href="#public中的结构" class="headerlink" title="public中的结构"></a>public中的结构</h3><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>index.html</td><td>主要的渲染文件</td></tr><tr><td>manifest.json</td><td>应用加壳需要的配置文件</td></tr><tr><td>robots.txt</td><td>爬虫协议文件</td></tr></tbody></table><h4 id="分析index-html"><a href="#分析index-html" class="headerlink" title="分析index.html"></a>分析index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    %PUBLIC_URL% 表示 public文件夹的路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    开启理想窗口，用于做移动端适应--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    配置浏览器的页签+地址栏的颜色（仅用于安卓手机浏览器）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    配置搜索关键字--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Web site created using create-react-app&quot;</span></span><br><span class="hljs-tag">     /&gt;</span><br>    <span class="hljs-comment">&lt;!--    用于指定网页添加到手机屏幕的显示的图标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    应用加壳时的配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;manifest&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--noscript 这个标签是在浏览器不支持js的时候显示的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="src中的结构"><a href="#src中的结构" class="headerlink" title="src中的结构"></a>src中的结构</h3><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>App.js</td><td>用函数式定义了一个叫做App的组件</td></tr><tr><td>App.test.js</td><td>做测试用的（基本用不到）</td></tr><tr><td>index.js</td><td>webpack程序入口文件</td></tr><tr><td>reportWebVitals.js</td><td>用于记录页面性能的配置文件</td></tr><tr><td>setupTests.js</td><td>做组件测试的</td></tr></tbody></table><h4 id="分析index-js"><a href="#分析index-js" class="headerlink" title="分析index.js"></a>分析index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> reportWebVitals <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reportWebVitals&#x27;</span>;<br><br><span class="hljs-comment">// React 18.x的语法，同Reach.render()</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="hljs-comment">// React.StrictMode包裹App这个组件，开启严格模式</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span>  /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br><br><span class="hljs-comment">// 记录页面性能</span><br><span class="hljs-title function_">reportWebVitals</span>();<br></code></pre></td></tr></table></figure><h3 id="简化结构"><a href="#简化结构" class="headerlink" title="简化结构"></a>简化结构</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>只剩下<code>index.html</code>即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><p>只剩下<code>App.js</code>和<code>index.js</code>即可</p><p><strong>App.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                Hello, React</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h2 id="样式混乱"><a href="#样式混乱" class="headerlink" title="样式混乱"></a>样式混乱</h2><p>定义多个组件时，使用的样式文件重复名字的话会产生样式混乱</p><p>解决：可以在取名时加上module</p><h2 id="子组件向父组件传参"><a href="#子组件向父组件传参" class="headerlink" title="子组件向父组件传参"></a>子组件向父组件传参</h2><p>子组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProps</span> &#123;<br>    <span class="hljs-attr">setName</span>: <span class="hljs-title class_">Function</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&lt;<span class="hljs-title class_">IProps</span>, <span class="hljs-literal">null</span>&gt; &#123;<br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.props.setName(</span>&#x27;<span class="hljs-attr">FSAN</span>&#x27;)&#125;&gt;</span>点击向父组件传参<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br></code></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Children</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Children&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    setName = <span class="hljs-function">(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这里是父组件：&#x27;</span>, name)<br>    &#125;<br><br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Children</span> <span class="hljs-attr">setName</span>=<span class="hljs-string">&#123;this.setName&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br></code></pre></td></tr></table></figure><h2 id="vite代理跨域"><a href="#vite代理跨域" class="headerlink" title="vite代理跨域"></a>vite代理跨域</h2><p>请求地址：<code>/api/XXX</code>，接口地址：<code>http://localhost:5000/api/XXX</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-react&#x27;</span><br><span class="hljs-keyword">import</span> eslintPlugin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-eslint&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">react</span>(),<br>        <span class="hljs-title function_">eslintPlugin</span>(&#123;<br>            <span class="hljs-attr">include</span>: [<span class="hljs-string">&#x27;src/**/*.tsx&#x27;</span>, <span class="hljs-string">&#x27;src/**/*.ts&#x27;</span>, <span class="hljs-string">&#x27;src/*.ts&#x27;</span>, <span class="hljs-string">&#x27;src/*.tsx&#x27;</span>]<br>        &#125;)<br>    ],<br>    <span class="hljs-attr">server</span>: &#123;<br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>看<code>server</code>即可，除了<code>target</code>还可以配置：</p><ol><li><code>changeOrigin: true</code>   是否改写 origin，设置为 true 之后，就会把请求 API header 中的 origin，改成跟 <code>target</code> 里边的域名一样了。</li><li><code>rewrite: (path) =&gt; path.replace(/^\/api/, &quot;&quot;)</code>   可以把请求的 URL 进行重写，这里因为假设后端的 API 路径不带 <code>/api</code> 段，所以我们使用 <code>rewrite</code>去掉 <code>/api</code>。</li></ol><p>注意一点：请求本地的时候，先是去获取到项目中的静态资源，没找到才会通过代理</p></blockquote><h2 id="消息订阅与发布（PubSub）"><a href="#消息订阅与发布（PubSub）" class="headerlink" title="消息订阅与发布（PubSub）"></a>消息订阅与发布（PubSub）</h2><p>用于任意组件的沟通</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i pubsub-js<br><span class="hljs-comment"># or</span><br>yarn add pubsub-js<br><span class="hljs-comment"># ts 额外需要</span><br>yarn add @types/pubsub-js<br></code></pre></td></tr></table></figure><h3 id="订阅消息"><a href="#订阅消息" class="headerlink" title="订阅消息"></a>订阅消息</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-attr">token</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment">// 页面挂载完毕后订阅数据</span><br>componentDidMount () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;demoData&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">_, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_, data)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; data &#125;)<br>    &#125;)<br>&#125;<br><br>componentWillUnmount () &#123;<br>    pubsub.<span class="hljs-title function_">unsubscribe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>_ 下划线占位元素用的，类似c#中的弃元</p></blockquote><h3 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">pubsub.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;demoData&#x27;</span>, <span class="hljs-string">&#x27;这是一条消息&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>但是发送后莫名其妙的会有两次接收</p></blockquote><h2 id="TodoList案例"><a href="#TodoList案例" class="headerlink" title="TodoList案例"></a>TodoList案例</h2><h3 id="ToDoList-tsx"><a href="#ToDoList-tsx" class="headerlink" title="ToDoList.tsx"></a>ToDoList.tsx</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// vite.config.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">KeyboardEvent</span>, <span class="hljs-title class_">MouseEvent</span>, createRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./ToDoList.scss&#x27;</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IListData</span> &#123;<br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span><br><br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">isChecked</span>: <span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IState</span> &#123;<br>    <span class="hljs-attr">listData</span>: <span class="hljs-title class_">IListData</span>[],<br>    <span class="hljs-attr">delBtnState</span>: <span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToDoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&lt;<span class="hljs-literal">null</span>, <span class="hljs-title class_">IState</span>&gt; &#123;<br>    state = &#123;<br>        <span class="hljs-attr">listData</span>: [],<br>        <span class="hljs-attr">delBtnState</span>: <span class="hljs-literal">false</span><br>    &#125;<br><br>    selectAllBox = createRef&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;()<br><br>    <span class="hljs-comment">// 回车添加</span><br>    add = (<span class="hljs-attr">e</span>: <span class="hljs-title class_">KeyboardEvent</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; key, target &#125;: &#123; <span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">target</span>: <span class="hljs-title class_">HTMLInputElement</span> &#125; = e<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;Enter&#x27;</span> &amp;&amp; target.<span class="hljs-property">value</span>) &#123;<br>            <span class="hljs-comment">// 去空格</span><br>            target.<span class="hljs-property">value</span> = target.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>()<br>            <span class="hljs-comment">// 判断重复</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">listData</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">v: IListData</span>) =&gt;</span> v.<span class="hljs-property">name</span> === target.<span class="hljs-property">value</span>) === -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 生成唯一id</span><br>                <span class="hljs-keyword">const</span> id = (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">0</span>) + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                    <span class="hljs-attr">listData</span>: [<br>                        ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">listData</span>,<br>                        &#123;<br>                            id,<br>                            <span class="hljs-attr">name</span>: target.<span class="hljs-property">value</span>,<br>                            <span class="hljs-attr">isChecked</span>: <span class="hljs-literal">false</span><br>                        &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">IListData</span><br>                    ]<br>                &#125;)<br>                <span class="hljs-comment">// 添加完清空</span><br>                target.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 全选事件</span><br>    selectAll = <span class="hljs-function">(<span class="hljs-params">e: MouseEvent</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> target = e.<span class="hljs-property">target</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLInputElement</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">listData</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">listData</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v: IListData</span>) =&gt;</span> &#123;<br>                v.<span class="hljs-property">isChecked</span> = target.<span class="hljs-property">checked</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;)<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 选中事件</span><br>    changeSelect = (<span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">any</span> =&gt;</span> (&#123; target &#125;: &#123; <span class="hljs-attr">target</span>: <span class="hljs-title class_">HTMLInputElement</span> &#125;): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; listData &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        listData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v: IListData</span>) =&gt;</span> v.<span class="hljs-property">id</span> === id ? &#123; ...v, <span class="hljs-attr">isChecked</span>: target.<span class="hljs-property">checked</span> &#125; : v)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; listData &#125;)<br>        <span class="hljs-keyword">const</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectAllBox</span>.<span class="hljs-property">current</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLInputElement</span><br>        <span class="hljs-comment">// 全选或取消全选</span><br>        current.<span class="hljs-property">checked</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">listData</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">v: IListData</span>) =&gt;</span> !v.<span class="hljs-property">isChecked</span>) === -<span class="hljs-number">1</span><br>    &#125;<br><br>    delList = (<span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">any</span> =&gt;</span> (): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">listData</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">listData</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v: IListData</span>) =&gt;</span> v.<span class="hljs-property">id</span> !== id)<br>        &#125;)<br>    &#125;<br><br>    delAll = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">listData</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">listData</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v: IListData</span>) =&gt;</span> !v.<span class="hljs-property">isChecked</span>)<br>        &#125;)<br>    &#125;<br><br>    handleMouse = <span class="hljs-function">(<span class="hljs-params">flag: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> (<span class="hljs-attr">e</span>: <span class="hljs-title class_">MouseEvent</span>&lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> target = e.<span class="hljs-property">target</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLInputElement</span><br>        <span class="hljs-keyword">const</span> btnDom = target.<span class="hljs-property">children</span>[<span class="hljs-number">2</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLButtonElement</span><br>        btnDom.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = flag ? <span class="hljs-string">&#x27;block&#x27;</span> : <span class="hljs-string">&#x27;none&#x27;</span><br>        target.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = flag ? <span class="hljs-string">&#x27;#ddd&#x27;</span> : <span class="hljs-string">&#x27;#fff&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">delBtnState</span>: flag<br>        &#125;)<br>    &#125;<br><br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todoList&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;add-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onKeyDown</span>=<span class="hljs-string">&#123;this.add&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-box&quot;</span>&gt;</span></span><br><span class="language-xml">                    &#123;this.state.listData.map((&#123; id, name, value, isChecked &#125;) =&gt; &#123;</span><br><span class="language-xml">                        return (</span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">&#123;this.handleMouse(true)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">&#123;this.handleMouse(false)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            &gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                    <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isChecked&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                    <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeSelect(id)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                    <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                    <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                    <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                 /&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&#123;id&#125;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">none</span>&#x27; &#125;&#125; <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;delBtn&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.delList(id)&#125;</span>&gt;</span>删除</span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                        )</span><br><span class="language-xml">                    &#125;)&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.selectAllBox&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.selectAll&#125;</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已完成&#123;this.state.listData.reduce((result: number, v: IListData) =&gt; v.isChecked ? result + 1 : result, 0)&#125; / 全部&#123;this.state.listData.length&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;delBtn&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.delAll&#125;</span>&gt;</span>删除全部已完成<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ToDoList</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br></code></pre></td></tr></table></figure><h3 id="ToDoList-scss"><a href="#ToDoList-scss" class="headerlink" title="ToDoList.scss"></a>ToDoList.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#todoList</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br><br>  <span class="hljs-selector-class">.add-input</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">outline</span>: none;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br><br>    &amp;<span class="hljs-selector-pseudo">:focus</span> &#123;<br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">#0097ff</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.list-box</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-flow</span>: column;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">border-bottom</span>: none;<br><br>    <span class="hljs-selector-class">.list-item</span> &#123;<br>      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">position</span>: relative;<br><br>      <span class="hljs-selector-tag">label</span> &#123;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;<br>        <span class="hljs-attribute">cursor</span>: pointer;<br>      &#125;<br>      <span class="hljs-selector-tag">input</span>&#123;<br>        <span class="hljs-attribute">cursor</span>: pointer;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.foo</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br><br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">30px</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-class">.delBtn</span>&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#cc0019</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">50%</span>);<br><br>    &amp;<span class="hljs-selector-pseudo">:active</span>&#123;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.95</span>) <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">51%</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="路由实现"><a href="#路由实现" class="headerlink" title="路由实现"></a>路由实现</h2><h3 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h3><h4 id="历史模式（history）"><a href="#历史模式（history）" class="headerlink" title="历史模式（history）"></a>历史模式（history）</h4><p>路由是怎么判断刷新和记录的？</p><p>利用windom中的history属性可以记录，回到上个页面等操作</p><p>存储的结构类似栈结构，后进先出</p><p>学习实现基础可以使用<code>history.js</code>（原生的api不好用）</p><h4 id="哈希模式（Hash）"><a href="#哈希模式（Hash）" class="headerlink" title="哈希模式（Hash）"></a>哈希模式（Hash）</h4><p>这个模式就没有用到dom中的history记录，主要就是类似锚点跳转，所以路由后都会有<code>#</code></p><p>优点：兼容性极佳</p><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add react-router-dom<br><span class="hljs-comment"># or</span><br>npm i react-router-dom<br></code></pre></td></tr></table></figure><h3 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">BrowserRouter</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;aside&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 路由跳转 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu-item&quot;</span>&gt;</span></span><br><span class="language-xml">            About</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu-item&quot;</span>&gt;</span></span><br><span class="language-xml">            Home</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 注册路由 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">BrowserRouter</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>Link</code>和<code>Route</code>标签都需要在一个<code>Router</code>中，引入的依赖如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;React-Router-Dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Home&#x27;</span><br></code></pre></td></tr></table></figure><p><code>About</code>和<code>Home</code>是路由组件，存放在 src &#x2F; pages 下</p><p>这里的<code>Route</code>标签中的<code>element</code>属性是<code>react-router-dom 6.0</code>以上新版本写法，并且需要<code>Routes</code>标签，旧版如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&#123;<span class="hljs-comment">/* 注册路由 */</span>&#125;<br>&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;/about&quot;</span> component=&#123;<span class="hljs-title class_">About</span>&#125; /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure></blockquote><p>又由于所有的页面都需要套一个<code>Router</code>控制，所以这个<code>BrowserRouter</code>标签就可以写在<code>main.tsx</code>中，直接给App组件套上</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span><br><span class="hljs-title function_">createRoot</span>(dom).<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h3 id="Link-和-NavLink"><a href="#Link-和-NavLink" class="headerlink" title="Link 和 NavLink"></a>Link 和 NavLink</h3><p>共同点：都是用来跳转的</p><p>区别：NavLink 在style和className上支持函数形式</p><h4 id="使用NavLink做访问后的样式"><a href="#使用NavLink做访问后的样式" class="headerlink" title="使用NavLink做访问后的样式"></a>使用NavLink做访问后的样式</h4><p>新版本：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;div className=<span class="hljs-string">&quot;aside&quot;</span>&gt;<br>    &#123;<span class="hljs-comment">/* 路由跳转 */</span>&#125;<br>    &lt;<span class="hljs-title class_">NavLink</span><br>        to=<span class="hljs-string">&quot;/about&quot;</span> <br>        className=&#123;<span class="hljs-function">(<span class="hljs-params">&#123; isActive &#125;</span>) =&gt;</span> (isActive ? <span class="hljs-string">&#x27;menu-item link-active&#x27;</span> : <span class="hljs-string">&#x27;menu-item&#x27;</span>)&#125;<br>    &gt;<br>        <span class="hljs-title class_">About</span><br>    &lt;/<span class="hljs-title class_">NavLink</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span> (isActive ? &#x27;menu-item link-active&#x27; : &#x27;menu-item&#x27;)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">        Home</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/div&gt;<br><br>&#123;<span class="hljs-comment">/* 或者使用style */</span>&#125;<br>&lt;div className=<span class="hljs-string">&quot;aside&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span> (isActive ? &#123; background: &#x27;#787878&#x27;, color: &#x27;#fff&#x27; &#125; : &#123;&#125;)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">        Home</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span> (isActive ? &#123; background: &#x27;#787878&#x27;, color: &#x27;#fff&#x27; &#125; : &#123;&#125;)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">        About</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p> 在NavLink标签中<code>style</code>和<code>className</code>都可以写成一个函数，回调参数是一个包含<code>isActive</code>的对象，解构出来就可以根据是否正在访问返回对应的样式&#96;</p><p>旧版本写法如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&#123;<span class="hljs-comment">/* 旧版本 */</span>&#125;<br>&lt;<span class="hljs-title class_">NavLink</span> to=<span class="hljs-string">&quot;/about&quot;</span> activeClassName=<span class="hljs-string">&quot;link-active&quot;</span> className=<span class="hljs-string">&quot;menu-item&quot;</span>&gt;<span class="hljs-title class_">About</span>&lt;/<span class="hljs-title class_">NavLink</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&quot;link-active&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu-item&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在旧版本中，默认的<code>activeClassName</code>为<code>active</code></p></blockquote><h4 id="二次封装NavLink"><a href="#二次封装NavLink" class="headerlink" title="二次封装NavLink"></a>二次封装NavLink</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProps</span> &#123;<br>    <span class="hljs-attr">to</span>: <span class="hljs-built_in">string</span>,<br>    children?: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&lt;<span class="hljs-title class_">IProps</span>, <span class="hljs-built_in">any</span>&gt; &#123;<br>    render () &#123;<br>        <span class="hljs-keyword">const</span> &#123; to, children &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>        <span class="hljs-comment">// 使用最后一端的首字母大写</span><br>        <span class="hljs-keyword">const</span> paths = to.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        <span class="hljs-keyword">const</span> title = paths[paths.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).<span class="hljs-title function_">toUpperCase</span>() + paths[paths.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toLowerCase</span>()<br>        <span class="hljs-comment">// 如果标签体没有内容，就使用默认title</span><br>        <span class="hljs-keyword">const</span> copyProps = &#123; ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, <span class="hljs-attr">children</span>: children || title &#125;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span> (isActive ? &#x27;menu-item link-active&#x27; : &#x27;menu-item&#x27;)&#125;</span><br><span class="language-xml">                    &#123;...copyProps&#125;</span><br><span class="language-xml">                &gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br><br></code></pre></td></tr></table></figure><blockquote><p>对于<code>NavLink</code>标签，显示的文字不一定要放在标签体，放在<code>children</code>也可以，所以从props中传的<code>children</code>可以直接解构使用</p></blockquote><p>使用：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;div className=<span class="hljs-string">&quot;aside&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyNavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>againAbout<span class="hljs-tag">&lt;/<span class="hljs-name">MyNavLink</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyNavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>对于标签体内容，子组件接收的方式是放在<code>props</code>的<code>children</code>属性中</p></blockquote><h3 id="Switch使用（旧版本）"><a href="#Switch使用（旧版本）" class="headerlink" title="Switch使用（旧版本）"></a>Switch使用（旧版本）</h3><p>在旧版本的时候，使用多个<code>route</code>标签注册路由的时候，在同<code>path</code>属性时，会将匹配的页面全部显示</p><p>解决办法：使用switch标签包裹即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Switch</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/about&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>path 和 component 是一对一的关系</p><p>使用Switch标签可以提高路由效率（单一匹配）</p><p>在新版本中已经弃用，直接正常使用路由即可</p></blockquote><h3 id="样式丢失bug（旧版本）"><a href="#样式丢失bug（旧版本）" class="headerlink" title="样式丢失bug（旧版本）"></a>样式丢失bug（旧版本）</h3><p>对于多级路由的情况下，刷新时如果使用的相对路径的css就会出现样式丢失的问题，因为多级路径下，相对路径的请求会也会带上上一级路由，然后找不到请求路径，自动跳转到<code>public</code>的<code>index.html</code>下</p><p>解决办法：换为绝对路径，如：<code>&#39;./css/bootstrap.css&#39;</code> 改为 <code>‘/css/bootstrap.css’</code>或<code>%PUBLIC_URL%/css/bootstrap.css%</code></p><h3 id="路由模糊与精准匹配"><a href="#路由模糊与精准匹配" class="headerlink" title="路由模糊与精准匹配"></a>路由模糊与精准匹配</h3><p>旧版本中路由默认匹配就是模糊匹配，如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">MyNavLink</span> to=<span class="hljs-string">&quot;/FSAN/home&quot;</span> /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/FSAN&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>这样是可以正常显示<code>Home</code>组件的</p><p>但是在新版本中默认就是校准匹配，如上的<code>path</code>是匹配不到的</p><p>旧版本使用<code>exact</code>属性开启精准匹配</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Route</span> exact path=<span class="hljs-string">&#x27;/home&#x27;</span> component=&#123;<span class="hljs-title class_">Home</span>&#125; /&gt;<br></code></pre></td></tr></table></figure><blockquote><p>默认为<code>exact=&#123;true&#125;</code>，可以省略</p></blockquote><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Routes</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span>  /&gt;</span>&#125; /&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span>  /&gt;</span>&#125; /&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>使用<code>Navigate</code>标签是新版本的写法， <code>Routes</code>标签下面只能使用<code>Route</code>标签，将<code>path=“*”</code>匹配全部，进行兜底跳转</p><p>旧版本写法如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Route</span> exact=&#123;<span class="hljs-literal">true</span>&#125; path=<span class="hljs-string">&#x27;/home&#x27;</span> component=&#123;<span class="hljs-title class_">Home</span>&#125; /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure></blockquote><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><p>先在<code>Routes</code>中使用<code>Route</code>标签注册路由，然后再包含子组件的页面中需要展示的地方使用<code>Outlet</code>标签</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Routes</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125; /&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;news&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">News</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Message</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;news&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>这里在<code>home</code>组件中注册了两个子路由，并且在点击<code>home</code>时重定向到  <code>/home/news</code></p></blockquote><p>Home页面：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.scss&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                我是Home的内容</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;home-header&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">                        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span> &#x27;tab-title &#x27; + (isActive ? &#x27;tab-active&#x27; : &#x27;&#x27;)&#125;</span><br><span class="language-xml">                        to=&quot;news&quot;</span><br><span class="language-xml">                    &gt;News<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">                        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span> &#x27;tab-title &#x27; + (isActive ? &#x27;tab-active&#x27; : &#x27;&#x27;)&#125;</span><br><span class="language-xml">                        to=&quot;message&quot;</span><br><span class="language-xml">                    &gt;Message<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;home-content&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><blockquote><ol><li>先使用<code>Route</code>嵌套标签注册路由</li><li>在父组件要显示子组件的位置使用<code>Outlet</code>标签</li></ol></blockquote><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="params参数（路径传递）"><a href="#params参数（路径传递）" class="headerlink" title="params参数（路径传递）"></a>params参数（路径传递）</h4><p>父组件（跳转的时候直接拼接到路径上就行了）：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span>, <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IDetail</span> &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IState</span> &#123;<br>    <span class="hljs-attr">detailData</span>: <span class="hljs-title class_">IDetail</span>[]<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&lt;<span class="hljs-built_in">any</span>, <span class="hljs-title class_">IState</span>&gt; &#123;<br>    state = &#123;<br>        <span class="hljs-attr">detailData</span>: [<br>            &#123;<br>                <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;msg001&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;msg002&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;msg003&#x27;</span><br>            &#125;<br>        ]<br><br>    &#125;<br><br>    render () &#123;<br>        <span class="hljs-keyword">const</span> &#123; detailData &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                这是Message组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                    &#123;</span><br><span class="language-xml">                        detailData.map(v =&gt; (</span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">v.id</span>&#125;/$&#123;<span class="hljs-attr">v.title</span>&#125;`&#125;&gt;</span>&#123;v.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                        ))</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">margin:</span> &#x27;<span class="hljs-attr">30px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><blockquote><p>这里<code>Link</code>中的<code>to</code>属性如： <code>1/msg001</code></p></blockquote><p>如果路由需要在路径上携带参数，那么注册时就需要这样写</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;message&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> /&gt;</span></span>&#125; &gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;:id/:title&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Detail</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Route</span>&gt;<br></code></pre></td></tr></table></figure><p>使用冒号后面跟着参数表示接收一个参数</p><p>在<code>Detail</code>页面就需要使用<code>hook</code>钩子获取到传递过来的参数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>ID: &#123;params.id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>TITLE: &#123;params.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><blockquote><p>在v6中，获取路由中传递的参数只能通过使用<code>hook</code>获取</p><p>旧版本获取是放在<code>props</code>下的<code>match</code>当中的，只能自己从<code>urlencoded</code>格式获取数据</p></blockquote><h4 id="search参数（问号拼接传递）"><a href="#search参数（问号拼接传递）" class="headerlink" title="search参数（问号拼接传递）"></a>search参数（问号拼接传递）</h4><p>同样将参数拼接到路径上即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;ul&gt;<br>    &#123;<br>        detailData.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">detail</span>?<span class="hljs-attr">id</span>=<span class="hljs-string">$&#123;v.id&#125;&amp;title</span>=<span class="hljs-string">$&#123;v.title&#125;</span>`&#125;&gt;</span>&#123;v.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        ))<br>    &#125;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p>注册路由的时候就不需要额外的操作，正常注册即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;message&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> /&gt;</span></span>&#125;&gt;<br>    &#123;<span class="hljs-comment">/* 使用params参数接收 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* &lt;Route path=&quot;:id/:title&quot; element=&#123;&lt;Detail /&gt;&#125; /&gt; */</span>&#125;<br>    &lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;detail&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Detail</span> /&gt;</span></span>&#125; /&gt;<br>&lt;/<span class="hljs-title class_">Route</span>&gt;<br></code></pre></td></tr></table></figure><p>接收参数使用<code>hook</code>中的<code>useSearchParams</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// const &#123; id, title &#125; = useParams()</span><br>    <span class="hljs-keyword">const</span> [searchParams] = <span class="hljs-title function_">useSearchParams</span>()<br>    <span class="hljs-keyword">const</span> detailContent = [<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;FSAN1&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;FSAN2&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;FSAN3&#x27;</span><br>        &#125;<br>    ]<br>    <span class="hljs-keyword">const</span> &#123; content &#125; = detailContent.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.<span class="hljs-property">id</span> === <span class="hljs-title class_">Number</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>))) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>ID: &#123;searchParams.get(&#x27;id&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>TITLE: &#123;searchParams.get(&#x27;title&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CONTENT: &#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><blockquote><p>需要结构出第一个函数，使用第一个函数的<code>get</code>方法获取对于数据</p><p>旧版本数据是放在<code>props</code>下的<code>location</code>中的，并且需要自己从 <code>urlencoded</code> 格式中获取</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">swapUrlEncoded</span> = (<span class="hljs-params">obj: <span class="hljs-built_in">object</span> | <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;v[<span class="hljs-number">0</span>]&#125;</span>=<span class="hljs-subst">$&#123;v[<span class="hljs-number">1</span>]&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">result</span>: &#123;[<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>&#125; = &#123;&#125;<br>    obj.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        result[v.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>]] = v.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>]<br>    &#125;)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-title function_">swapUrlEncoded</span>(<span class="hljs-string">&#x27;id=1&amp;title=主题&amp;content=传递内容&#x27;</span>)<br></code></pre></td></tr></table></figure></blockquote><h4 id="state参数（对象传递）"><a href="#state参数（对象传递）" class="headerlink" title="state参数（对象传递）"></a>state参数（对象传递）</h4><p>特点：传递的参数不会在路径中显示出来</p><p>注册路由的时候也不用额外操作，正常注册即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;message&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> /&gt;</span></span>&#125;&gt;<br>    &#123;<span class="hljs-comment">/* 使用params传递参数 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* &lt;Route path=&quot;:id/:title&quot; element=&#123;&lt;Detail /&gt;&#125; /&gt; */</span>&#125;<br>    &#123;<span class="hljs-comment">/* 使用search或state传递参数 */</span>&#125;<br>    &lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;detail&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Detail</span> /&gt;</span></span>&#125; /&gt;<br>&lt;/<span class="hljs-title class_">Route</span>&gt;<br></code></pre></td></tr></table></figure><p>传递参数时使用state属性传递一个对象</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Link</span> to=&#123;<span class="hljs-string">&#x27;detail&#x27;</span>&#125; state=&#123;&#123; <span class="hljs-attr">id</span>: v.<span class="hljs-property">id</span>, <span class="hljs-attr">title</span>: v.<span class="hljs-property">title</span> &#125;&#125;&gt;&#123;v.<span class="hljs-property">title</span>&#125;&lt;/<span class="hljs-title class_">Link</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>在旧版本中是这样写的：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Link</span> to=&#123;&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;detail&#x27;</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: v.<span class="hljs-property">id</span>, <span class="hljs-attr">title</span>: v.<span class="hljs-property">title</span> &#125; &#125;&#125;&gt;&#123;v.<span class="hljs-property">title</span>&#125;&lt;/<span class="hljs-title class_">Link</span>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>使用<code>useLocation</code>接收参数：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> stateParams = <span class="hljs-title function_">useLocation</span>()<br>    <span class="hljs-keyword">const</span> &#123; id, title &#125;: <span class="hljs-built_in">any</span> = stateParams.<span class="hljs-property">state</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stateParams)<br><br>    <span class="hljs-keyword">const</span> detailContent = [<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;FSAN1&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;FSAN2&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;FSAN3&#x27;</span><br>        &#125;<br>    ]<br>    <span class="hljs-keyword">const</span> &#123; content &#125; = detailContent.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.<span class="hljs-property">id</span> === <span class="hljs-title class_">Number</span>(id)) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>ID: &#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>TITLE: &#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CONTENT: &#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br></code></pre></td></tr></table></figure><blockquote><p>旧版本中参数在<code>props</code>下<code>location</code>中的<code>state</code>中</p></blockquote><p>页面刷新的时候，会发现数据还在，原理：我们用的是<code>BrowserRouter</code>路由模式，<code>state</code>属性放在浏览器的<code>history</code>中，<code>history</code>中的数据是一直被记录的，但是当清空了浏览器缓存的时候，数据就没了</p><h3 id="路由覆盖"><a href="#路由覆盖" class="headerlink" title="路由覆盖"></a>路由覆盖</h3><p>当我们点击一个路由后，会在栈结构中添加一个路由记录，使用浏览器回退的时候，回退顺序就是根据这个栈结构回退的，要是想让当前路由记录被新增的路由记录覆盖，也就是回退不到上一个页面，使用<code>replace</code>属性即可</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Link</span> replace to=&#123;<span class="hljs-string">&#x27;detail&#x27;</span>&#125; state=&#123;&#123; <span class="hljs-attr">id</span>: v.<span class="hljs-property">id</span>, <span class="hljs-attr">title</span>: v.<span class="hljs-property">title</span> &#125;&#125;&gt;&#123;v.<span class="hljs-property">title</span>&#125;&lt;/<span class="hljs-title class_">Link</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()<br><span class="hljs-comment">// ... </span><br><span class="hljs-comment">// params带参</span><br><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;1/FSAN1&#x27;</span>)<br><span class="hljs-comment">// search带参</span><br><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;?id=1&amp;title=FSAN1&#x27;</span>)<br><span class="hljs-comment">// state带参</span><br><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;&#x27;</span>, &#123; <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;FSAN1&#x27;</span> &#125; &#125;)<br></code></pre></td></tr></table></figure><blockquote><p>匿名跳转（路由覆盖自己去看<code>useNavigate</code>，有个配置对象），回退就直接写数字即可，如<code>navigate(-1)</code></p><p>在旧版本中，需要使用<code>props</code>中的<code>location</code>对象实现，对于非路由组件，一般组件想要使用路由跳转时，需要使用<code>withRouter</code>包裹组件，如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">withRouter</span>(<span class="hljs-title class_">Index</span>)<br></code></pre></td></tr></table></figure></blockquote><h2 id="使用UI组件库"><a href="#使用UI组件库" class="headerlink" title="使用UI组件库"></a>使用UI组件库</h2><h3 id="Material-ui"><a href="#Material-ui" class="headerlink" title="Material-ui"></a><a href="https://mui.com/zh/material-ui/getting-started/overview/">Material-ui</a></h3><p>material-ui是一个国外的react ui库，使用较为繁琐</p><h3 id="Ant-design"><a href="#Ant-design" class="headerlink" title="Ant-design"></a><a href="https://ant.design/index-cn">Ant-design</a></h3><p>ant-design 是由国内蚂蚁金服出的，下列记录基于这个UI库（简称<code>antd</code>）</p><h3 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">yarn add antd<br># or<br>npm i antd -D<br></code></pre></td></tr></table></figure><h3 id="导入并使用"><a href="#导入并使用" class="headerlink" title="导入并使用"></a>导入并使用</h3><p>在<code>main.tsx</code>中先引入<code>css</code>文件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// main.tsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;antd/dist/antd.css&#x27;</span><br><br><span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span><br><span class="hljs-title function_">createRoot</span>(dom).<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><p>页面中直接使用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>这是一个ant的组件<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h3 id="CRA项目css按需引入"><a href="#CRA项目css按需引入" class="headerlink" title="CRA项目css按需引入"></a>CRA项目css按需引入</h3><p>对于CRA（create-react-app）项目来说，可以直接使用官网提供的carco插件进行配置，但我是使用vite构建的，目前暂没找到配置步骤</p><h4 id="下载craco"><a href="#下载craco" class="headerlink" title="下载craco"></a>下载craco</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add @craco/craco<br><span class="hljs-comment"># or</span><br>npm i @craco/craco -D<br></code></pre></td></tr></table></figure><h4 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/* package.json */</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>-   <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts start&quot;</span><span class="hljs-punctuation">,</span><br>-   <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts build&quot;</span><span class="hljs-punctuation">,</span><br>-   <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts test&quot;</span><span class="hljs-punctuation">,</span><br>+   <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco start&quot;</span><span class="hljs-punctuation">,</span><br>+   <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco build&quot;</span><span class="hljs-punctuation">,</span><br>+   <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco test&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>在根目录下创建<code>craco.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* craco.config.js */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="下载babel-plugin-import"><a href="#下载babel-plugin-import" class="headerlink" title="下载babel-plugin-import"></a>下载babel-plugin-import</h4><p><code>babel-plugin-import</code>是一个用于按需加载组件代码和样式的 babel 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add babel-plugin-import<br></code></pre></td></tr></table></figure><h4 id="在craco-config-js中配置如下："><a href="#在craco-config-js中配置如下：" class="headerlink" title="在craco.config.js中配置如下："></a>在<code>craco.config.js</code>中配置如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">babel</span>: &#123;<br>        <span class="hljs-attr">plugins</span>: [[<span class="hljs-string">&#x27;import&#x27;</span>, &#123;<br>            <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#x27;antd&#x27;</span>,<br>            <span class="hljs-attr">libraryDirectory</span>: <span class="hljs-string">&#x27;es&#x27;</span>,<br>            <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;css&#x27;</span>,<br>        &#125;]],<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Vite项目css按需引入"><a href="#Vite项目css按需引入" class="headerlink" title="Vite项目css按需引入"></a>Vite项目css按需引入</h3><p>删除在<code>main.tsx</code>中的全局引入样式</p><h4 id="下载vite-plugin-imp"><a href="#下载vite-plugin-imp" class="headerlink" title="下载vite-plugin-imp"></a>下载vite-plugin-imp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add vite-plugin-imp<br></code></pre></td></tr></table></figure><h4 id="下载less"><a href="#下载less" class="headerlink" title="下载less"></a>下载less</h4><p>因为antd的默认样式文件是less文件，编译需要使用less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add less<br></code></pre></td></tr></table></figure><h4 id="修改vite-config-ts"><a href="#修改vite-config-ts" class="headerlink" title="修改vite.config.ts"></a>修改vite.config.ts</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-react&#x27;</span><br><span class="hljs-keyword">import</span> eslintPlugin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-eslint&#x27;</span><br><span class="hljs-keyword">import</span> vitePluginImp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-imp&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">react</span>(),<br>        <span class="hljs-title function_">eslintPlugin</span>(&#123;<br>            <span class="hljs-attr">include</span>: [<span class="hljs-string">&#x27;src/**/*.tsx&#x27;</span>, <span class="hljs-string">&#x27;src/**/*.ts&#x27;</span>, <span class="hljs-string">&#x27;src/*.ts&#x27;</span>, <span class="hljs-string">&#x27;src/*.tsx&#x27;</span>]<br>        &#125;),<br>        <span class="hljs-title function_">vitePluginImp</span>(&#123;<br>            <span class="hljs-attr">libList</span>: [<br>                &#123;<br>                    <span class="hljs-attr">libName</span>: <span class="hljs-string">&#x27;antd&#x27;</span>,<br>                    <span class="hljs-attr">style</span>: <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> <span class="hljs-string">`antd/es/<span class="hljs-subst">$&#123;name&#125;</span>/style`</span><br>                &#125;<br>            ]<br>        &#125;)<br>    ],<br>    <span class="hljs-attr">css</span>: &#123;<br>        <span class="hljs-attr">preprocessorOptions</span>: &#123;<br>            <span class="hljs-attr">less</span>: &#123;<br>                <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">modifyVars</span>: &#123;<br>                    <span class="hljs-string">&#x27;@primary-color&#x27;</span>: <span class="hljs-string">&#x27;#4377FE&#x27;</span><span class="hljs-comment">// 设置antd主题色</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">server</span>: &#123;<br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>添加上<code>css</code>，<code>vitePluginImp</code></p><h2 id="打包后使用serve服务器启动"><a href="#打包后使用serve服务器启动" class="headerlink" title="打包后使用serve服务器启动"></a>打包后使用serve服务器启动</h2><h3 id="下载-3"><a href="#下载-3" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i serve -g<br></code></pre></td></tr></table></figure><blockquote><p>尝试了使用yarn，结果不行，可能要自己配置环境变量</p></blockquote><h3 id="启动打包后的文件"><a href="#启动打包后的文件" class="headerlink" title="启动打包后的文件"></a>启动打包后的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dist<br>serve<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中深入了解this指向</title>
    <link href="/2022/07/12/js%E4%B8%ADthis%E6%8C%87%E5%90%91/"/>
    <url>/2022/07/12/js%E4%B8%ADthis%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="普通函数中的this"><a href="#普通函数中的this" class="headerlink" title="普通函数中的this"></a>普通函数中的this</h2><p>我们都知道在普通的函数（使用<code>function</code>关键字定义）中，<code>this</code>的指的是它所属的对象</p><p>但它拥有不同的值，分以下情况决定：</p><ol><li>在方法中，<code>this</code>指的是所有者对象</li><li>单独的情况下，<code>this</code>指的是全局对象</li><li>在函数中，<code>this</code>指的是全局对象</li><li>在函数中，严格模式（<code>&quot;use strict&quot;;</code>）下，<code>this</code>是<code>undefined</code></li><li>在事件中，<code>this</code>指的是接收事件的元素</li></ol><h2 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h2><p>在es6的箭头函数中的this指向是全局对象（window），也就是说无论在哪个对象中都可以指向全局，但是在es6的类中指向是类的实例对象（因为在类的原型链上）</p><h2 id="详细区别（type-”text-javascript”）"><a href="#详细区别（type-”text-javascript”）" class="headerlink" title="详细区别（type&#x3D;”text&#x2F;javascript”）"></a>详细区别（type&#x3D;”text&#x2F;javascript”）</h2><p>使用this作为当前标签的dom对象传递就不展示了</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;普通函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Window对象</span><br>&#125;<br><br><span class="hljs-title function_">demo1</span>()<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">demo2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;箭头函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Window对象</span><br>&#125;<br><span class="hljs-title function_">demo2</span>()<br></code></pre></td></tr></table></figure><h3 id="在对象中使用"><a href="#在对象中使用" class="headerlink" title="在对象中使用"></a>在对象中使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span>,<br>    <span class="hljs-attr">demo1</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在obj对象普通函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// obj对象</span><br>    &#125;,<br>    <span class="hljs-attr">demo2</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在obj对象箭头函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Window对象</span><br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">demo1</span>()<br>obj.<span class="hljs-title function_">demo2</span>()<br></code></pre></td></tr></table></figure><h3 id="在类中使用"><a href="#在类中使用" class="headerlink" title="在类中使用"></a>在类中使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> &#123;<br>    name = <span class="hljs-string">&#x27;FSAN&#x27;</span><br>    <span class="hljs-comment">// 简写形式</span><br>    <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;类的普通方法中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 类的实例对象</span><br>    &#125;<br>    demo2 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;类的普通方法中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 类的实例对象</span><br>    &#125;<br>    demo3 = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;类的箭头函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 类的实例对象</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">C1</span>()<br>c1.<span class="hljs-title function_">demo1</span>()<br>c2.<span class="hljs-title function_">demo2</span>()<br>c2.<span class="hljs-title function_">demo3</span>()<br></code></pre></td></tr></table></figure><blockquote><p>可以发现在类中使用哪种方法定义方法对this的指向都没有影响</p></blockquote><h3 id="手动严格模式"><a href="#手动严格模式" class="headerlink" title="手动严格模式"></a>手动严格模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br></code></pre></td></tr></table></figure><p>加上这段之后，会改变简单使用中使用function定义的方法中的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;严格模式下普通函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// undefined</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对其他方法没有影响</p><h2 id="详细区别（type-“text-babel”）"><a href="#详细区别（type-“text-babel”）" class="headerlink" title="详细区别（type&#x3D;“text&#x2F;babel”）"></a>详细区别（type&#x3D;“text&#x2F;babel”）</h2><p>将js代码通过babel转换，先导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="简单使用-1"><a href="#简单使用-1" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：普通函数下的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// undefined</span><br>&#125;<br><br><span class="hljs-title function_">demo1</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">demo2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：箭头函数下的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// undefined</span><br>&#125;<br><span class="hljs-title function_">demo2</span>()<br></code></pre></td></tr></table></figure><p>查看转换后源码，分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：普通函数下的this：&#x27;</span>, <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// undefined</span><br>&#125;<br><br><span class="hljs-title function_">demo1</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">demo2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：箭头函数下的this：&#x27;</span>, <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>); <span class="hljs-comment">// undefined</span><br>&#125;;<br><br><span class="hljs-title function_">demo2</span>();<br></code></pre></td></tr></table></figure><blockquote><p>转换后，会默认转换为严格模式（对简单定义的普通函数有影响，但是手写严格模式对this没有影响），但是！这里转换后将箭头函数中的this改成了void 0</p></blockquote><h3 id="在对象中使用-1"><a href="#在对象中使用-1" class="headerlink" title="在对象中使用"></a>在对象中使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span>,<br>    <span class="hljs-attr">demo1</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：obj对象普通函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// obj对象</span><br>    &#125;,<br>    <span class="hljs-attr">demo2</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：obj对象箭头函数中的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// undefined</span><br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">demo1</span>()<br>obj.<span class="hljs-title function_">demo2</span>()<br></code></pre></td></tr></table></figure><h3 id="在类中使用-1"><a href="#在类中使用-1" class="headerlink" title="在类中使用"></a>在类中使用</h3><h4 id="由实例对象调用"><a href="#由实例对象调用" class="headerlink" title="由实例对象调用"></a>由实例对象调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> &#123;<br>    name = <span class="hljs-string">&#x27;FSAN&#x27;</span><br><br>    <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：类中普通函数的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 类的实例对象</span><br>    &#125;<br><br>    demo2 = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：类中箭头函数的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 类的实例对象</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">C1</span>()<br>c1.<span class="hljs-title function_">demo1</span>()<br>c1.<span class="hljs-title function_">demo2</span>()<br></code></pre></td></tr></table></figure><h4 id="由其他引用地址调用"><a href="#由其他引用地址调用" class="headerlink" title="由其他引用地址调用"></a>由其他引用地址调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> &#123;<br>    name = <span class="hljs-string">&#x27;FSAN&#x27;</span><br><br>    <span class="hljs-title function_">demo1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：类中普通函数的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 类的实例对象</span><br>    &#125;<br><br>    <span class="hljs-title function_">demo2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;babel编译后：类中箭头函数的this：&#x27;</span>, <span class="hljs-variable language_">this</span>) <span class="hljs-comment">// undefined</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">C1</span>()<br><span class="hljs-keyword">const</span> demo2 = c1.<span class="hljs-property">demo</span><br><span class="hljs-title function_">demo2</span>()<br></code></pre></td></tr></table></figure><p>要想让<code>demo2</code>中的<code>this</code>正确指向类的实例对象，只需要让<code>demo2</code>使用箭头函数即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在类中构造器的<code>this</code>，一定指向类的实例对象</li><li>类中的方法由实例对象调用，其中的<code>this</code>才是实例对象</li><li>使用<code>babel</code>转换时，默认使用严格模式会将除了类之外的箭头函数中的this转换为<code>void 0</code>（这就是使用babel后，函数中拿到<code>this</code>为<code>undefined</code>的原因）</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>this指向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react16.x学习</title>
    <link href="/2022/07/08/react16.x%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/08/react16.x%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="初识React"><a href="#初识React" class="headerlink" title="初识React"></a>初识React</h2><p>相对于js渲染页面来说，react使用空间换取时间，渲染相似数据时，只改变改动的数据</p><p>js渲染过程：遍历数据添加dom ——》浏览器dom重新渲染</p><p>react渲染过程：遍历数据添加虚拟dom ——》虚拟dom于上次比对，只更新改动的地方 ——》浏览器dom重新渲染</p><blockquote><p>以下都是基于React16.x版本开发的单页内容</p></blockquote><h2 id="Hello-React"><a href="#Hello-React" class="headerlink" title="Hello, React"></a>Hello, React</h2><p>创建html，引入<code>react.development.js</code>（核心库）和<code>react-dom.development.js</code>（dom的操作库），和vue只需要引入一个不一样，react需要引入两个，引入顺序也必须为先引入核心库，再引入<code>babel.min.js</code>作为jsx与js的转换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    核心库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@16.8.6/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    操作库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16.14.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    编译jsx--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--准备一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建虚拟dom</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello,React<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">    <span class="hljs-comment">// render(虚拟dom，容器) 渲染虚拟dom</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用jsx语法的时候，script的type就必须使用<code>text/babel</code></p><blockquote><p>注意 ReactDOM 别写错，DOM是大写，官网的18版本中<code>render</code>函数已经淘汰了</p></blockquote><h2 id="React中使用jsx与js差别"><a href="#React中使用jsx与js差别" class="headerlink" title="React中使用jsx与js差别"></a>React中使用jsx与js差别</h2><p>现在需要创建一个这样的标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello React<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用JS"><a href="#使用JS" class="headerlink" title="使用JS"></a>使用JS</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建虚拟dom，createElement(标签名，标签属性，标签内容)</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;title&#x27;</span>&#125;, <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Hello React&#x27;</span>))<br><span class="hljs-comment">// 在容器中渲染</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>这是使用了React创建的虚拟dom，对应的原生js真实dom如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>h1.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;title&#x27;</span><br><span class="hljs-keyword">const</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>)<br>span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;Hello React&#x27;</span><br>h1.<span class="hljs-title function_">appendChild</span>(span)<br><span class="hljs-keyword">const</span> app = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)<br>app.<span class="hljs-title function_">appendChild</span>(h1)<br></code></pre></td></tr></table></figure></blockquote><h3 id="使用JSX（javascript-xml）"><a href="#使用JSX（javascript-xml）" class="headerlink" title="使用JSX（javascript xml）"></a>使用JSX（javascript xml）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 创建虚拟dom</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello React<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    )<br><span class="hljs-comment">// render(虚拟dom，容器) 渲染虚拟dom</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>使用jsx的语法编译后还是上面的样子，只不过自己写的舒服</p></blockquote><h2 id="react-jsx常识"><a href="#react-jsx常识" class="headerlink" title="react jsx常识"></a>react jsx常识</h2><p>虚拟dom实际上是一个一般对象：<code>Object</code></p><h3 id="标签中混入js表达式要使用"><a href="#标签中混入js表达式要使用" class="headerlink" title="标签中混入js表达式要使用{}"></a>标签中混入js表达式要使用{}</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> myId = <span class="hljs-string">&#x27;tITlE&#x27;</span><br><span class="hljs-keyword">const</span> content = <span class="hljs-string">&#x27;Hello React&#x27;</span><br><br><span class="hljs-comment">// 创建虚拟dom</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>)<br><span class="hljs-comment">// render(虚拟dom，容器) 渲染虚拟dom</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="样式的类名指定不要使用class，要使用className"><a href="#样式的类名指定不要使用class，要使用className" class="headerlink" title="样式的类名指定不要使用class，要使用className"></a>样式的类名指定不要使用class，要使用className</h3><p>在jsx的模板html中，<code>class</code>属性已经被替换为<code>className</code>了，因为<code>jsx</code>怕和<code>es6</code>中的<code>class</code>关键字发生冲突，使用如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    核心库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@16.8.6/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    操作库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16.14.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    编译jsx--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--准备一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> myId = <span class="hljs-string">&#x27;tITlE&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> content = <span class="hljs-string">&#x27;Hello React&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建虚拟dom</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (</span><br><span class="language-javascript">        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId.toLowerCase()&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;myId.toLowerCase()&#125;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">    )</span><br><span class="language-javascript">    <span class="hljs-comment">// render(虚拟dom，容器) 渲染虚拟dom</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用style设置样式的时候，需要使用键值对"><a href="#使用style设置样式的时候，需要使用键值对" class="headerlink" title="使用style设置样式的时候，需要使用键值对"></a>使用<code>style</code>设置样式的时候，需要使用键值对</h3><p>如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;h1 id=&#123;myId.<span class="hljs-title function_">toLowerCase</span>()&#125; className=&#123;myId.<span class="hljs-title function_">toLowerCase</span>()&#125; style=&#123;&#123;<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;50px&#x27;</span><br>&#125;&#125;&gt;<br></code></pre></td></tr></table></figure><p><code>style</code>后面第一个<code>&#123;&#125;</code>表示这是js表达式，第二个才是样式的键值对</p><h3 id="在模板字符串中只能有一个根标签"><a href="#在模板字符串中只能有一个根标签" class="headerlink" title="在模板字符串中只能有一个根标签"></a>在模板字符串中只能有一个根标签</h3><p>如需要在页面上再渲染一个input</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">const VDOM = (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId.toLowerCase()&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;myId.toLowerCase()&#125;</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">            <span class="hljs-name">fontSize:</span> <span class="hljs-string">&#x27;50px&#x27;</span></span><br><span class="hljs-template-variable">        &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">)</span><br></code></pre></td></tr></table></figure><h3 id="标签必须闭合"><a href="#标签必须闭合" class="headerlink" title="标签必须闭合"></a>标签必须闭合</h3><p>如<code>input</code>在html上写的时候：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用jsx的时候，就需要对input标签做下闭合</p><p>代码见上一个中的input标签</p><h3 id="标签首字母大小写区别"><a href="#标签首字母大小写区别" class="headerlink" title="标签首字母大小写区别"></a>标签首字母大小写区别</h3><ol><li>小写字母开头， 则转换为html中同名元素，若html中无同名标签，就报错</li><li>大写字母开头，react就会渲染组件，若组件没定义，就报错</li></ol><h3 id="遍历渲染"><a href="#遍历渲染" class="headerlink" title="遍历渲染"></a>遍历渲染</h3><p>在jsx中使用数组的时候，会自动的遍历，如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> demo = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>]<br><br><span class="hljs-comment">// 创建虚拟dom</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>前端js框架列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;demo&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><span class="hljs-comment">// render(虚拟dom，容器) 渲染虚拟dom</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><p>页面显示的就是123，但是对于复杂的结构，无法做到自动遍历，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> data = [<br>    &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Angular&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;React&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Vue&#x27;</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 创建虚拟dom</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>前端js框架列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span>&#123;data&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><span class="hljs-comment">// render(虚拟dom，容器) 渲染虚拟dom</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><p>这样会导致报错，所以遍历复杂的数据就要在html标签中插入js代码块了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>基础渲染<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            &#123;data.map(v =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;v.id&#125;</span>&gt;</span> &#123;v.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><blockquote><p>分析：</p><p><code>data.map(v =&gt; &lt;li&gt; &#123;v.name&#125; &lt;/li&gt;)</code>返回一个改变了的数组，然后由react自动遍历</p></blockquote><p>完整结构：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> renderData = data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> &#123;v.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>)<br><span class="hljs-comment">// 创建虚拟dom</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>基础渲染<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            &#123;renderData&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h2 id="React的组件开发"><a href="#React的组件开发" class="headerlink" title="React的组件开发"></a>React的组件开发</h2><p>组件开发分为两个部分：</p><ol><li>函数式组件（用于函数定义的组件，适用于【简单组件】的定义）</li><li>类式组件（适用于【复杂组件】的定义）</li></ol><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>见名知意，使用函数开发，将html模板封装在函数中使用，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">FInput</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;1</span> === <span class="hljs-string">1</span> ? &#x27;<span class="hljs-attr">input1</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">input2</span>&#x27;&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>/&gt;</span></span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FInput</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>注意点：</p><ol><li>函数必须要有返回值</li><li>因为react中组件的首字母需要大写，所以函数名也需要大写</li><li>记得对组件标签做自闭合</li></ol></blockquote><p><code>ReactDOM.render(&lt;FInput/&gt;</code>实现步骤：</p><ol><li>React解析组件标签，找到了自定义的组件（没找到就报错）</li><li>发现组件是函数定义的，随后调用该函数，将接收返回的虚拟dom转为真实dom后渲染</li></ol><h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><p>使用es6中的类声明一个组件，步骤如下：</p><ol><li>创建一个类首字母大写（组件名就是类名），继承<code>React.Component</code></li><li>创建<code>render</code>方法，返回内容就是组件内容</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;1</span> === <span class="hljs-string">2</span> ? &#x27;<span class="hljs-attr">input1</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">input2</span>&#x27;&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>/&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FInput</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p><code>render</code>和<code>ReactDOM.render</code>两个<code>render</code>方法没有关系</p></blockquote><p>内部渲染过程如下：</p><ol><li>React解析组件标签，找到<code>FInput</code>组件</li><li>发现这个组件是使用类定义的，随后使用new创建该类的实例</li><li>使用实例对象调用了render方法，获取返回的虚拟dom</li></ol><h2 id="组件实例的三大属性"><a href="#组件实例的三大属性" class="headerlink" title="组件实例的三大属性"></a>组件实例的三大属性</h2><p>只有使用类定义的组件有实例属性</p><h3 id="核心属性1：state"><a href="#核心属性1：state" class="headerlink" title="核心属性1：state"></a>核心属性1：state</h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ol><li>state 是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）</li><li>组件被称为“状态机”，通过更新组件的state来更新对应的页面的显示（重新渲染组件）</li></ol><h4 id="强烈注意"><a href="#强烈注意" class="headerlink" title="强烈注意"></a>强烈注意</h4><ol><li>组件中<strong>render</strong>方法中的<strong>this</strong>为组件实例对象</li><li>组件自定义的方法中<strong>this</strong>为<strong>undefined</strong>，如何解决？<ol><li>强制绑定this：通过函数对象的bind()</li><li>箭头函数</li></ol></li><li>状态数据，不能直接修改或更新</li></ol><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>效果：渲染一个<code>h1</code>标签，点击标签改变其中的文字</p><p>内容：需要了解js中this的指向问题（见<code>js中this指向</code>文章）和jsx语法上的点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    核心库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@16.8.6/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    操作库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16.14.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    编译jsx--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">FInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>(props);</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeState&#125;</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        changeState = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 禁止直接更新</span></span><br><span class="language-javascript">            <span class="hljs-comment">// this.state.isHot = !this.state.isHot</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isHot</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FInput</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>主要注意的事：</p><ol><li><code>state</code>属性是直接定义在构造器中的</li><li><code>onClick</code>后面的函数是赋值在<code>onClick</code>回调中的，所以类中的<code>this</code>是<code>undefined</code>（上面使用了箭头函数，所以this可以正常使用）</li><li><code>state</code>中的状态不可以直接更新，需要使用<code>setState</code>方法更新</li></ol></blockquote><p>针对以上第二点，有三个解决方法（箭头函数，赋值this，使用bind）</p><h5 id="方法一（使用箭头函数）"><a href="#方法一（使用箭头函数）" class="headerlink" title="方法一（使用箭头函数）"></a>方法一（使用箭头函数）</h5><p>上面就是</p><h5 id="方法二（暂存this）"><a href="#方法二（暂存this）" class="headerlink" title="方法二（暂存this）"></a>方法二（暂存this）</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> that<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span><br>        &#125;<br>        that = <span class="hljs-variable language_">this</span><br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeState&#125;</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-title function_">changeState</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 禁止直接更新</span><br>        <span class="hljs-comment">// this.state.isHot = !this.state.isHot</span><br><br>        that.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">isHot</span>: !that.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span><br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FInput</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>原理就是利用构造器中this一定为类的实例对象</p></blockquote><h5 id="方法三（使用bind函数）"><a href="#方法三（使用bind函数）" class="headerlink" title="方法三（使用bind函数）"></a>方法三（使用bind函数）</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeState</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeState</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeState&#125;</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-title function_">changeState</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 禁止直接更新</span><br>        <span class="hljs-comment">// this.state.isHot = !this.state.isHot</span><br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">isHot</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span><br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FInput</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>bind()：在某个对象后使用bind函数可以修改此对象的this指向，并返回一个新的函数，onClick绑定的函数也变成了新的函数，因为名字相同，但是新的changeState是在类的实例对象上，老的是在类的原型链上，所以同名就先找新的</p><p>方法是特殊的属性</p></blockquote><h4 id="最简结构"><a href="#最简结构" class="headerlink" title="最简结构"></a>最简结构</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeState&#125;</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    &#125;<br><br>    changeState = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">isHot</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span><br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FInput</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="核心属性2：props"><a href="#核心属性2：props" class="headerlink" title="核心属性2：props"></a>核心属性2：props</h3><h4 id="属性单个传递"><a href="#属性单个传递" class="headerlink" title="属性单个传递"></a>属性单个传递</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    核心库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@16.8.6/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    操作库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16.14.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    编译jsx--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ul</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;name, age, cName&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>班级：&#123;cName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;FSAN1&#x27;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#x27;18&#x27;</span> <span class="hljs-attr">cName</span>=<span class="hljs-string">&#x27;rj&#x27;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo1&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;FSAN2&#x27;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#x27;19&#x27;</span> <span class="hljs-attr">cName</span>=<span class="hljs-string">&#x27;rj&#x27;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo2&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;FSAN3&#x27;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#x27;20&#x27;</span> <span class="hljs-attr">cName</span>=<span class="hljs-string">&#x27;rj&#x27;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo3&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="属性多个传递"><a href="#属性多个传递" class="headerlink" title="属性多个传递"></a>属性多个传递</h4><p>利用<code>babel</code>+<code>react</code>的特性，就可以在标签中使用扩展运算符来传递一个对象中所有属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    核心库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@16.8.6/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    操作库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16.14.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    编译jsx--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ul</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;name, age, cName&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>班级：&#123;cName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> data = [</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN1&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">cName</span>: <span class="hljs-string">&#x27;rj&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN2&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">cName</span>: <span class="hljs-string">&#x27;rj&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN3&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">cName</span>: <span class="hljs-string">&#x27;rj&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    ]</span><br><span class="language-javascript">    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(</span><br><span class="language-javascript">        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> &#123;<span class="hljs-attr">...v</span>&#125;/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`demo<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>`</span>))</span><br><span class="language-javascript">    )</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="props输入类型校验"><a href="#props输入类型校验" class="headerlink" title="props输入类型校验"></a>props输入类型校验</h4><h5 id="旧方式（react15-5已弃用）"><a href="#旧方式（react15-5已弃用）" class="headerlink" title="旧方式（react15.5已弃用）"></a>旧方式（react15.5已弃用）</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Ul</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="新方式"><a href="#新方式" class="headerlink" title="新方式"></a>新方式</h5><p>引入<code>prop-types</code>这个库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/prop-types/15.8.1/prop-types.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后对组件上的propType属性定义：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Ul</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    核心库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@16.8.6/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    操作库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16.14.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    编译jsx--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    引入props校验js库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/prop-types/15.8.1/prop-types.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ul</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;name, age, cName, speak&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">            <span class="hljs-title function_">speak</span>()</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>班级：&#123;cName ? cName : &#x27;软件技术&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 对prop传递的参数进行参数校验</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Ul</span>.<span class="hljs-property">propTypes</span>=&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">speak</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">speak</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是一个函数&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">FSAN</span>&#x27;&#125; <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;</span> <span class="hljs-attr">speak</span>=<span class="hljs-string">&#123;speak&#125;/</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`demo1`</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>PropTypes支持类似链式一样的写法：<code>isRequired</code>表示必填，函数要使用<code>func</code>表示</p></blockquote><h4 id="props默认值"><a href="#props默认值" class="headerlink" title="props默认值"></a>props默认值</h4><p>当props参数不传递的时候，页面不会出现错误，只会显示为空，这时候就可以设置默认值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 设置默认值</span><br><span class="hljs-title class_">Ul</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="简化props类型和默认值"><a href="#简化props类型和默认值" class="headerlink" title="简化props类型和默认值"></a>简化props类型和默认值</h4><p>以上的类型校验和设置默认值都是在设置<code>Ul</code>这个类静态属性，又因为这是一个组件，所以这类东西应该放在组件内部才合理</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ul</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><br>    <span class="hljs-keyword">static</span> propTypes = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<br>        <span class="hljs-attr">speak</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> defaultProps = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;name, age, cName, speak&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>        <span class="hljs-title function_">speak</span>()<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>班级：&#123;cName ? cName : &#x27;软件技术&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">speak</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是一个函数&#x27;</span>)<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">FSAN</span>&#x27;&#125; <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;</span> <span class="hljs-attr">speak</span>=<span class="hljs-string">&#123;speak&#125;/</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`demo1`</span>))<br></code></pre></td></tr></table></figure><h4 id="构造器的作用"><a href="#构造器的作用" class="headerlink" title="构造器的作用"></a>构造器的作用</h4><p>有无构造器只有一个地方有区别：在构造器内部是否可以使用<code>this.props</code></p><p>有构造器，接不接收<code>props</code>写不写<code>super</code>都一样</p><p>只有在构造器中接受<code>props</code>并使用<code>super</code>传递<code>props</code>才能在构造器内部使用<code>this.props</code></p><p>总结：</p><ol><li>大多时候不需要写构造器，除非你要在构造器中使用<code>props</code>，那也用不着<code>this</code></li></ol><h4 id="在函数式组件中使用props传参"><a href="#在函数式组件中使用props传参" class="headerlink" title="在函数式组件中使用props传参"></a>在函数式组件中使用props传参</h4><p>组件实例的有三大属性，只有class定义的组件才有组件实例，函数式组件只有一个props（最新的可以使用hooks）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Ul</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123;name, age, cName&#125; = props<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>班级：&#123;cName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-comment">// 对prop传递的参数进行参数校验</span><br><span class="hljs-title class_">Ul</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br><br><span class="hljs-comment">// 设置默认值</span><br><span class="hljs-title class_">Ul</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FSAN&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>    <span class="hljs-attr">cName</span>: <span class="hljs-string">&#x27;软件技术&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Ul</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">FSAN</span>&#x27;&#125; <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;/</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`demo1`</span>))<br></code></pre></td></tr></table></figure><h3 id="核心属性3：refs"><a href="#核心属性3：refs" class="headerlink" title="核心属性3：refs"></a>核心属性3：refs</h3><h4 id="字符串形式（最老写法）"><a href="#字符串形式（最老写法）" class="headerlink" title="字符串形式（最老写法）"></a>字符串形式（最老写法）</h4><p>存在效率上的问题（过时并在未来版本可能会淘汰）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><br>    logInput = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input1&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.logInput&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;margin:</span> &#x27;<span class="hljs-attr">20px</span>&#x27;&#125;&#125;&gt;</span>输出结果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;(&#123;target&#125;)</span> =&gt;</span> this.logInput(target)&#125; ref=&quot;input2&quot; type=&quot;text&quot;/&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cl</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="回调形式（更新时会有点小问题）"><a href="#回调形式（更新时会有点小问题）" class="headerlink" title="回调形式（更新时会有点小问题）"></a>回调形式（更新时会有点小问题）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>    &#125;<br><br>    logInput = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputRef</span>.<span class="hljs-property">value</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;num&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>渲染次数：&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                    this.inputRef = e;</span><br><span class="language-xml">                    console.log(&#x27;ref加载：&#x27;, e)</span><br><span class="language-xml">                &#125;&#125;/&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.logInput&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;margin:</span> &#x27;<span class="hljs-attr">20px</span>&#x27;&#125;&#125;&gt;</span>输出结果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123;num: num + 1&#125;)&#125;&gt;重新渲染<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cl</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>在页面中的元素发生变化时（render重新渲染），会发现ref加载打印了两次，第一次input的dom对象为null，第二次正常打印，这就是react先清空ref再设置新的，大多数情况无关紧要</p></blockquote><p>使用设置class样式的函数解决这个问题</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>    &#125;<br><br>    logInput = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputRef</span>.<span class="hljs-property">value</span>)<br>    &#125;<br><br>    saveInput = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputRef</span> = e;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ref加载：&#x27;</span>, e)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;num&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>渲染次数：&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.saveInput&#125;/</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.logInput&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;margin:</span> &#x27;<span class="hljs-attr">20px</span>&#x27;&#125;&#125;&gt;</span>输出结果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123;num: num + 1&#125;)&#125;&gt;重新渲染<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cl</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="API创建形式（推荐）"><a href="#API创建形式（推荐）" class="headerlink" title="API创建形式（推荐）"></a>API创建形式（推荐）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>    &#125;<br>    inputRef1 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br><br>    logInput = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputRef1</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br>    &#125;<br><br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;num&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>渲染次数：&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.inputRef1&#125;/</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.logInput&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;margin:</span> &#x27;<span class="hljs-attr">20px</span>&#x27;&#125;&#125;&gt;</span>输出结果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123;num: num + 1&#125;)&#125;&gt;重新渲染<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cl</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用React的createRef这个函数去创建一个响应对象，和vue3一样</p><h2 id="组件的两个赋值状态"><a href="#组件的两个赋值状态" class="headerlink" title="组件的两个赋值状态"></a>组件的两个赋值状态</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    toLogin = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 阻止表单提交跳转</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.username.value&#125;</span>，密码：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.password.value&#125;</span>`</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.toLogin&#125;</span>&gt;</span></span><br><span class="language-xml">                用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.username = e&#125; type=&quot;text&quot;/&gt;</span><br><span class="language-xml">                密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.password = e&#125; type=&quot;password&quot;/&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">C1</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>受控组件的展示就是，当我们点击登录按钮才会去获取input的值，发出登录请求（默认get）</p></blockquote><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br><br>    saveUsername = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">username</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>        &#125;)<br>    &#125;<br>    savePassword = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">password</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>        &#125;)<br>    &#125;<br><br>    toLogin = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 阻止表单提交跳转</span><br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名：<span class="hljs-subst">$&#123;username&#125;</span>，密码：<span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.toLogin&#125;</span>&gt;</span></span><br><span class="language-xml">                用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveUsername&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="language-xml">                密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.savePassword&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">C1</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>在非受控组件中，input就值就像vue中的双向绑定一样，先赋值在一个属性上，要拿的时候直接使用这个属性即可</p></blockquote><h2 id="高阶函数（函数柯里化）"><a href="#高阶函数（函数柯里化）" class="headerlink" title="高阶函数（函数柯里化）"></a>高阶函数（函数柯里化）</h2><p>在看到上一个非受控组件的时候，保存状态两个函数中冗余度太高，更别说如果是注册的逻辑了，所以可以把这两个函数整合到一起</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">formData</span>: &#123;<br>            <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br><br>    saveFormData = <span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;formData&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        formData[k] = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;formData&#125;)<br>    &#125;<br><br>    toLogin = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 阻止表单提交跳转</span><br>        <span class="hljs-keyword">const</span> &#123;formData&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名：<span class="hljs-subst">$&#123;formData.username&#125;</span>，密码：<span class="hljs-subst">$&#123;formData.password&#125;</span>`</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.toLogin&#125;</span>&gt;</span></span><br><span class="language-xml">                用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">username</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="language-xml">                密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">password</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">C1</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>柯里化（currying）指的是将一个多参数的函数拆分成一系列函数，每个拆分后的函数都只接受一个参数（unary）</p></blockquote><h3 id="简化说明"><a href="#简化说明" class="headerlink" title="简化说明"></a>简化说明</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">onChange=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveFormData</span>(<span class="hljs-string">&#x27;username&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><p>这样是将<code>saveFormData</code>这个函数的返回值作为回调函数，所以如果这个函数内这样写就是错误的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">saveFormData = <span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k)<br>&#125;<br></code></pre></td></tr></table></figure><p>这样只会打印一次k，之后点击就是无反应，因为这个函数返回时的是<code>undefined</code></p><p>所以如果要使用这种<code>onChange</code>绑定的话，返回的一定是一个函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">saveFormData = <span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候，传进去的<code>username</code>被k接受，然后返回一个函数，当作点击回调，回调时没有参数，e就是event</p><h3 id="函数柯里化例子"><a href="#函数柯里化例子" class="headerlink" title="函数柯里化例子"></a>函数柯里化例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 正常</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getNum</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>    a++<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getNum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// 柯里化</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getNumPlus</span> = a =&gt; &#123;<br>    a++<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> demo1 = <span class="hljs-title function_">getNumPlus</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(demo1)<br><br><span class="hljs-keyword">const</span> demo2 = <span class="hljs-title function_">getNumPlus</span>(<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">demo2</span>(<span class="hljs-number">4</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">demo2</span>(<span class="hljs-number">5</span>));<br><br><span class="hljs-comment">// 简化后</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">endGetNum</span> = a =&gt; <span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> a+++b<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">endGetNum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h2 id="函数生命周期"><a href="#函数生命周期" class="headerlink" title="函数生命周期"></a>函数生命周期</h2><h3 id="案例一-1"><a href="#案例一-1" class="headerlink" title="案例一"></a>案例一</h3><p>需要实现文字的透明度变化，和取消元素挂载，需要包括取消组件挂载后关闭定时器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">intervalTimer</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br><br>    removeComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 卸载组件</span><br>        <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">unmountComponentAtNode</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br>    &#125;<br><br>    <span class="hljs-comment">// 组件挂载完毕的生命周期函数</span><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 改变文字透明度</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> o = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">opacity</span><br>            <span class="hljs-keyword">if</span> (o &lt;= <span class="hljs-number">0</span>) o = <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                <span class="hljs-attr">opacity</span>: o - <span class="hljs-number">0.1</span><br>            &#125;)<br>        &#125;, <span class="hljs-number">200</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 组件将要取消挂载生命周期函数</span><br>    <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 清空变化的定时器</span><br>        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;opacity:</span> <span class="hljs-attr">this.state.opacity</span>&#125;&#125;&gt;</span>React学不会怎么办<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.removeComponent&#125;</span>&gt;</span>不学了<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>知识点：</p><ol><li><code>unmountComponentAtNode()</code>卸载组件</li><li><code>componentWillUnmount()</code>组件卸载及销毁之前调用</li><li><code>componentDidMount()</code>组件挂载完毕后调用</li></ol></blockquote><h3 id="完整生命周期（17-x之前）"><a href="#完整生命周期（17-x之前）" class="headerlink" title="完整生命周期（17.x之前）"></a>完整生命周期（17.x之前）</h3><h4 id="挂载时"><a href="#挂载时" class="headerlink" title="挂载时"></a>挂载时</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-comment">// 执行顺序：1</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;constructor（构造器）&#x27;</span>)<br>        <span class="hljs-variable language_">super</span>(props);<br>    &#125;<br><br>    <span class="hljs-comment">// 执行顺序：2</span><br>    <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentWillMount（组件将要挂载）&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 执行顺序：3</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render（组件渲染）&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前计数：&#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.setState(&#123;count: this.state.count + 1&#125;)&#125;&gt;增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class="hljs-comment">// 执行顺序：4</span><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidMount（组件挂载完毕）&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 执行顺序：5</span><br>    <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentWillUnmount（组件销毁或卸载之前）&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Count</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="更新数据时"><a href="#更新数据时" class="headerlink" title="更新数据时"></a>更新数据时</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类似阀门，返回布尔类型，决定是否渲染</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">nextProps</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nextState 修改后的state</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">nextContext</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">boolean</span>&#125; 返回 true 之后进入 componentWillUpdate</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState, nextContext</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;shouldComponentUpdate&#x27;</span>, nextProps, nextState, nextContext)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 组件将要更新的钩子</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nextProps 同上</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nextState 同上</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nextContext 同上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState, nextContext</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentWillUpdate&#x27;</span>, nextProps, nextState, nextContext)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 组件更新完毕的钩子</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> prevProps 改变之前的props</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> prevState 改变之前的state</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">snapshot</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState, snapshot</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidUpdate&#x27;</span>, prevProps, prevState, snapshot)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="强制更新"><a href="#强制更新" class="headerlink" title="强制更新"></a>强制更新</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forceUpdate</span>()&#125;&gt;强制渲染&lt;/button&gt;<br></code></pre></td></tr></table></figure><blockquote><p>强制更新是不走阀门的，直接到<code>componentWillUpdate</code></p></blockquote><h4 id="传递参数时"><a href="#传递参数时" class="headerlink" title="传递参数时"></a>传递参数时</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">num</span>: <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是父组件A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.setState(&#123;num: this.state.num + 1&#125;)&#125;&gt;增加子组件的数字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">B</span> <span class="hljs-attr">num</span>=<span class="hljs-string">&#123;this.state.num&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接受传值的时候调用，初始化渲染的时候不会调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nextProps 传递的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">nextContext</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextProps, nextContext</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentWillReceiveProps&#x27;</span>, nextProps)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是子组件B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>显示的数字为：&#123;this.props.num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">A</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>知识点：</p><ol><li><code>componentWillReceiveProps</code></li></ol></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>最常用的三个钩子：</p><ol><li><code>componentDidMount()</code>组件挂载完毕之后</li><li><code>render()</code></li><li><code>componentWillUnmount()</code>组件销毁或卸载之前</li></ol><h3 id="新的生命周期以及变化-17-x"><a href="#新的生命周期以及变化-17-x" class="headerlink" title="新的生命周期以及变化(17.x)"></a>新的生命周期以及变化(17.x)</h3><ol><li><p>除了<code>componentWillUnmount()</code>之外，其他所有有<code>will</code>的生命周期在新版本都需要在前面加上<code>UNSAFE</code>（unsafe这里并不是表示不安全，而是在未来使用异步渲染的时候可能会出现问题），具体变化的钩子如下</p><ol><li><code>componentWillMount()</code>组件挂载之前  &#x3D;&#x3D;》<code>UNSAFE_componentWillMount()</code></li><li><code>componentWillUpdate()</code>组件更新之前 &#x3D;&#x3D;》<code>UNSAFE_componentWillUpdate()</code></li><li><code>componentWillReceiveProps()</code>组件接受参数之前 &#x3D;&#x3D;》<code>UNSAFE_componentWillReceiveProps()</code></li></ol></li><li><p>新增两个生命周期</p><table><thead><tr><th>生命周期函数</th><th>说明</th></tr></thead><tbody><tr><td><code>getDerivedStateFromProps()</code></td><td>返回对象对state的更新（罕见使用：若state的值在任何时候都取决于props），派生状态会导致代码冗余，并使组件难以维护</td></tr><tr><td><code>getSnapshotBeforeUpdate()</code></td><td>更新时在render后，在视图更新之前执行，可以保存更新前的状态，返回的值传递给<code>componentDidUpdate()</code>（组件更新完毕），此用法并不常见</td></tr></tbody></table></li></ol><h3 id="案例二（控制滚动条）"><a href="#案例二（控制滚动条）" class="headerlink" title="案例二（控制滚动条）"></a>案例二（控制滚动条）</h3><p>类似直播的弹幕，可随时跟踪最新也可以停止查看</p><h4 id="新增在顶部"><a href="#新增在顶部" class="headerlink" title="新增在顶部"></a>新增在顶部</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.divBox</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.divBox</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.divBox</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#f4f4f4</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        state = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arrayList</span>: []</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        timer</span><br><span class="language-javascript">        divBoxRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">arrayList</span>: [<span class="hljs-string">`这是消息<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.state.arrayList.length + <span class="hljs-number">1</span>&#125;</span>`</span>, ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">arrayList</span>]</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 视图更新前判断是否为顶端</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;scrollTop&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (scrollTop === <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 是，不做操作，跟着最新消息移动</span></span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span></span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 不是，滚动条自动向下滚动，相对静止</span></span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">scrollHeight</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState, height</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// this.divBoxRef.current.scrollTop += 60   60渲染的高度</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (height) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> &#123;scrollTop, scrollHeight&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span></span><br><span class="language-javascript">                scrollTop += scrollHeight - height</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">scrollTop</span> = scrollTop</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;divBox&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.divBoxRef&#125;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        &#123;this.state.arrayList.map((v, i) =&gt; (<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span>&gt;</span>&#123;v&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>))&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span></span><br><span class="language-xml"><span class="language-javascript">                        clearInterval(this.timer);</span></span><br><span class="language-xml"><span class="language-javascript">                        this.divBoxRef.current.scrollHeight = 10</span></span><br><span class="language-xml"><span class="language-javascript">                    &#125;&#125;&gt;停止</span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)).<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="新增在底部"><a href="#新增在底部" class="headerlink" title="新增在底部"></a>新增在底部</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.divBox</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.divBox</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.divBox</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#f4f4f4</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        state = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arrayList</span>: [],</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        divBoxRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">arrayList</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">arrayList</span>, <span class="hljs-string">`这是消息<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.state.arrayList.length + <span class="hljs-number">1</span>&#125;</span>`</span>]</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 判断是否为底部</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;scrollTop, scrollHeight, clientHeight&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (scrollTop + clientHeight === scrollHeight) <span class="hljs-keyword">return</span> scrollHeight</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState, snapshot</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (snapshot) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 滚动条顶部高度 = 自身顶部高度 + (改变后容器高度 - 改变前容器高度)</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> &#123;scrollTop, scrollHeight&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">divBoxRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">scrollTop</span> += scrollHeight - snapshot</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;divBox&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.divBoxRef&#125;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    &#123;this.state.arrayList.map((v, i) =&gt; (<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span>&gt;</span>&#123;v&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>))&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)).<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="diffing算法"><a href="#diffing算法" class="headerlink" title="diffing算法"></a>diffing算法</h2><p>渲染时对比新旧标签的key和标签本身决定是否要替换</p><ol><li>虚拟dom中key的作用（当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】，随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：）<ol><li>旧虚拟DOM中找到了与新虚拟DOM相同的key：<ol><li>若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ol></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key<ol><li>根据数据创建新的真实DOM，随后渲染到页面</li></ol></li></ol></li><li>用index作为key可能会引发的问题：<ol><li>若对数据进行：逆序添加，逆序删除等破坏顺序操作会产生没有必要下的真实DOM更新 &#x3D;&#x3D;&gt; 页面效果没问题，但效率低</li><li>如果结构中还包含输入类的DOM会产生错误DOM更新  &#x3D;&#x3D;&gt; 界面有问题</li><li>如果不存在对数据破坏顺序操作，仅用于渲染列表用于展示，使用index作为key没有问题的</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring中@ConfigurationProperties代替@Value</title>
    <link href="/2022/06/25/spring%E4%B8%AD-ConfigurationProperties%E4%BB%A3%E6%9B%BF-Value/"/>
    <url>/2022/06/25/spring%E4%B8%AD-ConfigurationProperties%E4%BB%A3%E6%9B%BF-Value/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>注入<code>application.yml</code>配置文件中的常量</p><p><code>application.yml</code>如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aboutMe:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">FSAN</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-number">172</span><br><br><br><span class="hljs-attr">about-you:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">FSAN</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">22</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-number">174</span><br>  <span class="hljs-attr">map:</span><br>    <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">list:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">FSAN</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">BSAN</span><br>  <span class="hljs-attr">me:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">BSAN</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">173</span><br><br></code></pre></td></tr></table></figure><h3 id="使用-Value"><a href="#使用-Value" class="headerlink" title="使用@Value"></a>使用@Value</h3><h3 id="entity-Me-java"><a href="#entity-Me-java" class="headerlink" title="entity &gt; Me.java"></a>entity &gt; Me.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aboutMe.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;#&#123;$&#123;aboutMe.age&#125; - 1&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aboutMe.height&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String height;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>${} 匹配式</p><p>#{} 运算式</p></blockquote><h4 id="测试类中调用测试"><a href="#测试类中调用测试" class="headerlink" title="测试类中调用测试"></a>测试类中调用测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueConfigurationApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Me me;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(me);  <span class="hljs-comment">// Me(name=FSAN, age=20, height=172)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用注入属性之后，也只能通过注入才能显示注入好的值，使用 <code>new Me()</code> 去构造会显示为<code>null</code></p></blockquote><h3 id="使用-ConfigurationProperties"><a href="#使用-ConfigurationProperties" class="headerlink" title="使用@ConfigurationProperties"></a>使用@ConfigurationProperties</h3><h4 id="entity-You-java"><a href="#entity-You-java" class="headerlink" title="entity &gt; You.java"></a>entity &gt; You.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;about-you&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Integer height;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; map;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Me me;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>ConfigurationProperties</code>使用这个注解的时候，注入的名字不能使用下划线和大写</p></blockquote><h4 id="测试类中调用测试-1"><a href="#测试类中调用测试-1" class="headerlink" title="测试类中调用测试"></a>测试类中调用测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueConfigurationApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> You you;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(you); <span class="hljs-comment">// You(name=FSAN, age=22, height=174, map=&#123;k1=v1, k2=v2&#125;, list=[FSAN, BSAN], me=Me(name=BSAN, age=21, height=173))</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>@Value 只能注入一个属性，@ConfigurationProperties 能匹配多个</li><li>@Value 不支持JSR303数据校验，@ConfigurationProperties  配合@Validated 能对数据做校验</li><li>@Value 不能对复杂对象的直接封装（对象等）</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot使用JSR303校验</title>
    <link href="/2022/06/23/springboot%E4%BD%BF%E7%94%A8JSR303%E6%A0%A1%E9%AA%8C/"/>
    <url>/2022/06/23/springboot%E4%BD%BF%E7%94%A8JSR303%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="关于JSR303"><a href="#关于JSR303" class="headerlink" title="关于JSR303"></a>关于JSR303</h2><p>JSR-303 是JAVA EE 6 中的一项子规范，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>可以直接从spring项目创建时快捷引入</p></blockquote><h2 id="校验常用注解"><a href="#校验常用注解" class="headerlink" title="校验常用注解"></a>校验常用注解</h2><table><thead><tr><th>注解名</th><th>作用</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的属性必须为null</td></tr><tr><td>@NoNull</td><td>被注释的属性不为null</td></tr><tr><td>@Min</td><td>注释在数字类型上，被注释的属性最小值</td></tr><tr><td>@Max</td><td>同上，被注释的属性最大值</td></tr><tr><td>@Size</td><td>注释在字符类型上，被注释的属性的长度限制，如 <code>@Size(min=3, max=9)</code></td></tr><tr><td>@Pattern</td><td>被注释的属性满足其中的正则规则</td></tr></tbody></table><blockquote><p>以上大部分注释都由message属性，表示自定义异常信息</p></blockquote><h2 id="简单校验"><a href="#简单校验" class="headerlink" title="简单校验"></a>简单校验</h2><p>简单校验就是在一个实体类上对元素写上注释限制，如：</p><h3 id="实体类（User）"><a href="#实体类（User）" class="headerlink" title="实体类（User）"></a>实体类（User）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-meta">@Size(min = 3, max = 9,message = &quot;用户名由三位到九位字符组成&quot;)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;用户名不可为空！&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Size(min = 4, max = 12, message = &quot;密码由四位到十二位字符组成&quot;)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;密码不可为空！&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String avatar;<br>    <span class="hljs-keyword">private</span> Long classId;<br>    <span class="hljs-keyword">private</span> Long roleId;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> String delLogic;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller演示"><a href="#Controller演示" class="headerlink" title="Controller演示"></a>Controller演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/valid&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">valid</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> User user, BindingResult result)</span>&#123;<br>    <span class="hljs-comment">// 解析校验结果</span><br>    result.getAllErrors().forEach(e -&gt; &#123;<br>        <span class="hljs-comment">// 校验异常的消息</span><br>        System.out.println(e.getDefaultMessage());<br>        <span class="hljs-comment">// 校验异常的属性</span><br>        System.out.println(e.getObjectName());<br>    &#125;);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于简单的校验来说，需要给校验的属性或实体类使用<code>@Valid</code>注解开启校验，在方法后跟上<code>BindingResult</code>用于收集jsr303所抛出的校验异常</p><h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h2><p>分组校验的实际使用常见为：当你有两个接受对象都是同一个实体类，但是类似注册和登录，注册需要填入邮箱地址，登录不需要，这时候就需要对邮箱地址这个属性定义分组校验</p><p>分组校验的规则为：在类上的规则后跟上<code>groups</code>属性，写一个简单的接口表示一个组即可，如：</p><h3 id="实体类（User）-1"><a href="#实体类（User）-1" class="headerlink" title="实体类（User）"></a>实体类（User）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-meta">@Size(min = 3, max = 9,message = &quot;用户名由三位到九位字符组成&quot;,groups = &#123;LoginDto.class, RegisterDto.class&#125;)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;用户名不可为空！&quot;, groups = &#123;LoginDto.class, RegisterDto.class&#125;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Size(min = 4, max = 12,message = &quot;密码由四位到十二位字符组成&quot;,groups = &#123;LoginDto.class, RegisterDto.class&#125;)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;密码不可为空！&quot;, groups = &#123;LoginDto.class, RegisterDto.class&#125;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String avatar;<br>    <span class="hljs-keyword">private</span> Long classId;<br>    <span class="hljs-keyword">private</span> Long roleId;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> String delLogic;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LoginDto</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RegisterDto</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对于一个属性，校验的组可有多个</p></blockquote><h3 id="Controller演示-1"><a href="#Controller演示-1" class="headerlink" title="Controller演示"></a>Controller演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/valid&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">valid</span><span class="hljs-params">(<span class="hljs-meta">@Validated(User.LoginDto.class)</span> <span class="hljs-meta">@RequestBody</span> User user, BindingResult result)</span>&#123;<br>    result.getAllErrors().forEach(e -&gt; &#123;<br>        System.out.println(e.getDefaultMessage());<br>        System.out.println(e.getObjectName());<br>    &#125;);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>在普通的校验中，使用的是@Valid注解，但是在分组校验中，<code>@Valid</code>没有分组的功能，所以要使用<code>@Validated</code> ，传入的value值为实体类中定义的分组接口类</p><blockquote><p>JSR303本身的<code>@Valid</code>并不支持分组校验，但是Spring在其基础提供了一个注解<code>@Validated</code>支持分组校验。<code>@Validated</code>这个注解<code>value</code>属性指定需要校验的分组。</p></blockquote><h2 id="嵌套校验"><a href="#嵌套校验" class="headerlink" title="嵌套校验"></a>嵌套校验</h2><p>同名字，等于在一个Dto或实体类中包含其他实体类的校验情况，加上@Valid即可，就不演示了</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>jsr303</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java函数式编程</title>
    <link href="/2022/05/22/java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/05/22/java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>面向对象思想需要关注用什么对象完成什么事情。而函数式编程思想就类似于我们数学中的函数。它主要关注的是对数据进行了说明操作。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于“并发编程”</li></ol><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Lambd是JDK8中一个语法糖。可以看成是一种语法糖，他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。</p><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>匿名内部类中简化使用</p><p>简化前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.FSAN;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;新线程中run方法被执行了&quot;</span>);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化条件：是一个接口的匿名内部类，并且这个接口只有一个抽象方法要重写</p><p>简化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.FSAN;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        new Thread(new Runnable() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void run() &#123;</span><br><span class="hljs-comment">//                System.out.println(&quot;新线程中run方法被执行了&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;).start();</span><br><br>        <span class="hljs-comment">// 多行不省略</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;新线程中run方法被执行了&quot;</span>);<br>        &#125;).start();<br><br>        <span class="hljs-comment">// 单行省略</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; System.out.println(<span class="hljs-string">&quot;新线程中run方法被执行了&quot;</span>)).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>现在有一个方法，内部调用了<code>IntBinaryOperator</code>接口的<code>applyAsInt</code>方法，且<code>IntBinaryOperator</code>接口中只有<code>applyAsInt</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateNum</span><span class="hljs-params">(IntBinaryOperator operator)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">return</span> operator.applyAsInt(a, b);<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntBinaryOperator</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">applyAsInt</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-keyword">return</span> left + right;<br>    &#125;<br>&#125;);<br>System.out.println(i);<br></code></pre></td></tr></table></figure><p>使用lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum((<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> left + right;<br>        &#125;<br>);<br>System.out.println(i);<br></code></pre></td></tr></table></figure><p>继续优化最简形式：省略参数类型和return关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum((left, right) -&gt; left + right);<br>System.out.println(i);<br></code></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pringNum</span><span class="hljs-params">(IntPredicate predicate)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        <span class="hljs-keyword">if</span> (predicate.test(i)) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类调用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">pringNum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntPredicate</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">return</span> value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>使用lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pringNum(value -&gt; value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="例4：结合泛型"><a href="#例4：结合泛型" class="headerlink" title="例4：结合泛型"></a>例4：结合泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt; R <span class="hljs-title function_">typeConver</span><span class="hljs-params">(Function&lt;String, R&gt; function)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>    <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> function.apply(str);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用匿名内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> typeConver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>    &#125;<br>&#125;);<br>System.out.println(integer);<br></code></pre></td></tr></table></figure><p>使用lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> typeConver(Integer::valueOf);<br>System.out.println(integer1);<br></code></pre></td></tr></table></figure><p>调用<code>Integer</code>类的<code>valueOf</code>方法处理结果</p><h3 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreachArr</span><span class="hljs-params">(IntConsumer intConsumer)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        intConsumer.accept(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">foreachArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntConsumer</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        System.out.println(value + <span class="hljs-string">&quot;处理后！&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>lambda表达式调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">foreachArr(value -&gt; System.out.println(value + <span class="hljs-string">&quot;处理后！&quot;</span>));<br></code></pre></td></tr></table></figure><blockquote><p>如果是只输出value，可以直接使用：：简化为<code>foreachArr(System.out::println);</code></p></blockquote><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>方便对集合和数组进行操作，一个stream流创建之后一定要有终结操作</p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>建立Author类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.FSAN.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">// 简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br>    <span class="hljs-comment">// 作品</span><br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br>&#125;<br></code></pre></td></tr></table></figure><p>建立Book类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.FSAN.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">// 书名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 分类</span><br>    <span class="hljs-keyword">private</span> String category;<br>    <span class="hljs-comment">// 评分</span><br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-comment">// 简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.FSAN;<br><br><span class="hljs-keyword">import</span> com.FSAN.entity.Author;<br><span class="hljs-keyword">import</span> com.FSAN.entity.Book;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Author&gt; <span class="hljs-title function_">getAuthors</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 数据初始化</span><br>        <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;蒙多&quot;</span>, <span class="hljs-number">33</span>, <span class="hljs-string">&quot;一个从菜刀中明悟哲理的祖安人&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Author</span> <span class="hljs-variable">author2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;亚索&quot;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;狂风也追逐不上思考速度&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Author</span> <span class="hljs-variable">author3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;易&quot;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&quot;是这个世界在限制他的思维&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Author</span> <span class="hljs-variable">author4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;易&quot;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&quot;是这个世界在限制他的思维&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 书籍列表</span><br>        List&lt;Book&gt; books1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Book&gt; books2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Book&gt; books3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;刀的两侧是光明与黑暗&quot;</span>, <span class="hljs-string">&quot;哲学，爱情&quot;</span>, <span class="hljs-number">88</span>, <span class="hljs-string">&quot;用一把刀划分了爱恨&quot;</span>));<br>        books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;一个人不能死在同一把刀下&quot;</span>, <span class="hljs-string">&quot;个人成长，爱情&quot;</span>, <span class="hljs-number">99</span>, <span class="hljs-string">&quot;讲述如何从失败中明悟真理&quot;</span>));<br><br>        books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;那风吹不到的地方&quot;</span>, <span class="hljs-string">&quot;哲学&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-string">&quot;带你用思维去领路世界的尽头&quot;</span>));<br>        books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;那风吹不到的地方&quot;</span>, <span class="hljs-string">&quot;哲学&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-string">&quot;带你用思维去领路世界的尽头&quot;</span>));<br>        books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">4L</span>, <span class="hljs-string">&quot;吹或不吹&quot;</span>, <span class="hljs-string">&quot;爱情，个人传记&quot;</span>, <span class="hljs-number">56</span>, <span class="hljs-string">&quot;一个哲学家的恋爱观注定很难把他所在的时代理解&quot;</span>));<br><br>        books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">5L</span>, <span class="hljs-string">&quot;你的浏览器我的剑&quot;</span>, <span class="hljs-string">&quot;爱情&quot;</span>, <span class="hljs-number">56</span>, <span class="hljs-string">&quot;无法想象一个武者能对他的伴侣这么的宽容&quot;</span>));<br>        books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>, <span class="hljs-string">&quot;风与剑&quot;</span>, <span class="hljs-string">&quot;个人传记&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br>        books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>, <span class="hljs-string">&quot;风与剑&quot;</span>, <span class="hljs-string">&quot;个人传记&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br><br>        author.setBooks(books1);<br>        author2.setBooks(books2);<br>        author3.setBooks(books3);<br>        author4.setBooks(books3);<br><br>        List&lt;Author&gt; authList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(author, author2, author3, author4));<br>        <span class="hljs-keyword">return</span> authList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用Stream去重并输出年龄大于18的作者姓名"><a href="#使用Stream去重并输出年龄大于18的作者姓名" class="headerlink" title="使用Stream去重并输出年龄大于18的作者姓名"></a>使用Stream去重并输出年龄大于18的作者姓名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    List&lt;Author&gt; authors = getAuthors();<br>    authors<br>            <span class="hljs-comment">// 将集合转为stream流</span><br>            .stream()<br>            <span class="hljs-comment">// 去重</span><br>            .distinct()<br>            <span class="hljs-comment">// 使用filter根据条件过滤掉数据</span><br>            .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">18</span>)<br>            <span class="hljs-comment">// 使用foreach打印出名称</span><br>            .forEach(author -&gt; System.out.println(author.getName()));<br>&#125;<br></code></pre></td></tr></table></figure><p>不使用stream流的步骤：</p><ol><li>先创建set集合，将list集合中的元素添加到set集合中，去掉重复值</li><li>遍历set集合，答应set集合中年龄小于于18的作者名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建set集合</span><br>HashSet&lt;Author&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-comment">// 将list集合添加进set集合中去重</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> set.addAll(authors);<br><span class="hljs-keyword">if</span> (b) &#123;<br>    <span class="hljs-comment">// 循环遍历出年龄小于18的作者名称</span><br>    set.forEach(author -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (author.getAge() &lt; <span class="hljs-number">18</span>) &#123;<br>            System.out.println(author.getName());<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h4><h5 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h5><p>在单列集合（List，Set）的形式下，创建流直接使用<code>.stream()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">4</span>);<br>list.add(<span class="hljs-number">5</span>);<br>list.add(<span class="hljs-number">6</span>);<br>list.add(<span class="hljs-number">6</span>);<br>list.stream()<br>        .distinct()<br>        .forEach(System.out::println);<br><br>HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(list);<br>set.stream()<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h5 id="多列集合"><a href="#多列集合" class="headerlink" title="多列集合"></a>多列集合</h5><p>多列集合的形式下，创建流需要先将多列集合（<code>HashMap</code>）使用<code>entrySet</code>方法转为单列集合（Set集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-number">20</span>);<br>map.put(<span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-number">22</span>);<br>map.put(<span class="hljs-string">&quot;three&quot;</span>, <span class="hljs-number">24</span>);<br>Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();<br>entries.stream()<br>        .distinct()<br>        .filter((Map.Entry&lt;String, Integer&gt; stringIntegerEntry) -&gt; stringIntegerEntry.getValue() &gt; <span class="hljs-number">20</span>)<br>        .forEach((Map.Entry&lt;String, Integer&gt; stringIntegerEntry) -&gt; System.out.println(stringIntegerEntry.getKey()));<br></code></pre></td></tr></table></figure><p>这里的结果是输出map中value大于20的键名</p><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>数组使用<code>stream</code>流需要使用<code>Arrays</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>Arrays.stream(ages)<br>        .filter(value -&gt; value &gt; <span class="hljs-number">4</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="filter（过滤）"><a href="#filter（过滤）" class="headerlink" title="filter（过滤）"></a>filter（过滤）</h4><p>在创建流之后，可以使用filter对集合进行过滤，filter内置的是返回值为布尔类型的匿名函数，true表示通过，false表示过滤</p><p>过滤掉年龄小于18的作者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .filter(author -&gt; author.getAge() &gt; <span class="hljs-number">18</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>这里的author可以使用任何名称，匿名函数是这样写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                <span class="hljs-keyword">return</span> author.getAge() &gt; <span class="hljs-number">18</span>;<br>            &#125;<br>        &#125;)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="map（转换）"><a href="#map（转换）" class="headerlink" title="map（转换）"></a>map（转换）</h4><p>使用map可以对原数据进行替换，如将authors中只留下年龄，并且输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>authors.stream()<br>        .map(Author::getAge)<br>        .forEach(System.out::println);<br><span class="hljs-comment">// 同上</span><br>authors.stream()<br>        .map(author -&gt; author.getAge())<br>        .forEach(System.out::println);<br><span class="hljs-comment">// 同上</span><br>authors.stream()<br>    <span class="hljs-comment">// 下面泛型中，前一个对应authors的类型，后一个对应转换后的类型</span><br>        .map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Author, Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Author author)</span> &#123;<br>                <span class="hljs-keyword">return</span> author.getAge();<br>            &#125;<br>        &#125;)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>对数据进行多次操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">authors.stream()<br>        .map(Author::getAge)<br>        .map(age -&gt; age + <span class="hljs-number">10</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="distinct（去重）"><a href="#distinct（去重）" class="headerlink" title="distinct（去重）"></a>distinct（去重）</h4><p>使用<code>distinct</code>对自定义类型去重的时候，要重写存储在集合中类的<code>equals</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .distinct()<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="sorted（排序）"><a href="#sorted（排序）" class="headerlink" title="sorted（排序）"></a>sorted（排序）</h4><h5 id="空参实现："><a href="#空参实现：" class="headerlink" title="空参实现："></a>空参实现：</h5><p>使用空参的<code>sorted()</code>需要让自定义类实现<code>Comparable</code>接口，再重写<code>compareTo</code>方法</p><p><code>Authors</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.FSAN.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Author&gt; &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">// 简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br>    <span class="hljs-comment">// 作品</span><br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br><br>    <span class="hljs-comment">// 比较方法：使用传进来的对象属性减去本身对象的属性就是降序，反之升序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Author o)</span> &#123;<br>        <span class="hljs-keyword">return</span> o.getAge() - <span class="hljs-built_in">this</span>.getAge();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .sorted()<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h5 id="使用内部类实现"><a href="#使用内部类实现" class="headerlink" title="使用内部类实现"></a>使用内部类实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .sorted((Author o1, Author o2) -&gt; o2.getAge() - o1.getAge())<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="limit（取数据长度）"><a href="#limit（取数据长度）" class="headerlink" title="limit（取数据长度）"></a>limit（取数据长度）</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .<span class="hljs-keyword">distinct</span>()<br>        .<span class="hljs-keyword">limit</span>(<span class="hljs-number">2</span>)<br>        .<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>::println);<br></code></pre></td></tr></table></figure><blockquote><p>一般用来手动分页，先排序后取数据个数</p></blockquote><h4 id="skip（跳过前几个数据）"><a href="#skip（跳过前几个数据）" class="headerlink" title="skip（跳过前几个数据）"></a>skip（跳过前几个数据）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .distinct()<br>        .skip(<span class="hljs-number">2</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><blockquote><p>结合limit做手动分页</p></blockquote><h4 id="flatMap（将流中的对象拆为多个对象）"><a href="#flatMap（将流中的对象拆为多个对象）" class="headerlink" title="flatMap（将流中的对象拆为多个对象）"></a>flatMap（将流中的对象拆为多个对象）</h4><p>对比map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .map(Author::getBooks)<br>        .distinct()<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>使用map去获取作者下的书籍的时候，获取到的是每个作者下书的list对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Book(<span class="hljs-built_in">id</span>=1, name=刀的两侧是光明与黑暗, category=哲学，爱情, score=88, intro=用一把刀划分了爱恨), Book(<span class="hljs-built_in">id</span>=2, name=一个人不能死在同一把刀下, category=个人成长，爱情, score=99, intro=讲述如何从失败中明悟真理)]<br>[Book(<span class="hljs-built_in">id</span>=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领路世界的尽头), Book(<span class="hljs-built_in">id</span>=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领路世界的尽头), Book(<span class="hljs-built_in">id</span>=4, name=吹或不吹, category=爱情，个人传记, score=56, intro=一个哲学家的恋爱观注定很难把他所在的时代理解)]<br>[Book(<span class="hljs-built_in">id</span>=5, name=你的浏览器我的剑, category=爱情, score=56, intro=无法想象一个武者能对他的伴侣这么的宽容), Book(<span class="hljs-built_in">id</span>=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？), Book(<span class="hljs-built_in">id</span>=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？)]<br></code></pre></td></tr></table></figure><p>要的效果是获取到全部作者下的所有书籍就需要用到<code>flatMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .flatMap(author -&gt; author.getBooks().stream())<br>        .distinct()<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Book(<span class="hljs-built_in">id</span>=1, name=刀的两侧是光明与黑暗, category=哲学，爱情, score=88, intro=用一把刀划分了爱恨)<br>Book(<span class="hljs-built_in">id</span>=2, name=一个人不能死在同一把刀下, category=个人成长，爱情, score=99, intro=讲述如何从失败中明悟真理)<br>Book(<span class="hljs-built_in">id</span>=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领路世界的尽头)<br>Book(<span class="hljs-built_in">id</span>=4, name=吹或不吹, category=爱情，个人传记, score=56, intro=一个哲学家的恋爱观注定很难把他所在的时代理解)<br>Book(<span class="hljs-built_in">id</span>=5, name=你的浏览器我的剑, category=爱情, score=56, intro=无法想象一个武者能对他的伴侣这么的宽容)<br>Book(<span class="hljs-built_in">id</span>=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？)<br></code></pre></td></tr></table></figure><p>需要去重时，需要写再转换的后面</p><h3 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>用来遍历其中的数据，不演示，上面有</p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>拿取数据长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> authors.stream()<br>        .flatMap(author -&gt; author.getBooks().stream())<br>        .distinct()<br>        .count();<br>System.out.println(count);<br></code></pre></td></tr></table></figure><blockquote><p>获取所有作者下的书籍数量，去除重复</p></blockquote><h4 id="max-min"><a href="#max-min" class="headerlink" title="max &amp; min"></a>max &amp; min</h4><p>使用max方法查询数据中年龄最大的作者</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Author&gt; max = authors.stream()<br>        .distinct()<br>        .max<span class="hljs-function"><span class="hljs-params">((o1, o2) -&gt; o1.getAge() - o2.getAge())</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(max.get())</span>;</span><br></code></pre></td></tr></table></figure><p>使用min方法查询数据库中年龄最小的作者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Author&gt; min = authors.stream()<br>        .distinct()<br>        .min((o1, o2) -&gt; o1.getAge() - o2.getAge());<br><br>System.out.println(min.get());<br></code></pre></td></tr></table></figure><p>在获取max和min的数据的时候，返回的是一个Optional类型的数据，要想获取流中类型的数据需要使用get方法</p><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p>把当前流转换为一个集合</p><h5 id="例1-1"><a href="#例1-1" class="headerlink" title="例1"></a>例1</h5><p>获取一个存放所有作者名字的List集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>List&lt;String&gt; collect = authors.stream()<br>        .map(Author::getName)<br>        .distinct()<br>        .collect(Collectors.toList());<br>System.out.println(collect);<br></code></pre></td></tr></table></figure><p>主要就是用到了<code>Collectors</code>工具类中的<code>toList</code>方法</p><h5 id="例2-1"><a href="#例2-1" class="headerlink" title="例2"></a>例2</h5><p>获取存放所有书名的Set集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; collect = authors.stream()<br>        .flatMap(author -&gt; author.getBooks().stream())<br>        .map(Book::getName)<br>        .collect(Collectors.toSet());<br>System.out.println(collect);<br></code></pre></td></tr></table></figure><p>思路： </p><ol><li>使用<code>flatMap</code>将流转为作者下的书籍信息</li><li>使用<code>map</code>再次转换流，只拿取书籍中的书名</li><li>最后使用<code>collect</code>对所有书名进行转换为<code>set</code>集合</li></ol><h5 id="例3-1"><a href="#例3-1" class="headerlink" title="例3"></a>例3</h5><p>将list列表转以作者名字为key，书籍为value的map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Map&lt;String, List&lt;Book&gt;&gt; collect = authors.stream()<br>        .distinct()<br>        .collect(Collectors.toMap(Author::getName, Author::getBooks));<br>System.out.println(collect);<br></code></pre></td></tr></table></figure><p>使用<code>Collectors</code>的<code>toMap</code>方法时，需要传入两个函数，返回值就当作map集合的key和value</p><h4 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h4><h5 id="anyMatch（重要）"><a href="#anyMatch（重要）" class="headerlink" title="anyMatch（重要）"></a>anyMatch（重要）</h5><p>判断是否有满足年龄大于10的作者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> authors.stream()<br>        .distinct()<br>        .anyMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">10</span>);<br>System.out.println(b);<br></code></pre></td></tr></table></figure><p>类似js中查看数组中是否有某个元素的方法<code>includes</code></p><h5 id="allMatch（重要）"><a href="#allMatch（重要）" class="headerlink" title="allMatch（重要）"></a>allMatch（重要）</h5><p>判断是否所有的作者都是成年人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> authors.stream()<br>        .allMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">18</span>);<br>System.out.println(b);<br></code></pre></td></tr></table></figure><h5 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h5><p>判断流中的元素是否都不满足某条件</p><p>如：判断所有的作者年龄都不超过100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> authors.stream()<br>        .noneMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">100</span>);<br>System.out.println(b);<br></code></pre></td></tr></table></figure><h5 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h5><p>随机获取一个流中的元素</p><p>如：获取其中一个成年作者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Author&gt; any = authors.stream()<br>        .filter(author -&gt; author.getAge() &gt; <span class="hljs-number">18</span>)<br>        .findAny();<br>System.out.println(any.get());<br></code></pre></td></tr></table></figure><blockquote><p>注意：返回值为Optional类型的，最后要使用get方法获取到其中的内容</p></blockquote><h5 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h5><p>获取流中第一个元素</p><p>如：获取第一个成年作者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Author&gt; first = authors.stream()<br>        .filter(author -&gt; author.getAge() &gt; <span class="hljs-number">18</span>)<br>        .findFirst();<br>System.out.println(first.get());<br></code></pre></td></tr></table></figure><p>如：获取年龄最大的作者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Author&gt; first = authors.stream()<br>        .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())<br>        .findFirst();<br>System.out.println(first.get());<br></code></pre></td></tr></table></figure><h4 id="reduct归并（重要）"><a href="#reduct归并（重要）" class="headerlink" title="reduct归并（重要）"></a>reduct归并（重要）</h4><p>对流中的数据按照你指定的元素计算出一个结果。</p><p>我们可以传入一个初始值，它会按照我们的计算方式一次拿流中你的元素和初始化值的基础上进行计算，计算结果再和后面的元素计算。</p><p>第一个参数为初始值，第二个参数为自定义的运算</p><h5 id="例1-2"><a href="#例1-2" class="headerlink" title="例1"></a>例1</h5><p>求所有作者年龄的和</p><p>对比写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (Author author : authors) &#123;<br>    i += author.getAge();<br>&#125;<br>System.out.println(i);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> authors.stream()<br>        .map(Author::getAge)<br>        .reduce(<span class="hljs-number">0</span>, Integer::sum);<br>System.out.println(reduce);<br></code></pre></td></tr></table></figure><p>这里的<code>Integer::sum</code>同<code>(integer, integer2) -&gt; integer + integer2)</code></p><h5 id="例2-2"><a href="#例2-2" class="headerlink" title="例2"></a>例2</h5><p> 求出作者中最大的年龄（定义一个最小值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> authors.stream()<br>        .map(Author::getAge)<br>        .reduce(Integer.MIN_VALUE, (inter1, inter2) -&gt; inter1 &lt; inter2 ? inter2 : inter1);<br>System.out.println(reduce);<br></code></pre></td></tr></table></figure><p>在赋值初始值的时候，不建议使用0（流中元素有负数就会出现问题），直接使用<code>Interger</code>的<code>MIN_VALUE</code>（-2的31次方，是int类型能够表示的最小值）</p><p>同理可得：求出作者中最小的年龄（定义一个最大值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> authors.stream()<br>        .map(Author::getAge)<br>        .reduce(Integer.MAX_VALUE, (inter1, inter2) -&gt; inter1 &gt; inter2 ? inter2 : inter1);<br>System.out.println(reduce);<br></code></pre></td></tr></table></figure><h5 id="例3-2"><a href="#例3-2" class="headerlink" title="例3"></a>例3</h5><p>使用<code>reduct</code>一个参数的方法求作者的最大年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Integer&gt; reduce = authors.stream()<br>        .map(Author::getAge)<br>        .reduce((integer, integer2) -&gt; integer &gt; integer2 ? integer : integer2);<br>System.out.println(reduce.get());<br></code></pre></td></tr></table></figure><p>使用单个参数的方法时，内部的源码是直接取流中第一个元素作为初始值，其他写法同上</p><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li>如果没有终结操作，中间操作是不会进行求值的</li><li>流是一次性的，经过了终结操作之后就不能进行其他操作</li><li>在操作流中的数据的时候，流中的数据不会被影响</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>lambda</tag>
      
      <tag>stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot使用WebSocket</title>
    <link href="/2022/05/19/SpringBoot%E4%BD%BF%E7%94%A8WebSocket/"/>
    <url>/2022/05/19/SpringBoot%E4%BD%BF%E7%94%A8WebSocket/</url>
    
    <content type="html"><![CDATA[<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="最简结构"><a href="#最简结构" class="headerlink" title="最简结构"></a>最简结构</h2><h3 id="建立websocket服务类"><a href="#建立websocket服务类" class="headerlink" title="建立websocket服务类"></a>建立websocket服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.socket;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.entity.RespResult;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.AbstractWebSocketHandler;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractWebSocketHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>        log.info(session.getId() + <span class="hljs-string">&quot;建立ws连接&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> &#123;<br>        log.info(session.getId() + <span class="hljs-string">&quot;关闭ws连接&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> message.getPayload();<br>        log.info(<span class="hljs-string">&quot;收到消息：&quot;</span> + payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="websocket配置开启服务"><a href="#websocket配置开启服务" class="headerlink" title="websocket配置开启服务"></a>websocket配置开启服务</h3><p>创建 config &gt; SocketConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.config;<br><br><span class="hljs-keyword">import</span> com.fsan.socket.WsService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WsService wsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry<br>                <span class="hljs-comment">// 添加socket服务</span><br>                .addHandler(wsService, <span class="hljs-string">&quot;/ws/user&quot;</span>)<br>                <span class="hljs-comment">// 允许跨域</span><br>                .setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 “&#x2F;ws&#x2F;user” 就是连接路径，如 “ws:&#x2F;&#x2F;localhost:8081&#x2F;ws&#x2F;user”</p><h3 id="html页面"><a href="#html页面" class="headerlink" title="html页面"></a>html页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;createConn()&quot;</span>&gt;</span>建立连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputVal&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;发送消息&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMsg()&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> socket;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputVal&quot;</span>).<span class="hljs-property">value</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">createConn</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">`ws://localhost:8081/ws/user`</span>)</span><br><span class="language-javascript">        socket.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;state&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;已连接！&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="存储每个socket连接"><a href="#存储每个socket连接" class="headerlink" title="存储每个socket连接"></a>存储每个socket连接</h2><h3 id="建立websocket管理类"><a href="#建立websocket管理类" class="headerlink" title="建立websocket管理类"></a>建立websocket管理类</h3><p>socket &gt; WsSocketManage.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.socket;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.entity.WsRespResult;<br><span class="hljs-keyword">import</span> com.fsan.myEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsSocketManage</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; wsSession = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key     键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session 对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String key, WebSocketSession session)</span> &#123;<br>        wsSession.put(key, session);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 删除的session</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> wsSession.remove(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除并同步关闭socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAndClose</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> wsSession.remove(key);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(remove)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                remove.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>                <span class="hljs-comment">// todo 关闭连接异常</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> session对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> wsSession.get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取在线人数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> integer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getUserNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wsSession.size();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取请求session中参数map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session session 对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> HashMap</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> HashMap&lt;String, String&gt; <span class="hljs-title function_">getQueryToMap</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> session.getUri().getQuery();<br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : query.split(<span class="hljs-string">&quot;&amp;&quot;</span>)) &#123;<br>            String[] s1 = s.split(<span class="hljs-string">&quot;=&quot;</span>);<br>            map.put(s1[<span class="hljs-number">0</span>], s1[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>关于ConcurrentHashMap：</p><p>ConcurrentHashMap是HashMap的升级版，HashMap是线程不安全的，而ConcurrentHashMap是线程安全。</p><p>session中参数 在前端中就是类似get的params传递 ：ws:&#x2F;&#x2F;localhost:8081&#x2F;msg&#x2F;user?name&#x3D;FSAN</p></blockquote><h3 id="建立连接时以用户名存储"><a href="#建立连接时以用户名存储" class="headerlink" title="建立连接时以用户名存储"></a>建立连接时以用户名存储</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.socket;<br><br><span class="hljs-keyword">import</span> com.fsan.stateEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.AbstractWebSocketHandler;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractWebSocketHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 建立连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>        <span class="hljs-comment">// 解析用户</span><br>        HashMap&lt;String, String&gt; queryToMap = WsSocketManage.getQueryToMap(session);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 以用户名为key，存储连接</span><br>        WsSocketManage.add(name, session);<br>        log.info(name + <span class="hljs-string">&quot;建立ws连接&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;当前在线人数：&quot;</span> + WsSocketManage.getUserNum());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 断开连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> &#123;<br>        <span class="hljs-comment">// 获取断开连接的用户</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> WsSocketManage.getQueryToMap(session).get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 移除session</span><br>        WsSocketManage.removeAndClose(name);<br>        log.info(name + <span class="hljs-string">&quot;关闭ws连接&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;当前在线人数：&quot;</span> + WsSocketManage.getUserNum());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session session对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 消息内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> message.getPayload();<br>        log.info(<span class="hljs-string">&quot;收到消息：&quot;</span> + payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="html页面-1"><a href="#html页面-1" class="headerlink" title="html页面"></a>html页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;当前状态：&lt;span id=<span class="hljs-string">&quot;state&quot;</span>&gt;未连接&lt;/span&gt;&lt;/p&gt;<br>&lt;p&gt;当前在线人数：&lt;span id=<span class="hljs-string">&quot;userNum&quot;</span>&gt;&lt;/span&gt;&lt;/p&gt;<br>&lt;button onclick=<span class="hljs-string">&quot;createConn()&quot;</span>&gt;建立连接&lt;/button&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span> placeholder=<span class="hljs-string">&quot;登录名&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;inputVal&quot;</span> placeholder=<span class="hljs-string">&quot;发送消息&quot;</span>&gt;<br>&lt;button onclick=<span class="hljs-string">&quot;sendMsg()&quot;</span>&gt;发送&lt;/button&gt;<br>&lt;/body&gt;<br><br>&lt;script&gt;<br>    let socket;<br><br>    <span class="hljs-type">const</span> <span class="hljs-variable">valid</span> <span class="hljs-operator">=</span> (name) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (!name) &#123;<br>            alert(<span class="hljs-string">&quot;登录名不可为空！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-variable">sendMsg</span> <span class="hljs-operator">=</span> () =&gt; &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;name&quot;</span>).value<br>        <span class="hljs-title function_">if</span> <span class="hljs-params">(!valid(name)</span>) <span class="hljs-keyword">return</span><br>        socket.send(document.getElementById(<span class="hljs-string">&quot;inputVal&quot;</span>).value)<br>    &#125;<br>    <span class="hljs-type">const</span> <span class="hljs-variable">createConn</span> <span class="hljs-operator">=</span> () =&gt; &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;name&quot;</span>).value<br>        <span class="hljs-title function_">if</span> <span class="hljs-params">(!valid(name)</span>) <span class="hljs-type">return</span><br>        <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(`ws:<span class="hljs-comment">//localhost:8081/ws/user?name=$&#123;name&#125;`)</span><br>    &#125;<br>&lt;/script&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>这样对已连接的session对象进行存储之后，就可以进行进一步的通知操作了</p><h2 id="封装websocket的返回消息"><a href="#封装websocket的返回消息" class="headerlink" title="封装websocket的返回消息"></a>封装websocket的返回消息</h2><p>因为socket消息的发送并不是向axios一样，axios前端可以接收指定业务的返回情况，而socket接收返回时不知道是什么业务，所以包装类根据参数数量划分，枚举类根据业务种类划分（越细越好）</p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>创建 entity &gt; WsRespResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.stateEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> com.fsan.socket.WsSocketManage;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsRespResult</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> Object content;<br>    <span class="hljs-keyword">private</span> Integer userNum;<br>    <span class="hljs-keyword">private</span> String formName;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给自己</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TextMessage <span class="hljs-title function_">send</span><span class="hljs-params">(WsRespResultEnum respResultEnum)</span> &#123;<br>        <span class="hljs-type">WsRespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsRespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setContent(respResultEnum.getContent());<br>        respResult.setUserNum(WsSocketManage.getUserNum());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(JSON.toJSONString(respResult));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给对方</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TextMessage <span class="hljs-title function_">send</span><span class="hljs-params">(WsRespResultEnum respResultEnum, String formName)</span> &#123;<br>        <span class="hljs-type">WsRespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsRespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setContent(respResultEnum.getContent());<br>        respResult.setFormName(formName);<br>        respResult.setUserNum(WsSocketManage.getUserNum());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(JSON.toJSONString(respResult));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给对方（有内容）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TextMessage <span class="hljs-title function_">send</span><span class="hljs-params">(WsRespResultEnum respResultEnum, String formName, String content)</span> &#123;<br>        <span class="hljs-type">WsRespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsRespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setContent(content);<br>        respResult.setFormName(formName);<br>        respResult.setUserNum(WsSocketManage.getUserNum());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(JSON.toJSONString(respResult));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>发送给自己和发送给对方的区别就是要不要带上发送者的用户名</p><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>创建 stateEnum &gt; WsRespResultEnum.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.stateEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">WsRespResultEnum</span> &#123;<br>    CONN_SUCCESS(<span class="hljs-number">2000</span>, <span class="hljs-string">&quot;连接成功&quot;</span>),<br>    SENDMSG_SUCCESS(<span class="hljs-number">2001</span>, <span class="hljs-string">&quot;发送消息成功&quot;</span>),<br>    USERNUM_UPDATE(<span class="hljs-number">2002</span>, <span class="hljs-string">&quot;广播所有更新在线人数&quot;</span>),<br>    ACCEPT_FORMTOALL(<span class="hljs-number">2003</span>, <span class="hljs-string">&quot;接收到广播消息&quot;</span>),<br>    ACCEPT_FORMTOUSER(<span class="hljs-number">2004</span>, <span class="hljs-string">&quot;接收到个人消息&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> Object content;<br><br>    WsRespResultEnum(Integer code, Object content) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用广播实现实时在线人数"><a href="#使用广播实现实时在线人数" class="headerlink" title="使用广播实现实时在线人数"></a>使用广播实现实时在线人数</h2><h3 id="更改自己连接状态和实时在线人数"><a href="#更改自己连接状态和实时在线人数" class="headerlink" title="更改自己连接状态和实时在线人数"></a>更改自己连接状态和实时在线人数</h3><h4 id="管理类新增方法"><a href="#管理类新增方法" class="headerlink" title="管理类新增方法"></a>管理类新增方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.socket;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.entity.WsRespResult;<br><span class="hljs-keyword">import</span> com.fsan.stateEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsSocketManage</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; wsSession = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给自己</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session          自己</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsRespResultEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(WebSocketSession session, WsRespResultEnum wsRespResultEnum)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            session.sendMessage(WsRespResult.send(wsRespResultEnum));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给别人</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionTo        发送给</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionForm      来自</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsRespResultEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(WebSocketSession sessionTo, WebSocketSession sessionForm, WsRespResultEnum wsRespResultEnum)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取发送者的名称</span><br>            HashMap&lt;String, String&gt; queryToMap = getQueryToMap(sessionForm);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">formName</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            sessionTo.sendMessage(WsRespResult.send(wsRespResultEnum, formName));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通知在线人数（广播所有）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> webSocketSession 改动对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUserNum</span><span class="hljs-params">(WebSocketSession webSocketSession)</span> &#123;<br>        wsSession.forEach((s, session) -&gt; sendMsg(session, webSocketSession, WsRespResultEnum.USERNUM_UPDATE));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="服务类在建立连接之后更新状态"><a href="#服务类在建立连接之后更新状态" class="headerlink" title="服务类在建立连接之后更新状态"></a>服务类在建立连接之后更新状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 建立连接</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>    <span class="hljs-comment">// 解析用户</span><br>    HashMap&lt;String, String&gt; queryToMap = WsSocketManage.getQueryToMap(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-comment">// 以用户名为key，存储连接</span><br>    WsSocketManage.add(name, session);<br>    log.info(name + <span class="hljs-string">&quot;建立ws连接&quot;</span>);<br>    log.info(<span class="hljs-string">&quot;当前在线人数：&quot;</span> + WsSocketManage.getUserNum());<br>    <span class="hljs-comment">// 返回连接成功</span><br>    WsSocketManage.sendMsg(session, WsRespResultEnum.CONN_SUCCESS);<br>    <span class="hljs-comment">// 更新所有已连接用户在线人数</span><br>    WsSocketManage.updateUserNum(session);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="服务类在断开连接后更新人数"><a href="#服务类在断开连接后更新人数" class="headerlink" title="服务类在断开连接后更新人数"></a>服务类在断开连接后更新人数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 断开连接</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> &#123;<br>    <span class="hljs-comment">// 获取断开连接的用户</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> WsSocketManage.getQueryToMap(session).get(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-comment">// 移除session</span><br>    WsSocketManage.removeAndClose(name);<br>    <span class="hljs-comment">// 更新所有已连接用户在线人数</span><br>    WsSocketManage.updateUserNum(session);<br>    log.info(name + <span class="hljs-string">&quot;关闭ws连接&quot;</span>);<br>    log.info(<span class="hljs-string">&quot;当前在线人数：&quot;</span> + WsSocketManage.getUserNum());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="html页面-2"><a href="#html页面-2" class="headerlink" title="html页面"></a>html页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前状态：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>未连接<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前在线人数：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userNum&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;createConn()&quot;</span>&gt;</span>建立连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;登录名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputVal&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;发送消息&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMsg()&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> socket;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">valid</span> = (<span class="hljs-params">name</span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!name) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录名不可为空！&quot;</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputVal&quot;</span>).<span class="hljs-property">value</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">createConn</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">`ws://localhost:8081/ws/user?name=<span class="hljs-subst">$&#123;name&#125;</span>`</span>)</span><br><span class="language-javascript">        socket.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;userNum, code&#125; = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">switch</span> (code) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2000</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;state&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;已连接！&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2001</span>:</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;消息已发送！&#x27;</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2002</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userNum&quot;</span>).<span class="hljs-property">innerText</span> = userNum</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="群体广播和指定人发送"><a href="#群体广播和指定人发送" class="headerlink" title="群体广播和指定人发送"></a>群体广播和指定人发送</h2><h3 id="管理类增加方法"><a href="#管理类增加方法" class="headerlink" title="管理类增加方法"></a>管理类增加方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送给别人</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sessionTo        发送给</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sessionForm      来自</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> content          内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> wsRespResultEnum</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(WebSocketSession sessionTo, WebSocketSession sessionForm, WsRespResultEnum wsRespResultEnum, String content)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取发送者的名称</span><br>        HashMap&lt;String, String&gt; queryToMap = getQueryToMap(sessionForm);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">formName</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        sessionTo.sendMessage(WsRespResult.send(wsRespResultEnum, formName, content));<br><br>        <span class="hljs-comment">// 给发送者通知已成功</span><br>        sessionForm.sendMessage(WsRespResult.send(WsRespResultEnum.SENDMSG_SUCCESS));<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 广播（不包括自己）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> webSocketSession session 发起广播的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToAll</span><span class="hljs-params">(WebSocketSession webSocketSession, String content)</span> &#123;<br>    wsSession.forEach((s, session) -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getQueryToMap(webSocketSession).get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!s.equals(name)) &#123;<br>            sendMsg(session, webSocketSession, WsRespResultEnum.ACCEPT_FORMTOALL, content);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送给某人</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> webSocketSession 发送者session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name             目标用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> content          内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToUser</span><span class="hljs-params">(WebSocketSession webSocketSession, String name, String content)</span> &#123;<br>    <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">toSession</span> <span class="hljs-operator">=</span> get(name);<br>    sendMsg(toSession, webSocketSession, WsRespResultEnum.ACCEPT_FORMTOUSER, content);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务类接收消息时"><a href="#服务类接收消息时" class="headerlink" title="服务类接收消息时"></a>服务类接收消息时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 收到消息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session session对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message 消息内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> message.getPayload();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> (Map) JSON.parse(payload);<br>    log.info(<span class="hljs-string">&quot;收到消息：&quot;</span> + parse);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> (String) parse.get(<span class="hljs-string">&quot;state&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> (String) parse.get(<span class="hljs-string">&quot;content&quot;</span>);<br>    <span class="hljs-keyword">switch</span> (state) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>            <span class="hljs-comment">// 获取接收人</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">toName</span> <span class="hljs-operator">=</span> (String) parse.get(<span class="hljs-string">&quot;toName&quot;</span>);<br>            <span class="hljs-comment">// 指定发送</span><br>            WsSocketManage.sendToUser(session, toName, content);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>            <span class="hljs-comment">// 广播</span><br>            WsSocketManage.sendToAll(session, content);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>前端传递格式： </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 状态（1指定，2广播）</span><br>    state<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 发送内容</span><br>    content<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 有指定发送时携带接收人</span><br>    toName<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="html页面-3"><a href="#html页面-3" class="headerlink" title="html页面"></a>html页面</h3><p>增加指定发送人输入框，增加接收广播消息和指定消息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前状态：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>未连接<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;createConn()&quot;</span>&gt;</span>建立连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前在线人数：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userNum&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputVal&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;发送消息&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMsgToAll()&quot;</span>&gt;</span>发送广播<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendToName&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;发送给&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMsg()&quot;</span>&gt;</span>发送给个人<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendContent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> socket;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">valid</span> = (<span class="hljs-params">name</span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!name) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录名不可为空！&quot;</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMsgToAll</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;2&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">content</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputVal&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        &#125;))</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;1&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">content</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputVal&quot;</span>).<span class="hljs-property">value</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">toName</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendToName&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        &#125;))</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">createConn</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> p</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> jsonContent</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">`ws://localhost:8081/ws/user?name=<span class="hljs-subst">$&#123;name&#125;</span>`</span>)</span><br><span class="language-javascript">        socket.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> jsonData = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">switch</span> (jsonData.<span class="hljs-property">code</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 成功建立连接</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2000</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;state&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;已连接！&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 消息发送成功</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2001</span>:</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;消息已发送！&#x27;</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 显示在线人数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2002</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userNum&quot;</span>).<span class="hljs-property">innerText</span> = jsonData.<span class="hljs-property">userNum</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 接收广播消息</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2003</span>:</span><br><span class="language-javascript">                    <span class="hljs-comment">// 动态添加元素节点</span></span><br><span class="language-javascript">                    p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>)</span><br><span class="language-javascript">                    jsonContent = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonData.<span class="hljs-property">content</span>)</span><br><span class="language-javascript">                    p.<span class="hljs-property">innerText</span> = <span class="hljs-string">`收到来自<span class="hljs-subst">$&#123;jsonData.formName&#125;</span>广播：<span class="hljs-subst">$&#123;jsonContent&#125;</span>`</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendContent&quot;</span>).<span class="hljs-title function_">appendChild</span>(p)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 接收指定消息</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2004</span>:</span><br><span class="language-javascript">                    <span class="hljs-comment">// 动态添加元素节点</span></span><br><span class="language-javascript">                    p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>)</span><br><span class="language-javascript">                    jsonContent = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonData.<span class="hljs-property">content</span>)</span><br><span class="language-javascript">                    p.<span class="hljs-property">innerText</span> = <span class="hljs-string">`收到来自<span class="hljs-subst">$&#123;jsonData.formName&#125;</span>私信：<span class="hljs-subst">$&#123;jsonContent&#125;</span>`</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendContent&quot;</span>).<span class="hljs-title function_">appendChild</span>(p)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>后端发送广播和消息数据格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 当前状态</span><br>    code<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 消息内容或事件名称</span><br>    content<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 来自用户名，只在指定发送有</span><br>    formName<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 当前在线人数</span><br>    userNum<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="服务类"><a href="#服务类" class="headerlink" title="服务类"></a>服务类</h3><p>socket &gt; WsService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.socket;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.stateEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.AbstractWebSocketHandler;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractWebSocketHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 建立连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>        <span class="hljs-comment">// 解析用户</span><br>        HashMap&lt;String, String&gt; queryToMap = WsSocketManage.getQueryToMap(session);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 以用户名为key，存储连接</span><br>        WsSocketManage.add(name, session);<br>        log.info(name + <span class="hljs-string">&quot;建立ws连接&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;当前在线人数：&quot;</span> + WsSocketManage.getUserNum());<br>        <span class="hljs-comment">// 返回连接成功</span><br>        WsSocketManage.sendMsg(session, WsRespResultEnum.CONN_SUCCESS);<br>        <span class="hljs-comment">// 更新所有已连接用户在线人数</span><br>        WsSocketManage.updateUserNum(session);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 断开连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> &#123;<br>        <span class="hljs-comment">// 获取断开连接的用户</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> WsSocketManage.getQueryToMap(session).get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 移除session</span><br>        WsSocketManage.removeAndClose(name);<br>        <span class="hljs-comment">// 更新所有已连接用户在线人数</span><br>        WsSocketManage.updateUserNum(session);<br>        log.info(name + <span class="hljs-string">&quot;关闭ws连接&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;当前在线人数：&quot;</span> + WsSocketManage.getUserNum());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session session对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 消息内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> message.getPayload();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> (Map) JSON.parse(payload);<br>        log.info(<span class="hljs-string">&quot;收到消息：&quot;</span> + parse);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> (String) parse.get(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> (String) parse.get(<span class="hljs-string">&quot;content&quot;</span>);<br>        <span class="hljs-keyword">switch</span> (state) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                <span class="hljs-comment">// 获取接收人</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">toName</span> <span class="hljs-operator">=</span> (String) parse.get(<span class="hljs-string">&quot;toName&quot;</span>);<br>                <span class="hljs-comment">// 指定发送</span><br>                WsSocketManage.sendToUser(session, toName, content);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                <span class="hljs-comment">// 广播</span><br>                WsSocketManage.sendToAll(session, content);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h3><p>scoket &gt; WsSocketManage.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.socket;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.entity.WsRespResult;<br><span class="hljs-keyword">import</span> com.fsan.stateEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsSocketManage</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; wsSession = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key     键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session 对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String key, WebSocketSession session)</span> &#123;<br>        wsSession.put(key, session);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 删除的session</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> wsSession.remove(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除并同步关闭socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAndClose</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> wsSession.remove(key);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(remove)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                remove.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>                <span class="hljs-comment">// todo 关闭连接异常</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取socket连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> session对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> wsSession.get(key);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给自己</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session          自己</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsRespResultEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(WebSocketSession session, WsRespResultEnum wsRespResultEnum)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            session.sendMessage(WsRespResult.send(wsRespResultEnum));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给别人</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionTo        发送给</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionForm      来自</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsRespResultEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(WebSocketSession sessionTo, WebSocketSession sessionForm, WsRespResultEnum wsRespResultEnum)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取发送者的名称</span><br>            HashMap&lt;String, String&gt; queryToMap = getQueryToMap(sessionForm);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">formName</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            sessionTo.sendMessage(WsRespResult.send(wsRespResultEnum, formName));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给别人</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionTo        发送给</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionForm      来自</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content          内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsRespResultEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(WebSocketSession sessionTo, WebSocketSession sessionForm, WsRespResultEnum wsRespResultEnum, String content)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取发送者的名称</span><br>            HashMap&lt;String, String&gt; queryToMap = getQueryToMap(sessionForm);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">formName</span> <span class="hljs-operator">=</span> queryToMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            sessionTo.sendMessage(WsRespResult.send(wsRespResultEnum, formName, content));<br><br>            <span class="hljs-comment">// 给发送者通知已成功</span><br>            sessionForm.sendMessage(WsRespResult.send(WsRespResultEnum.SENDMSG_SUCCESS));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取在线人数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> integer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getUserNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wsSession.size();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取请求session中参数map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session session 对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> HashMap</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> HashMap&lt;String, String&gt; <span class="hljs-title function_">getQueryToMap</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> session.getUri().getQuery();<br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : query.split(<span class="hljs-string">&quot;&amp;&quot;</span>)) &#123;<br>            String[] s1 = s.split(<span class="hljs-string">&quot;=&quot;</span>);<br>            map.put(s1[<span class="hljs-number">0</span>], s1[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通知在线人数（广播所有）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> webSocketSession 改动对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUserNum</span><span class="hljs-params">(WebSocketSession webSocketSession)</span> &#123;<br>        wsSession.forEach((s, session) -&gt; sendMsg(session, webSocketSession, WsRespResultEnum.USERNUM_UPDATE));<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 广播（不包括自己）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> webSocketSession session 发起广播的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToAll</span><span class="hljs-params">(WebSocketSession webSocketSession, String content)</span> &#123;<br>        wsSession.forEach((s, session) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getQueryToMap(webSocketSession).get(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!s.equals(name)) &#123;<br>                sendMsg(session, webSocketSession, WsRespResultEnum.ACCEPT_FORMTOALL, content);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给某人</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> webSocketSession 发送者session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name             目标用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content          内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToUser</span><span class="hljs-params">(WebSocketSession webSocketSession, String name, String content)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">toSession</span> <span class="hljs-operator">=</span> get(name);<br>        sendMsg(toSession, webSocketSession, WsRespResultEnum.ACCEPT_FORMTOUSER, content);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回包装类"><a href="#返回包装类" class="headerlink" title="返回包装类"></a>返回包装类</h3><p>entity &gt; WsRespResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.stateEnum.WsRespResultEnum;<br><span class="hljs-keyword">import</span> com.fsan.socket.WsSocketManage;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsRespResult</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> Object content;<br>    <span class="hljs-keyword">private</span> Integer userNum;<br>    <span class="hljs-keyword">private</span> String formName;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给自己</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TextMessage <span class="hljs-title function_">send</span><span class="hljs-params">(WsRespResultEnum respResultEnum)</span> &#123;<br>        <span class="hljs-type">WsRespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsRespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setContent(respResultEnum.getContent());<br>        respResult.setUserNum(WsSocketManage.getUserNum());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(JSON.toJSONString(respResult));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给对方</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TextMessage <span class="hljs-title function_">send</span><span class="hljs-params">(WsRespResultEnum respResultEnum, String formName)</span> &#123;<br>        <span class="hljs-type">WsRespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsRespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setContent(respResultEnum.getContent());<br>        respResult.setFormName(formName);<br>        respResult.setUserNum(WsSocketManage.getUserNum());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(JSON.toJSONString(respResult));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送给对方（有内容）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TextMessage <span class="hljs-title function_">send</span><span class="hljs-params">(WsRespResultEnum respResultEnum, String formName, String content)</span> &#123;<br>        <span class="hljs-type">WsRespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsRespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setContent(content);<br>        respResult.setFormName(formName);<br>        respResult.setUserNum(WsSocketManage.getUserNum());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(JSON.toJSONString(respResult));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="状态枚举类"><a href="#状态枚举类" class="headerlink" title="状态枚举类"></a>状态枚举类</h3><p>stateEnum &gt; WsRespResultEnum.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.stateEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">WsRespResultEnum</span> &#123;<br>    CONN_SUCCESS(<span class="hljs-number">2000</span>, <span class="hljs-string">&quot;连接成功&quot;</span>),<br>    SENDMSG_SUCCESS(<span class="hljs-number">2001</span>, <span class="hljs-string">&quot;发送消息成功&quot;</span>),<br>    USERNUM_UPDATE(<span class="hljs-number">2002</span>, <span class="hljs-string">&quot;广播所有更新在线人数&quot;</span>),<br>    ACCEPT_FORMTOALL(<span class="hljs-number">2003</span>, <span class="hljs-string">&quot;接收到广播消息&quot;</span>),<br>    ACCEPT_FORMTOUSER(<span class="hljs-number">2004</span>, <span class="hljs-string">&quot;接收到个人消息&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> Object content;<br><br>    WsRespResultEnum(Integer code, Object content) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="socket配置类"><a href="#socket配置类" class="headerlink" title="socket配置类"></a>socket配置类</h3><p>config &gt; SocketConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.config;<br><br><span class="hljs-keyword">import</span> com.fsan.socket.WsService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WsService wsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry<br>                <span class="hljs-comment">// 添加socket服务</span><br>                .addHandler(wsService, <span class="hljs-string">&quot;/ws/user&quot;</span>)<br>                <span class="hljs-comment">// 允许跨域</span><br>                .setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="html页面-4"><a href="#html页面-4" class="headerlink" title="html页面"></a>html页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前状态：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>未连接<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;createConn()&quot;</span>&gt;</span>建立连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前在线人数：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userNum&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputVal&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;发送消息&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMsgToAll()&quot;</span>&gt;</span>发送广播<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendToName&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;发送给&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMsg()&quot;</span>&gt;</span>发送给个人<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendContent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> socket;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">valid</span> = (<span class="hljs-params">name</span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!name) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录名不可为空！&quot;</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMsgToAll</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;2&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">content</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputVal&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        &#125;))</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;1&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">content</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputVal&quot;</span>).<span class="hljs-property">value</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">toName</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendToName&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        &#125;))</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">createConn</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> p</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> jsonContent</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">valid</span>(name)) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">`ws://localhost:8081/ws/user?name=<span class="hljs-subst">$&#123;name&#125;</span>`</span>)</span><br><span class="language-javascript">        socket.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> jsonData = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonData);</span><br><span class="language-javascript">            <span class="hljs-keyword">switch</span> (jsonData.<span class="hljs-property">code</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 成功建立连接</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2000</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;state&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;已连接！&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 消息发送成功</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2001</span>:</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;消息已发送！&#x27;</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 显示在线人数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2002</span>:</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userNum&quot;</span>).<span class="hljs-property">innerText</span> = jsonData.<span class="hljs-property">userNum</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 接收广播消息</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2003</span>:</span><br><span class="language-javascript">                    <span class="hljs-comment">// 动态添加元素节点</span></span><br><span class="language-javascript">                    p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>)</span><br><span class="language-javascript">                    jsonContent = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonData.<span class="hljs-property">content</span>)</span><br><span class="language-javascript">                    p.<span class="hljs-property">innerText</span> = <span class="hljs-string">`收到来自<span class="hljs-subst">$&#123;jsonData.formName&#125;</span>广播：<span class="hljs-subst">$&#123;jsonContent&#125;</span>`</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendContent&quot;</span>).<span class="hljs-title function_">appendChild</span>(p)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 接收指定消息</span></span><br><span class="language-javascript">                <span class="hljs-keyword">case</span> <span class="hljs-number">2004</span>:</span><br><span class="language-javascript">                    <span class="hljs-comment">// 动态添加元素节点</span></span><br><span class="language-javascript">                    p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>)</span><br><span class="language-javascript">                    jsonContent = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonData.<span class="hljs-property">content</span>)</span><br><span class="language-javascript">                    p.<span class="hljs-property">innerText</span> = <span class="hljs-string">`收到来自<span class="hljs-subst">$&#123;jsonData.formName&#125;</span>私信：<span class="hljs-subst">$&#123;jsonContent&#125;</span>`</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendContent&quot;</span>).<span class="hljs-title function_">appendChild</span>(p)</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="最后说明"><a href="#最后说明" class="headerlink" title="最后说明"></a>最后说明</h3><p>封装的比较烂，轻喷</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot发送邮箱</title>
    <link href="/2022/05/17/springboot%E5%8F%91%E9%80%81%E9%82%AE%E7%AE%B1/"/>
    <url>/2022/05/17/springboot%E5%8F%91%E9%80%81%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>导入依赖</li><li>配置邮箱服务器</li></ol><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置邮箱服务器"><a href="#配置邮箱服务器" class="headerlink" title="配置邮箱服务器"></a>配置邮箱服务器</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">XXXXXX@qq.com</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">XXXXXXX</span><br><br><span class="hljs-attr">mail:</span><br>  <span class="hljs-attr">mailTo:</span> <span class="hljs-string">XXXXXXX@qq.com</span><br>  <span class="hljs-attr">mailFrom:</span> <span class="hljs-string">XXXXXXX@qq.com</span><br></code></pre></td></tr></table></figure><blockquote><p><code>mailTo</code>（发送给谁） 和 <code>mailFrom</code>（是谁发送） 是自定的，给后续发送邮箱时使用</p><p><code>host</code>：表示使用邮箱服务器的地址，其他服务器请往下看</p><p><code>username</code>：邮箱名</p><p><code>password</code>：邮箱密码，如是qq邮箱，必须要在qq邮箱中设置开启SMTP（电子邮件传输协议），并使用提供的唯一密码</p></blockquote><h2 id="发送简易邮箱"><a href="#发送简易邮箱" class="headerlink" title="发送简易邮箱"></a>发送简易邮箱</h2><p>使用<code>SimpleMailMessage</code>对象即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 发送给谁</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.mailTo&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String mailTo;<br><br><span class="hljs-comment">// 谁发送的</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.mailFrom&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String mailFrom;<br><br><span class="hljs-comment">// 指定验证码长度</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.codeLength&#125;&quot;)</span><br><span class="hljs-keyword">private</span> Integer codeLength;<br><br><span class="hljs-comment">// 邮箱发送标题</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.codeSubject&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String codeSubject;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成验证码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">createCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 时间戳获取</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> Long.toString(System.currentTimeMillis());<br>    <span class="hljs-comment">// UUID去字母符号取长度-2，加上时间戳最后两位</span><br>    <span class="hljs-keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;[a-zA-Z-]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).substring(<span class="hljs-number">0</span>, codeLength - <span class="hljs-number">2</span>) + time.substring(time.length() - <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">easySend</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">simpleMailMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>    simpleMailMessage.setTo(mailTo);<br>    simpleMailMessage.setFrom(mailFrom);<br>    simpleMailMessage.setSubject(codeSubject);<br>    <span class="hljs-comment">// 邮件内容</span><br>    simpleMailMessage.setText(<span class="hljs-string">&quot;验证码为：&quot;</span> + createCode());<br>    <span class="hljs-keyword">try</span> &#123;<br>        javaMailSender.send(simpleMailMessage);<br>        log.info(<span class="hljs-string">&quot;邮件已发送！&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (MailException e) &#123;<br>        e.printStackTrace();<br>        log.error(<span class="hljs-string">&quot;发送邮件时发生异常！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送HTML邮箱"><a href="#发送HTML邮箱" class="headerlink" title="发送HTML邮箱"></a>发送HTML邮箱</h2><ol><li>获取message</li><li>添加发送内容</li><li>发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 发送给谁</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.mailTo&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String mailTo;<br><br><span class="hljs-comment">// 谁发送的</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.mailFrom&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String mailFrom;<br><br><span class="hljs-comment">// 指定验证码长度</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.codeLength&#125;&quot;)</span><br><span class="hljs-keyword">private</span> Integer codeLength;<br><br><span class="hljs-comment">// 邮箱发送标题</span><br><span class="hljs-meta">@Value(&quot;$&#123;mail.codeSubject&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String codeSubject;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">htmlSend</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;h3&gt;验证码为：&quot;</span> + createCode() + <span class="hljs-string">&quot;&lt;/h3&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>;<br>    <span class="hljs-comment">// 获取message</span><br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> javaMailSender.createMimeMessage();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">mimeMessageHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>        mimeMessageHelper.setTo(mailTo);<br>        mimeMessageHelper.setFrom(mailFrom);<br>        <span class="hljs-comment">// 添加html内容</span><br>        mimeMessageHelper.setText(content, <span class="hljs-literal">true</span>);<br>        mimeMessageHelper.setSubject(codeSubject);<br>        javaMailSender.send(message);<br>        log.info(<span class="hljs-string">&quot;发送HTML邮箱成功！&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;<br>        e.printStackTrace();<br>        log.error(<span class="hljs-string">&quot;发送HTML邮件时发生异常！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送图片邮箱"><a href="#发送图片邮箱" class="headerlink" title="发送图片邮箱"></a>发送图片邮箱</h2><ol><li>建立message</li><li>添加发送对象</li><li>获取发送file对象</li><li>添加发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendImg</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 为图片建立唯一值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-comment">// 图片地址，从src开始</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">imgUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;src/main/resources/img/img1.png&quot;</span>;<br>    <span class="hljs-comment">// src后面cid是固定写法</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;这是有图片的邮件：&lt;img src=&#x27;cid:&quot;</span>+pid+<span class="hljs-string">&quot;&#x27; &gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;<br>    <span class="hljs-comment">// 建立message</span><br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> javaMailSender.createMimeMessage();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">mimeMessageHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>        mimeMessageHelper.setFrom(mailFrom);<br>        mimeMessageHelper.setTo(mailTo);<br>        mimeMessageHelper.setSubject(codeSubject);<br>        mimeMessageHelper.setText(content, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 获取对应目录file对象</span><br>        <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(imgUrl));<br>        <span class="hljs-comment">// 为图片唯一值为pid的添加file文件</span><br>        mimeMessageHelper.addInline(pid, res);<br>        javaMailSender.send(message);<br>        log.info(<span class="hljs-string">&quot;邮箱已发送！&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;<br>        e.printStackTrace();<br>        log.error(<span class="hljs-string">&quot;邮箱发送失败！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向切面spring aop</title>
    <link href="/2022/05/16/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2spring-aop/"/>
    <url>/2022/05/16/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2spring-aop/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>AOP （Aspect Orient Programming）,直译过来就是 面向切面编程。AOP 是一种编程思想，是面向对象编程（OOP）的一种补充。面向对象编程将程序抽象成各个层次的对象，而面向切面编程是将程序抽象成各个切面。</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="切面通知注解和执行顺序"><a href="#切面通知注解和执行顺序" class="headerlink" title="切面通知注解和执行顺序"></a>切面通知注解和执行顺序</h2><h3 id="五种通知注解"><a href="#五种通知注解" class="headerlink" title="五种通知注解"></a>五种通知注解</h3><table><thead><tr><th>注解名</th><th>用法</th></tr></thead><tbody><tr><td>@Before</td><td>前置通知, 在方法执行之前执行</td></tr><tr><td>@After</td><td>后置通知, 在方法执行之后执行</td></tr><tr><td>@AfterRunning</td><td>返回通知, 在方法返回结果之后执行</td></tr><tr><td>@AfterThrowing</td><td>异常通知, 在方法抛出异常之后</td></tr><tr><td>@Around</td><td>环绕通知, 围绕着方法执行</td></tr></tbody></table><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ol><li>@Around</li><li>@Before</li><li>执行方法</li><li>@Around</li><li>@After</li><li>@AfterReturning</li></ol><h2 id="切点-Pointcut"><a href="#切点-Pointcut" class="headerlink" title="切点@Pointcut"></a>切点@Pointcut</h2><h3 id="切点表达式标签（10种）"><a href="#切点表达式标签（10种）" class="headerlink" title="切点表达式标签（10种）"></a>切点表达式标签（10种）</h3><table><thead><tr><th>标记名</th><th>作用</th></tr></thead><tbody><tr><td>execution</td><td>用于匹配方法执行的连接点</td></tr><tr><td>within</td><td>用于匹配指定类型内的方法执行</td></tr><tr><td>this</td><td>用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配</td></tr><tr><td>target</td><td>用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配</td></tr><tr><td>args</td><td>用于匹配当前执行的方法传入的参数为指定类型的执行方法</td></tr><tr><td>@within</td><td>用于匹配所以持有指定注解类型内的方法</td></tr><tr><td>@target</td><td>用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解</td></tr><tr><td>@args</td><td>用于匹配当前执行的方法传入的参数持有指定注解的执行</td></tr><tr><td>@annotation</td><td>用于匹配当前执行方法持有指定注解的方法</td></tr><tr><td>bean</td><td>Spring AOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法</td></tr></tbody></table><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.javacode2018.aop.demo9.test1.Service1.*(..))&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="关于切点中execution表达式"><a href="#关于切点中execution表达式" class="headerlink" title="关于切点中execution表达式"></a>关于切点中execution表达式</h3><h4 id="常用写法"><a href="#常用写法" class="headerlink" title="常用写法"></a>常用写法</h4><p><code>execution(public * *(..))</code> 表示匹配所有public方法</p><p><code>execution(* set*(..))</code>表达所有以“set”开头的方法</p><p><code>execution(* com.xyz.service.AccountService.*(..))</code>表示匹配所有AccountService接口的方法</p><p><code>execution(* com.xyz.service.*.*(..))</code>表示匹配service包下的所有方法</p><p><code>execution(* com.xyz.service..*.*(..))</code>表示匹配service包和它的子包下的方法</p><p><code>execution(* *To(..))</code>匹配目标类所有以To为后缀的方法</p><h4 id="基本语法如下："><a href="#基本语法如下：" class="headerlink" title="基本语法如下："></a>基本语法如下：</h4><p>execution(&lt;修饰符模式&gt;?&lt;返回类型模式&gt;&lt;方法名模式&gt;(&lt;参数模式&gt;)&lt;异常模式&gt;?) 除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。</p><p>如：<code>execution(* com.xyz.service.impl..*.*(..))</code>解释如下</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>第一个 “  *  ”</td><td>表示返回值的类型任意</td></tr><tr><td>com.xyz.service.impl</td><td>aop所切的包名</td></tr><tr><td>包名后的 “  ..  ”</td><td>表示当前包及子类</td></tr><tr><td>第二个 “  *  ”</td><td>表示类名，* 即所有类</td></tr><tr><td>.*(..)</td><td>表示任何方法名，括号表示参数，两个点表示任何参数类型</td></tr></tbody></table><h2 id="实现简单的控制台日志"><a href="#实现简单的控制台日志" class="headerlink" title="实现简单的控制台日志"></a>实现简单的控制台日志</h2><h3 id="输出日志（使用注解控制）"><a href="#输出日志（使用注解控制）" class="headerlink" title="输出日志（使用注解控制）"></a>输出日志（使用注解控制）</h3><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>因为要演示对被自定义注解标记的类做切面，所以先建立一个自定义注解</p><p>annotation &gt; LookResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> LookResult &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在controller处使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.controller;<br><br><span class="hljs-keyword">import</span> com.fsan.annotation.LookResult;<br><span class="hljs-keyword">import</span> com.fsan.annotation.PackResult;<br><span class="hljs-keyword">import</span> com.fsan.entity.User;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@PackResult</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-meta">@LookResult</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;FSAN&quot;</span>, <span class="hljs-string">&quot;FSAN&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="建立切面类"><a href="#建立切面类" class="headerlink" title="建立切面类"></a>建立切面类</h4><p>创建 aspect &gt; LogAsp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAsp</span> &#123;<br>    <br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.fsan.annotation.LookResult)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">haveLookResultCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-meta">@AfterReturning(pointcut = &quot;haveLookResultCut()&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterReturning</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class="hljs-comment">// 获取RequestAttributes</span><br>        <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-comment">// 从获取RequestAttributes中获取HttpServletRequest的信息</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) requestAttributes<br>                .resolveReference(RequestAttributes.REFERENCE_REQUEST);<br><br>        <span class="hljs-comment">// 从切面织入点处通过反射机制获取织入点处的方法</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 获取切入点所在的方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br><br>        log.info(<span class="hljs-string">&quot;==========收到请求==========&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;请求类名：&quot;</span> + joinPoint.getTarget().getClass().getName());<br>        log.info(<span class="hljs-string">&quot;请求方法名：&quot;</span> + method.getName());<br>        log.info(<span class="hljs-string">&quot;返回结果：&quot;</span> + JSON.toJSONString(result));<br>        log.info(<span class="hljs-string">&quot;请求ip：&quot;</span> + request.getRemoteAddr());<br>        log.info(<span class="hljs-string">&quot;==========完毕==========&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Component 必须带上</p><p><code>@Pointcut(&quot;@annotation(com.fsan.annotation.LookResult)&quot;) </code>为拥有<code>LookResult</code>注解的方法建立切点</p><p><code>@AfterReturning</code>修饰的注解有两个参数，第一个是切点信息，第二个是方法的方法的返回值</p></blockquote><h3 id="错误日志（控制某个包下的所有类）"><a href="#错误日志（控制某个包下的所有类）" class="headerlink" title="错误日志（控制某个包下的所有类）"></a>错误日志（控制某个包下的所有类）</h3><h4 id="在切面类中使用-AfterThrowing"><a href="#在切面类中使用-AfterThrowing" class="headerlink" title="在切面类中使用@AfterThrowing"></a>在切面类中使用@AfterThrowing</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(pointcut = &quot;execution(* com.fsan.service.impl.*.*(..))&quot;, throwing = &quot;e&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logCutAfterThrowing</span><span class="hljs-params">(JoinPoint joinPoint, Throwable e)</span> &#123;<br>    log.error(<span class="hljs-string">&quot;==========程序出现异常==========&quot;</span>);<br>    <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br>    log.error(<span class="hljs-string">&quot;请求类名：&quot;</span> + joinPoint.getTarget().getClass().getName());<br>    log.error(<span class="hljs-string">&quot;请求方法名：&quot;</span> + method.getName());<br>    log.error(<span class="hljs-string">&quot;报错原因：&quot;</span> + e.getMessage());<br>    log.error(<span class="hljs-string">&quot;==========完毕==========&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>@AfterThrowing(pointcut = &quot;execution(* com.fsan.service.impl.*.*(..))&quot;, throwing = &quot;e&quot;)</code>pointcut属性也可以像上面一样先定义切面方法，语法详细看上面，接收错误信息为e</p></blockquote><h4 id="跳过某个异常"><a href="#跳过某个异常" class="headerlink" title="跳过某个异常"></a>跳过某个异常</h4><p>在有自定义异常的时候，不想输出自己的自定义异常，就可以这样做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(pointcut = &quot;execution(* com.fsan.service.impl.*.*(..))&quot;, throwing = &quot;e&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logCutAfterThrowing</span><span class="hljs-params">(JoinPoint joinPoint, Throwable e)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> e <span class="hljs-keyword">instanceof</span> ValidateException;<br>    <span class="hljs-keyword">if</span> (!b) &#123;<br>        log.error(<span class="hljs-string">&quot;==========程序出现异常==========&quot;</span>);<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br>        log.error(<span class="hljs-string">&quot;请求类名：&quot;</span> + joinPoint.getTarget().getClass().getName());<br>        log.error(<span class="hljs-string">&quot;请求方法名：&quot;</span> + method.getName());<br>        log.error(<span class="hljs-string">&quot;报错原因：&quot;</span> + e.getMessage());<br>        log.error(<span class="hljs-string">&quot;==========完毕==========&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他切点表达式写法"><a href="#其他切点表达式写法" class="headerlink" title="其他切点表达式写法"></a>其他切点表达式写法</h2><h3 id="定义测试切点（controller下所有类下方法）"><a href="#定义测试切点（controller下所有类下方法）" class="headerlink" title="定义测试切点（controller下所有类下方法）"></a>定义测试切点（controller下所有类下方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.fsan.controller.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demoCut</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="Before前置通知"><a href="#Before前置通知" class="headerlink" title="@Before前置通知"></a>@Before前置通知</h3><p>在目标方法的执行之前执行，即在连接点之前进行执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;demoCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());<br>    log.info(<span class="hljs-string">&quot;调用方法为：&quot;</span> + methodName);<br>    log.info(<span class="hljs-string">&quot;参数为：&quot;</span> + args);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="After后置通知"><a href="#After后置通知" class="headerlink" title="@After后置通知"></a>@After后置通知</h3><p>无论连接点方法执行成功还是出现异常，都将执行后置方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@After(&quot;demoCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfter</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());<br>    log.info(<span class="hljs-string">&quot;调用方法为：&quot;</span> + methodName);<br>    log.info(<span class="hljs-string">&quot;参数为：&quot;</span> + args);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法参数同@before</p><h3 id="AfterRunning返回通知"><a href="#AfterRunning返回通知" class="headerlink" title="@AfterRunning返回通知"></a>@AfterRunning返回通知</h3><p>当连接点方法成功执行后，返回通知方法才会执行</p><p>不演示了，上面有实例</p><h3 id="AfterThrowing异常通知"><a href="#AfterThrowing异常通知" class="headerlink" title="@AfterThrowing异常通知"></a>@AfterThrowing异常通知</h3><p>异常通知方法只在连接点方法出现异常后才会执行</p><p>同不演示了，上面有例子</p><h3 id="Around环绕通知"><a href="#Around环绕通知" class="headerlink" title="@Around环绕通知"></a>@Around环绕通知</h3><p>环绕通知方法可以包含上面四种通知方法，环绕通知的功能最全面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;demoCut()&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doAround</span><span class="hljs-params">(ProceedingJoinPoint pdj)</span> &#123;<br>    <span class="hljs-comment">// @Before 之前</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> pdj.getSignature().getName();<br>    log.info(<span class="hljs-string">&quot;目标方法为：&quot;</span> + methodName);<br>    log.info(<span class="hljs-string">&quot;参数为：&quot;</span> + Arrays.asList(pdj.getArgs()));<br><br>    <span class="hljs-comment">// 准备接收手动执行方法后的返回结果</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行目标方法</span><br>        result = pdj.proceed();<br><br>        <span class="hljs-comment">// 返回通知 同 @AfterRunning</span><br>        log.info(<span class="hljs-string">&quot;返回通知消息（环绕通知中）：方法名：&quot;</span> + methodName);<br>        log.info(<span class="hljs-string">&quot;返回通知消息（环绕通知中）：返回结果：&quot;</span> + result);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        <span class="hljs-comment">// 异常通知 同 @AfterThrowing</span><br>        log.info(<span class="hljs-string">&quot;异常通知消息（环绕通知中）：方法名：&quot;</span> + methodName);<br>        log.info(<span class="hljs-string">&quot;异常通知消息（环绕通知中）：异常为：&quot;</span> + e);<br>    &#125;<br><br>    <span class="hljs-comment">// 后置通知，同 @After</span><br>    log.info(<span class="hljs-string">&quot;后置通知（环绕通知中），方法名：&quot;</span> + methodName);<br><br>    <span class="hljs-comment">// 在返回之前对返回结果进行处理，但是必须要满足原返回类型</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>aop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常统一处理（优雅）</title>
    <link href="/2022/05/14/%E5%BC%82%E5%B8%B8%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%EF%BC%88%E4%BC%98%E9%9B%85%EF%BC%89/"/>
    <url>/2022/05/14/%E5%BC%82%E5%B8%B8%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%EF%BC%88%E4%BC%98%E9%9B%85%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在写spring项目的时候，特别是使用了安全框架security之后，异常的处理直接返回封装对象会导致结构非常多余，以下是我的统一异常处理</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="创建状态枚举类"><a href="#创建状态枚举类" class="headerlink" title="创建状态枚举类"></a>创建状态枚举类</h3><p>stateEnum &gt; RespResultEnum.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.stateEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RespResultEnum</span> &#123;<br><br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;成功！&quot;</span>),<br>    ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;服务器出现问题，请尽快联系管理员！&quot;</span>),<br>    NOT_AUTHENTICATION(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;权限认证失败！&quot;</span>),<br>    NULL_USERNAME(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;用户名为空！非法请求！&quot;</span>),<br>    NULL_PASSWORD(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;密码为空！非法请求！&quot;</span>);<br><br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    RespResultEnum(Integer code, String msg) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建返回的实体类"><a href="#创建返回的实体类" class="headerlink" title="创建返回的实体类"></a>创建返回的实体类</h3><p>entity &gt; RespResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.entity;<br><br><span class="hljs-keyword">import</span> com.fsan.throw_demo.stateEnum.RespResultEnum;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RespResult</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有返回值的请求成功</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespResult <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-type">RespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RespResult</span>();<br>        respResult.setCode(RespResultEnum.SUCCESS.getCode());<br>        respResult.setMsg(RespResultEnum.SUCCESS.getMsg());<br>        respResult.setData(data);<br>        <span class="hljs-keyword">return</span> respResult;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无返回值的请求成功</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespResult <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RespResult</span>();<br>        respResult.setCode(RespResultEnum.SUCCESS.getCode());<br>        respResult.setMsg(RespResultEnum.SUCCESS.getMsg());<br>        <span class="hljs-keyword">return</span> respResult;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> respResultEnum 枚举状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespResult <span class="hljs-title function_">fail</span><span class="hljs-params">(RespResultEnum respResultEnum)</span> &#123;<br>        <span class="hljs-type">RespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RespResult</span>();<br>        respResult.setCode(respResultEnum.getCode());<br>        respResult.setMsg(respResultEnum.getMsg());<br>        <span class="hljs-keyword">return</span> respResult;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 未知异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespResult <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RespResult</span>();<br>        respResult.setCode(RespResultEnum.ERROR.getCode());<br>        respResult.setMsg(RespResultEnum.ERROR.getMsg());<br>        <span class="hljs-keyword">return</span> respResult;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="简单建立User类"><a href="#简单建立User类" class="headerlink" title="简单建立User类"></a>简单建立User类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常统一处理"><a href="#异常统一处理" class="headerlink" title="异常统一处理"></a>异常统一处理</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>创建自定义异常类，接收状态枚举</li><li>定义响应拦截，接收抛出的自定义异常类的信息</li><li>使用<code>HttpServletResponse</code>封装返回</li></ol><h3 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h3><p>exception &gt; ValidateException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.exception;<br><span class="hljs-keyword">import</span> com.fsan.throw_demo.stateEnum.RespResultEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidateException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">private</span> RespResultEnum respResultEnum;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ValidateException</span><span class="hljs-params">(RespResultEnum respResultEnum)</span> &#123;<br>        <span class="hljs-built_in">super</span>(respResultEnum.getMsg());<br>        <span class="hljs-built_in">this</span>.respResultEnum = respResultEnum;<br>    &#125;<br><br>    RespResultEnum <span class="hljs-title function_">getRespResultEnum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> respResultEnum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>继承<code>RuntimeException</code>是自定义异常类的最佳选择，然后自定义异常类中存储状态枚举类方便后续封装返回</p><p>类的访问修饰符不写就是在同包下使用，如果要在其他包下调用，需要写上public</p></blockquote><h3 id="创建异常处理类"><a href="#创建异常处理类" class="headerlink" title="创建异常处理类"></a>创建异常处理类</h3><p>exception &gt; GlobalException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.exception;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.throw_demo.entity.RespResult;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalException</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(ValidateException.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(ValidateException exception, HttpServletResponse resp)</span> &#123;<br>        resp.setStatus(<span class="hljs-number">200</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            resp.getWriter().write(JSON.toJSONString(RespResult.fail(exception.getRespResultEnum())));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;================\n出现未知错误！\n================&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><code>@RestControllerAdvice</code> 设置在响应前执行</p><p><code>@ExceptionHandler(ValidateException.class)</code>  接收抛出的<code>ValidateException</code>异常类</p></blockquote><p>这里也可以将<code>HttpServletResponse</code>对象单独封装一份供其他类调用，如下：</p><p>utils &gt; WebUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.utils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResp</span><span class="hljs-params">(HttpServletResponse response, String respResult)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            response.setStatus(<span class="hljs-number">200</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.getWriter().write(respResult);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;================\n出现未知错误！\n================&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.exception;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fsan.throw_demo.entity.RespResult;<br><span class="hljs-keyword">import</span> com.fsan.throw_demo.utils.WebUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalException</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebUtils webUtils;<br><br>    <span class="hljs-meta">@ExceptionHandler(ValidateException.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(ValidateException exception, HttpServletResponse resp)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> JSON.toJSONString(RespResult.fail(exception.getRespResultEnum()));<br>        webUtils.sendResp(resp, respResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>优雅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结果统一封装（优雅）</title>
    <link href="/2022/05/14/%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85%E8%BF%94%E5%9B%9E%EF%BC%88%E4%BC%98%E9%9B%85%EF%BC%89/"/>
    <url>/2022/05/14/%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85%E8%BF%94%E5%9B%9E%EF%BC%88%E4%BC%98%E9%9B%85%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>我们为了保证后端发送数据的一致性，都会在controller处进行封装，以下是我的封装思路</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="自定义返回的实体类"><a href="#自定义返回的实体类" class="headerlink" title="自定义返回的实体类"></a>自定义返回的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.entity;<br><br><span class="hljs-keyword">import</span> com.fsan.throw_demo.myEnum.RespResultEnum;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RespResult</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有返回值的请求成功</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespResult <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-type">RespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RespResult</span>();<br>        respResult.setCode(RespResultEnum.SUCCESS.getCode());<br>        respResult.setMsg(RespResultEnum.SUCCESS.getMsg());<br>        respResult.setData(data);<br>        <span class="hljs-keyword">return</span> respResult;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无返回值的请求成功</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespResult <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RespResult</span> <span class="hljs-variable">respResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RespResult</span>();<br>        respResult.setCode(RespResultEnum.SUCCESS.getCode());<br>        respResult.setMsg(RespResultEnum.SUCCESS.getMsg());<br>        <span class="hljs-keyword">return</span> respResult;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于只记录统一封装，就只展示成功的封装过程</p></blockquote><p>然后可以看到，我这里是用了一个枚举类的，为了后续方便增加状态对应，枚举类如下：</p><p>com.fsan.throw_demo.myEnum.RespResultEnum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.myEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RespResultEnum</span> &#123;<br><br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;成功！&quot;</span>),<br>    ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;服务器出现问题，请尽快联系管理员！&quot;</span>),<br>    NOT_AUTHENTICATION(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;权限认证失败！&quot;</span>),<br>    NULL_USERNAME(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;用户名为空！非法请求！&quot;</span>),<br>    NULL_PASSWORD(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;密码为空！非法请求！&quot;</span>);<br><br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    RespResultEnum(Integer code, String msg) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="controller演示"><a href="#controller演示" class="headerlink" title="controller演示"></a>controller演示</h3><p>为了简单测试，也是写了一个User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller使用如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getJson&quot;)</span><br><span class="hljs-keyword">public</span> RespResult <span class="hljs-title function_">getJSON</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> RespResult.success(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;FSAN&quot;</span>,<span class="hljs-string">&quot;FSAN&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这样返回非常的不方便，如果所有的接口返回类型都是<code>RespResult</code>，没有业务含义，不利于文档的生成</p><p>所以就有了接下来的修改</p><h2 id="结果统一封装"><a href="#结果统一封装" class="headerlink" title="结果统一封装"></a>结果统一封装</h2><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><ol><li>自定义注解</li><li>定义请求拦截器</li><li>从请求拦截器中获取方法执行类对象和方法对象</li><li>判断方法有没有自定义的注解，有则向请求中添加属性</li><li>自定义响应处理类，在方法响应之前判断请求中有无指定属性</li><li>对数据封装返回</li></ol><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>创建 myAnnotation &gt; PackResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.myAnnotation;<br><br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> PackResult &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Target 设置注解描述对象（设置在方法或类上使用）</p><p>@Retention 设置启动事件（设置运行时启动）</p></blockquote><h3 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h3><p>创建 config &gt; MvcConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptors</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里我用了MyInterceptors类，这是我们下一步定义的拦截规则类</p></blockquote><h3 id="创建拦截规则"><a href="#创建拦截规则" class="headerlink" title="创建拦截规则"></a>创建拦截规则</h3><p>创建 config &gt; MyInterceptors.java</p><p>这个拦截规则作用并不是拦截，而是判断方法或类上是否有注解，最后都是要返回true通过的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.config;<br><br><span class="hljs-keyword">import</span> com.fsan.throw_demo.myAnnotation.PackResult;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptors</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 判断handler是否可以转为HandlerMethod，是否是HandlerMethod的实例</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>            <span class="hljs-comment">// 获取请求的类对象和方法对象</span><br>            Class&lt;?&gt; clazz = handlerMethod.getBeanType();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            <span class="hljs-comment">// 判断类或方法中是否存在PackResult注解</span><br>            <span class="hljs-keyword">if</span> (clazz.isAnnotationPresent(PackResult.class)) &#123;<br>                request.setAttribute(<span class="hljs-string">&quot;havePack&quot;</span>, clazz.getAnnotation(PackResult.class));<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.isAnnotationPresent(PackResult.class)) &#123;<br>                request.setAttribute(<span class="hljs-string">&quot;havePack&quot;</span>, method.getAnnotation(PackResult.class));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>getBeanType() 获取类对象，并不是getClass()</p><p>getMethod() 获取方法对象</p><p>注意 <code>isAnnotationPresent</code>并不是<code>isAnnotation</code>，前者是判断是否存在注解，后者是判断是否为注解</p></blockquote><h3 id="创建RestController和Controller的拦截类（增强返回）"><a href="#创建RestController和Controller的拦截类（增强返回）" class="headerlink" title="创建RestController和Controller的拦截类（增强返回）"></a>创建RestController和Controller的拦截类（增强返回）</h3><p>创建 controller &gt; RespResultControllerAdvice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.throw_demo.controlller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fsan.throw_demo.entity.RespResult;<br><span class="hljs-keyword">import</span> com.fsan.throw_demo.myAnnotation.PackResult;<br><span class="hljs-keyword">import</span> org.springframework.core.MethodParameter;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.server.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RespResultControllerAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter methodParameter, Class aClass)</span> &#123;<br>        <span class="hljs-comment">// 先转为ServletRequestAttributes对象</span><br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-comment">// 获取请求信息</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> attributes.getRequest();<br>        <span class="hljs-comment">// 获取请求属性</span><br>        <span class="hljs-type">PackResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (PackResult) request.getAttribute(<span class="hljs-string">&quot;havePack&quot;</span>);<br>        <span class="hljs-keyword">return</span> result != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object o, MethodParameter methodParameter, MediaType mediaType, Class aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> &#123;<br>        <span class="hljs-comment">// 如果上面为true则封装返回</span><br>        <span class="hljs-keyword">return</span> RespResult.success(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>主要就是使用了<code>RequestContextHolder</code>对象获取到<code>HttpServletRequest</code>，</p><p>这里通过请求获取<code>havePack</code>就是前面通过拦截器对包含<code>PackResult</code>注解的请求添加的，如果有就是需要封装，返回的<code>PackResult</code>就是注解类，也是同前面添加</p><p>这是直接返回而不用使用JSON转换的原因是controller中@RestController会封装</p></blockquote><h2 id="封装前后controller写法对比"><a href="#封装前后controller写法对比" class="headerlink" title="封装前后controller写法对比"></a>封装前后controller写法对比</h2><p>统一封装前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getJson&quot;)</span><br><span class="hljs-keyword">public</span> RespResult <span class="hljs-title function_">getJSON</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> RespResult.success(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;FSAN&quot;</span>,<span class="hljs-string">&quot;FSAN&quot;</span>));<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/getBlo&quot;)</span><br><span class="hljs-keyword">public</span> RespResult <span class="hljs-title function_">getBlo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> RespResult.success(Boolean.TRUE);<br>&#125;<br></code></pre></td></tr></table></figure><p>统一封装后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getJson&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getJSON</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;FSAN&quot;</span>,<span class="hljs-string">&quot;FSAN&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/getBlo&quot;)</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBlo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Boolean.TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回类型明确，减少代码量，以上结果返回都为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;成功！&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FSAN&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FSAN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;成功！&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="未解决点"><a href="#未解决点" class="headerlink" title="未解决点"></a>未解决点</h2><p>在controller中如果直接返回String类型，返回的时候会报错转换失败，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/stringText&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">stringText</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;字符串类型测试&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>优雅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mp联表查询关键xml</title>
    <link href="/2022/04/18/mp%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AExml/"/>
    <url>/2022/04/18/mp%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AExml/</url>
    
    <content type="html"><![CDATA[<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;job&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Job&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;jobId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;job_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;j_create_time&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;j_update_time&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserDtoMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;UserDto&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;aClass&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.fas.entity.Class&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;classId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;class_id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_create_time&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_update_time&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云服务器中数据库时区错误</title>
    <link href="/2022/04/18/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E5%8C%BA%E9%94%99%E8%AF%AF/"/>
    <url>/2022/04/18/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E5%8C%BA%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>存入数据库的时间与当前时间不一致</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在mysql数据库中默认的时区为CST，这种时区非常混乱，有四种含义：</p><ol><li>美国中部时间 Central Standard Time (USA) UTC-06:00</li><li>澳大利亚中部时间 Central Standard Time (Australia) UTC+09:30</li><li>中国标准时 China Standard Time UTC+08:00</li><li>古巴标准时 Cuba Standard Time UTC-04:00</li></ol><p>为什么提到日期？因为美国从“3月11日”至“11月7日”实行夏令时，美国中部时间改为 UTC-05:00，与 UTC+08:00 相差 13 小时。</p><p>在java中获取MySQL中的时区，Java 会误以为是 CST -0500，而非 CST +0800</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global time_zone = &#x27;+08:00&#x27;<br>set time_zone = &#x27;+08:00&#x27;<br>flush privileges<br></code></pre></td></tr></table></figure><h2 id="一些查询"><a href="#一些查询" class="headerlink" title="一些查询"></a>一些查询</h2><p>查询mysql数据库时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select now() --yyyy-MM-dd HH:mm:ss<br>select sysdate()  --yyyy-MM-dd HH:mm:ss<br>select current_date  --yyyy-MM-dd<br></code></pre></td></tr></table></figure><p>查看数据库时区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;%time_zone%&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCSS基础使用</title>
    <link href="/2022/03/24/SCSS%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/24/SCSS%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="SCSS-介绍"><a href="#SCSS-介绍" class="headerlink" title="SCSS 介绍"></a>SCSS 介绍</h2><p>在了解scss之前先看看Sass：</p><h3 id="SASS-是什么"><a href="#SASS-是什么" class="headerlink" title="SASS 是什么"></a>SASS 是什么</h3><p>Sass 是一门高于 CSS 的元语言，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表。Sass 是采用 Ruby 语言编写的一款 <code>CSS 预处理语言</code>，它诞生于2007年，是最大的成熟的 CSS 预处理语言。最初它是为了配合HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。<code>SASS是CSS3的一个扩展</code>，增加了规则嵌套、变量、混合、选择器继承等等。通过使用命令行的工具或WEB框架插件把它转换成标准的、格式良好的CSS代码。</p><p>Sass官方网站：<a href="http://sass-lang.com/">http://sass-lang.com</a></p><h3 id="Scss是什么"><a href="#Scss是什么" class="headerlink" title="Scss是什么"></a>Scss是什么</h3><p>Scss 是 <code>Sass 3</code> 引入新的语法，是<code>Sassy CSS</code>的简写，是<code>CSS3语法的超集</code>，也就是说所有有效的CSS3样式也同样适合于Sass。说白了Scss就是Sass的升级版，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件。另外，SCSS 还能识别大部分 CSS hacks（一些 CSS 小技巧）和特定于浏览器的语法，例如：古老的 IE filter 语法。</p><p>由于 Scss 是 CSS 的扩展，因此，所有在 CSS 中正常工作的代码也能在 Scss 中正常工作。也就是说，对于一个 Sass 用户，只需要理解 Sass 扩展部分如何工作的，就能完全理解 Scss。大部分扩展，例如变量、parent references 和 指令都是一致的；唯一不同的是，SCSS 需要使用分号和花括号而不是换行和缩进。</p><blockquote><p>所以说，Scss就是Sass的升级版，为css3的超集</p></blockquote><h3 id="Scss-与-Sass异同"><a href="#Scss-与-Sass异同" class="headerlink" title="Scss 与 Sass异同"></a>Scss 与 Sass异同</h3><p>这两点的差别主要有以下两个方面</p><ol><li>文件扩展名不同，Sass是以“.sass”后缀为扩展名，而Scss是以“.scss”后缀为扩展名。</li><li>语法书写不同，Sass是以严格的缩进式语法规则来书写，不带大括号和分号，而Scss则和css的语法书写非常类似。</li></ol><h4 id="简单的Sass样式代码"><a href="#简单的Sass样式代码" class="headerlink" title="简单的Sass样式代码"></a>简单的Sass样式代码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#divBox</span><br><span class="hljs-attribute">width</span>: <span class="hljs-number">30%</span><br>font-size: <span class="hljs-number">13px</span><br></code></pre></td></tr></table></figure><h4 id="对应的Scss代码"><a href="#对应的Scss代码" class="headerlink" title="对应的Scss代码"></a>对应的Scss代码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#divBox</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30%</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SCSS的主要使用"><a href="#SCSS的主要使用" class="headerlink" title="SCSS的主要使用"></a>SCSS的主要使用</h2><h3 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h3><p>SCSS的入门就是使用嵌套选择器,SCSS 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器.</p><h4 id="简单嵌套"><a href="#简单嵌套" class="headerlink" title="简单嵌套"></a>简单嵌套</h4><p><strong>HTML：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Scss：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>嵌套功能避免了重复输入父选择器，而且令复杂的 CSS 结构更易于管理,还可以有更加复杂的嵌套</p></blockquote><h4 id="伪类样式的嵌套使用"><a href="#伪类样式的嵌套使用" class="headerlink" title="伪类样式的嵌套使用"></a>伪类样式的嵌套使用</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: green;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当我们需要给p标签加上伪类样式的时候，在scss中可以使用&amp;符号指代</p></blockquote><p><strong>编译后：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>scss最普遍的就是声明变量,然后在其他的文档中引入,这样方便修改整体的样式,声明变量的方式就是使用$来声明变量.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$red</span>: red;<br><span class="hljs-variable">$g</span>: green;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$red</span>;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-variable">$g</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面的代码中声明了两个变量<code>$red</code>和<code>$g</code>，分别是红色和绿色，然后再使用的时候，如css一样正常使用即可</p></blockquote><p>在scss中变量也是有作用域的，可以在变量后加上<code>!global</code>来把他变为全局变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-variable">$red</span>: <span class="hljs-number">#f60</span> !global;<br>    <span class="hljs-attribute">font</span>: &#123;<br>      size: <span class="hljs-number">34px</span>;<br>      family: <span class="hljs-string">&quot;Courier&quot;</span>;<br>      weight: bold;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$red</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="样式的运算"><a href="#样式的运算" class="headerlink" title="样式的运算"></a>样式的运算</h3><p>平常在css3中，使用的是<code>calc</code>来对不确定的css属性运算，但在scss中可以直接使用运算符，不需要加calc，但是一定要加上单位</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span> + <span class="hljs-number">100px</span> + <span class="hljs-number">100px</span>; <span class="hljs-comment">//加法</span><br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span> - <span class="hljs-number">100px</span> + <span class="hljs-number">100px</span>; <span class="hljs-comment">//减法</span><br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span> * <span class="hljs-number">100</span> //乘法,注scss的乘法和除法是带单位的<br>width: (<span class="hljs-number">100px</span>/<span class="hljs-number">3</span>)  //注意这里需要带括号,如果不带括号会当场分割数子<br>width: <span class="hljs-variable">$width</span> / <span class="hljs-number">3</span> //也可以不带括号,但是里面计算的一定要有声明的变量,因为这个语法css不认识,那么就会被解析成SCSS<br>width: <span class="hljs-number">100</span> % <span class="hljs-number">3px</span> //SCSS也支持取模运算<br></code></pre></td></tr></table></figure><h2 id="其他类似函数功能"><a href="#其他类似函数功能" class="headerlink" title="其他类似函数功能"></a>其他类似函数功能</h2><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>定义指令混入<code>@mixin </code>可以将定义的指令混入到一个元素的样式里面去,混入的方式是使用<code>@include</code> 来混入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> mix &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-keyword">@include</span> mix;<br>    <span class="hljs-attribute">color</span>: red;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: green;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中mixin还可以定义为函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> mix(<span class="hljs-variable">$width</span>) &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-variable">$width</span> solid red;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-keyword">@include</span> mix(<span class="hljs-number">2px</span>);<br>    <span class="hljs-attribute">color</span>: red;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: green;<br>      <span class="hljs-keyword">@include</span> mix(<span class="hljs-number">6px</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="placeholder（建议了解就好）"><a href="#placeholder（建议了解就好）" class="headerlink" title="placeholder（建议了解就好）"></a>placeholder（建议了解就好）</h3><h2 id="webstorm中自动编译"><a href="#webstorm中自动编译" class="headerlink" title="webstorm中自动编译"></a>webstorm中自动编译</h2><h3 id="下载scss"><a href="#下载scss" class="headerlink" title="下载scss"></a>下载scss</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i scss -g<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入 File&gt;Settings&gt;Tools&gt;File Watcher ，添加scss编译，全默认就行</p><h2 id="vueCli中使用"><a href="#vueCli中使用" class="headerlink" title="vueCli中使用"></a>vueCli中使用</h2><p>先下载sass的包sass-loader，又因为sass-loader需要依赖node-sass，所以我们需要装两个</p><blockquote><p>版本要求：</p><p>sass-loader和node-sass对node的版本要求极其严格，三个版本都要对应上，这里提供一组版本：</p><p><code>nodejs: 16</code></p><p><code>node-sass: ^6.0.1</code></p><p><code>sass-loader: ^10.0.1</code></p><p>^ 这个表示则大版本不变的情况下使用最高版本，最低不低于指定版本</p></blockquote><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D node-sass@^6.0.1 sass-loader@^10.0.1<br><span class="hljs-comment"># or</span><br>yarn add node-sass@^6.0.1 sass-loader@^10.0.1<br></code></pre></td></tr></table></figure><blockquote><p>如果下载失败的话，先清理下编译文件，还不行就直接下载默认最新版，然后在包管理中修改版本重新下载依赖即可</p></blockquote><h3 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss">&lt;style lang=&quot;scss&quot; scoped&gt;<br>  <span class="hljs-selector-class">.loginBg</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br><br>    <span class="hljs-selector-class">.loginBox</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;<br>    &#125;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><blockquote><p>使用的时候，直接在style标签中加上<code>lang=&quot;scss&quot;</code>即可</p></blockquote><h3 id="新版使用"><a href="#新版使用" class="headerlink" title="新版使用"></a>新版使用</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>在某一天啊，我下载依赖，很快啊，就是一堆的gyp报错，原因看了半天，发现又是node-sass的版本对应问题，查阅资料发现，原来sass的官网已经将node-sass标记为过期版本了，已经被dart-sass代替了</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>编译方式<ul><li>node-sass 是用 node(调用 cpp 编写的 libsass)来编译 sass，所以这就是对node版本有要求的原因；</li><li>dart-sass 是用 drat VM 来编译 sass</li></ul></li><li>生效方式<ul><li>node-sass是自动编译实时的</li><li>dart-sass需要保存后才会生效</li></ul></li></ol><p>推荐 dart-sass 性能更好（也是 sass 官方使用的），而且 node-sass 因为国情问题经常装不上</p><h4 id="替换步骤"><a href="#替换步骤" class="headerlink" title="替换步骤"></a>替换步骤</h4><ol><li>先卸载<code>node-sass</code></li><li>安装<code>sass</code>即可</li></ol><blockquote><p>按照名字来看，不是应该装<code>dart-sass</code>吗，其实<code>dart-sass</code>只是官方为了区别<code>node-sass</code>而起的名字，在下载时的模块名就是<code>sass</code></p></blockquote><h5 id="卸载node-sass："><a href="#卸载node-sass：" class="headerlink" title="卸载node-sass："></a>卸载node-sass：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm uninstall node-sass -D<br><span class="hljs-comment"># or</span><br>yarn remove node-sass<br></code></pre></td></tr></table></figure><blockquote><p>使用npm卸载需要加上版本号，如<code>node-sass@^6.0.1</code></p></blockquote><h5 id="安装sass："><a href="#安装sass：" class="headerlink" title="安装sass："></a>安装sass：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i sass -D<br><span class="hljs-comment"># or</span><br>yarn add sass<br></code></pre></td></tr></table></figure><h3 id="总结步骤："><a href="#总结步骤：" class="headerlink" title="总结步骤："></a>总结步骤：</h3><ol><li>安装sass-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add sass-loader<br></code></pre></td></tr></table></figure><ol start="2"><li>安装sass</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add sass<br></code></pre></td></tr></table></figure><h2 id="vite中使用"><a href="#vite中使用" class="headerlink" title="vite中使用"></a>vite中使用</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>在上面的vueCli中使用需要安装<code>sass-loader</code>和<code>sass</code>，但是在vite中只要安装<code>sass</code>即可</p><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i sass -D<br><span class="hljs-comment"># or</span><br>yarn add sass<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/2022/03/22/SpringSecurity/"/>
    <url>/2022/03/22/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringSecurity介绍"><a href="#SpringSecurity介绍" class="headerlink" title="SpringSecurity介绍"></a>SpringSecurity介绍</h2><p>spring security是spring家族中的一个安全管理框架，相对与另外一个安全框架shiro，提供了更丰富的功能（shiro上手更加简单）</p><p>一般web应用都需要进行认证和授权：</p><ol><li>认证（验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户）</li><li>授权（经过认证后判断当前哟怒是否有权限进行某个操作）</li></ol><p>而认证和授权也是spring security作为安全框架的核心功能。</p><h2 id="请求到security内部执行的流程"><a href="#请求到security内部执行的流程" class="headerlink" title="请求到security内部执行的流程"></a>请求到security内部执行的流程</h2><p>spring security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器（Filter）。</p><h3 id="请求过程："><a href="#请求过程：" class="headerlink" title="请求过程："></a>请求过程：</h3><p>请求 —&gt;  经过<code>UsernamePasswordAuthenticationFilter</code>—&gt; 经过<code>ExceptionTranslationFilter </code>—&gt; 经过<code>FilterSecurityInterceptor</code> —&gt; API</p><blockquote><p>UsernamePasswordAuthenticationFilter（表单登录过滤器）</p><blockquote><p>负责处理我们再登录页面填写了用户名密码后的登录请求。</p></blockquote><p>ExceptionTranslationFilter（统一异常处理过滤器）</p><blockquote><p>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException.</p></blockquote><p>FilterSecurityInterceptor（过滤器链中最后一个过滤器，负责权限校验）</p><blockquote><p>获取当前request对应的权限配置</p><p>调用访问控制器进行鉴权操作等核心功能</p></blockquote></blockquote><h3 id="响应过程"><a href="#响应过程" class="headerlink" title="响应过程"></a>响应过程</h3><p>响应也是需要再反过来走一遍过滤器的</p><p>APi —&gt; 经过<code>FilterSecurityInterceptor</code> —&gt; 经过<code>ExceptionTranslationFilter</code> —&gt; 经过<code>UsernamePasswordAuthenticationFilter</code> —&gt; 响应</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h3 id="登录："><a href="#登录：" class="headerlink" title="登录："></a>登录：</h3><ol><li>自定义登录接口<ol><li>调用<code>ProviderManager</code>的方法进行认证，通过则生成jwt返回</li><li>把用户信息存入redis（先<code>序列化redis</code>）</li></ol></li><li>自定义类实现<code>UserDetailsService</code>，将认证过程改为数据库查询（配合<code>LambdaQueryWrapper</code>）</li></ol><blockquote><p>ProviderManager 是 spring security提供的<code>AuthenticationManager</code>实现。其主要目的，也就是实现AuthenticationManager接口所定义的方法。</p><p>序列化redis：使用fastjson修改序列化redis，使其存入和取出的样式统一，具体代码可以cv</p><p>LambdaQueryWrapper：<code>mybatis-plus</code>中使用<code>lambda</code>表达式写条件查询</p></blockquote><h3 id="校验："><a href="#校验：" class="headerlink" title="校验："></a>校验：</h3><ol><li>定义<code>jwt</code>认证过滤器<ol><li>获取token</li><li>解析token获取其中的userId</li><li>使用userId从redis中查询用户信息</li><li>存入<code>SecurityContextHolder</code>供后续过滤器调用</li></ol></li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>启动springboot项目，引入redis，security</li><li>导入redis工具类（见redis使用fastjson序列化）</li><li>导入jwt和对应工具类（见jjwt工具类）</li><li>导入mybatis-plus</li><li>配置yml连接mysql和redis</li><li>在yml修改security用户名和密码</li></ol><h2 id="数据库校验用户"><a href="#数据库校验用户" class="headerlink" title="数据库校验用户"></a>数据库校验用户</h2><h3 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h3><p>创建RBAC数据库结构，写对应的实体类（使用@TableName可以mybatis-plus映射指定数据表，并不需要表名一致）</p><h3 id="写一个类实现UserDetailsService，重写loadUserByUsername"><a href="#写一个类实现UserDetailsService，重写loadUserByUsername" class="headerlink" title="写一个类实现UserDetailsService，重写loadUserByUsername"></a>写一个类实现UserDetailsService，重写loadUserByUsername</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.mapper.SysUserMapper;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserMapper sysUserMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br><br><span class="hljs-comment">//         炫技写法：可读性没有下面好</span><br><span class="hljs-comment">//        List&lt;User&gt; user = new LambdaQueryChainWrapper&lt;&gt;(sysUserMapper)</span><br><span class="hljs-comment">//                .eq(User::getUserName, username)</span><br><span class="hljs-comment">//                .list();</span><br><br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUserName, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> sysUserMapper.selectOne(queryWrapper);<br><br>        <span class="hljs-comment">// 如果没有查询到用户就抛出异常</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或者密码错误！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// TODO 查询对应的权限信息</span><br><br>        <span class="hljs-comment">// TODO 将数据封装为UserDetails返回</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这是使用的条件包装器为LambdaQueryWrapper，并不是传统的QueryWrapper，LambdaQueryWrapper更好用</p><p>使用 Objects.isNull(user) 判断对象是否为空</p><p>QueryWrapper到LambdaQueryWrapper的演变见 <a href="https://blog.csdn.net/qlzw1990/article/details/116996422">https://blog.csdn.net/qlzw1990/article/details/116996422</a></p></blockquote><p>因为loadUserByUsername返回的是UserDetails类型数据，创建一个实体类实现UserDetails，将所有方法重写，并改为返回true</p><h3 id="创建一个实体类实现UserDetails"><a href="#创建一个实体类实现UserDetails" class="headerlink" title="创建一个实体类实现UserDetails"></a>创建一个实体类实现UserDetails</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserName();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * true表示没过期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否可用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里的getUsername和getPassword要改为User实体类的提供的方法，否则数据存入之后，调用getUsername拿取不到这里的getUsername和getPassword要改为User实体类的提供的方法，否则数据存入之后，调用getUsername拿取不到</p></blockquote><p>在<code>loadUserByUsername</code>中调用mybatis-plus查询数据库，返回的类型为<code>UserDetails</code>对象，但是LoginUser已经对UserDetails类重写了，所以直接<code>返回LoginUser对象</code>即可，直接传入查询到的User类型的数据:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.mapper.SysUserMapper;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.LoginUser;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserMapper sysUserMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br><br><span class="hljs-comment">//         炫技写法：可读性没有下面好</span><br><span class="hljs-comment">//        List&lt;User&gt; user = new LambdaQueryChainWrapper&lt;&gt;(sysUserMapper)</span><br><span class="hljs-comment">//                .eq(User::getUserName, username)</span><br><span class="hljs-comment">//                .list();</span><br><br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUserName, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> sysUserMapper.selectOne(queryWrapper);<br><br>        <span class="hljs-comment">// 如果没有查询到用户就抛出异常</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或者密码错误！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// TODO 查询对应的权限信息</span><br><br>        <span class="hljs-comment">// 将数据封装为UserDetails返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="密码加密校验"><a href="#密码加密校验" class="headerlink" title="密码加密校验"></a>密码加密校验</h2><p>返回的<code>UserDetails</code>对象会经过权限过滤器，在权限过滤器中判断输入的用户名，密码和<code>UserDetails</code>中存储的用户名密码，但是<code>UserDetails</code>对象中默认的密码格式为：<code>&#123;id&#125;password</code>，security会根据id判断密码的加密方式，我们一般不会采用默认的方式，所以就需要将<code>PasswordEncoder</code>替换为<code>BCryptPasswordEncoder</code></p><h3 id="测试BCryptPasswordEncoder类的加密和判断："><a href="#测试BCryptPasswordEncoder类的加密和判断：" class="headerlink" title="测试BCryptPasswordEncoder类的加密和判断："></a>测试BCryptPasswordEncoder类的加密和判断：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 字符串加密：</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;FSAN&quot;</span>)    <span class="hljs-comment">//$2a$10$k8s4LDg6q.QhotMfb/jWCO/fu7nYvAalQveRfwMXj6FVy9/84Mg7G</span><br>    <br><span class="hljs-comment">// 字符串解析，是否和同字符串</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().matches(<span class="hljs-string">&quot;FSAN&quot;</span>, <span class="hljs-string">&quot;$2a$10$qNin1NOP265Zqme378882uxos.haI3Da9JCi3gPg65GOHb/5t1oGO&quot;</span>)  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><blockquote><p>对一个字符串，重复使用加密后也是不同的，内部是随机加盐生成的</p></blockquote><h3 id="定义一个Security的配置类，继承WebSecurityConfigurerAdapter，注入BCryptPasswordEncoder"><a href="#定义一个Security的配置类，继承WebSecurityConfigurerAdapter，注入BCryptPasswordEncoder" class="headerlink" title="定义一个Security的配置类，继承WebSecurityConfigurerAdapter，注入BCryptPasswordEncoder"></a>定义一个Security的配置类，继承WebSecurityConfigurerAdapter，注入BCryptPasswordEncoder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也算是使用@Bean修改passwordEncoder</p><p>直接@Autowired注入使用passwordEncoder.encode(“FSAN”)</p></blockquote><h2 id="security配置"><a href="#security配置" class="headerlink" title="security配置"></a>security配置</h2><ol><li>关闭csrf</li><li>不使用session获取SecurityContent</li><li>配置不登录就可以访问的接口（匿名登陆）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">// 关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">// 不使用session获取securityContent</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许不登陆使用（允许匿名访问）</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注入AuthenticationManager权限管理"><a href="#注入AuthenticationManager权限管理" class="headerlink" title="注入AuthenticationManager权限管理"></a>注入AuthenticationManager权限管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重写一次AuthenticationManager再使用<span class="hljs-doctag">@Bean</span>注入即可</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写登录的controller和service"><a href="#写登录的controller和service" class="headerlink" title="写登录的controller和service"></a>写登录的controller和service</h2><p><strong>controller:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.controller;<br><br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.ResponseResult;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.User;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.service.impl.LoginServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginServiceImpl loginService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录请求应该是post请求，数据在请求体中json传递</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/user/login&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> loginService.login(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>service:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.service.impl;<br><br><span class="hljs-keyword">import</span> com.fsan.springsecurity.Utils.JwtUtil;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.LoginUser;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.ResponseResult;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.User;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.service.LoginService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// AuthenticationManager authenticate 进行用户认证</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(), user.getPassword());<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticate</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(authenticationToken);<br><br>        <span class="hljs-comment">// 如果认证没通过，给出相应的提示</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(authenticate)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;登录失败！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 如果认证通过了，先使用UserDetail类型接收，再使用userId生成一个jwt，jwt存入ResponseResult进行返回</span><br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authenticate.getPrincipal();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> loginUser.getUser().getId().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtil.createJWT(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-number">10</span>, userId);<br>        <span class="hljs-comment">// 把完整的用户信息存入redis，userId作为key，使用传入键值对</span><br>        HashMap&lt;String, String&gt; dataMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        dataMap.put(<span class="hljs-string">&quot;token&quot;</span>, token);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(<span class="hljs-number">200</span>, dataMap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用注入的authenticationManager的authenticate方法传入一个AuthenticationManager类型</p><p>使用<code>UsernamePasswordAuthenticationToken</code>，传入用户名和密码即可</p><p><code>authenticate.getPrincipal()</code>可以拿取UserDetails类型数据，因为之前的LoginUser实体类已经实现了UserDetails，可以直接接收，使用（LoginUser）指定类型</p><p>loginUser.getUser().getId() 拿取登录用户的id，使用jwt的工具类以用户的id生成唯一密钥为”token”，过期时间为10分钟的token</p><p>将返回的消息封装返回，使用map可以使data如{token: ‘token’}这种格式</p></blockquote><h2 id="到此用户登录请求完毕，开始做jwt过滤器"><a href="#到此用户登录请求完毕，开始做jwt过滤器" class="headerlink" title="到此用户登录请求完毕，开始做jwt过滤器"></a>到此用户登录请求完毕，开始做jwt过滤器</h2><p>jwt过滤器主要的功能是接收前端放在请求头的token，使用token获取用户信息，存入<code>SecurityContextHolder</code>供后续模块调用</p><h3 id="定义过滤器"><a href="#定义过滤器" class="headerlink" title="定义过滤器"></a>定义过滤器</h3><ol><li>建立filter 下 JwtAuthenticationTokenFilter文件</li><li>继承OncePerRequestFilter重写doFilterInternal方法</li></ol><p><strong>需要实现的操作:</strong></p><ol><li>获取请求过来携带的token</li><li>解析token</li><li>向redis获取用户信息</li><li>将用户信息存入SecurityContextHolder</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.filter;<br><br><span class="hljs-keyword">import</span> com.fsan.springsecurity.Utils.JwtUtil;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.Utils.RedisUtil;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.LoginUser;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtil redisUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取请求中的token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!StringUtils.hasText(token)) &#123;<br>            <span class="hljs-comment">// token不存在，放行，因为后面也有检测token，但是一定要加上return</span><br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 解析token</span><br>        String userId;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(<span class="hljs-string">&quot;token&quot;</span>, token);<br>            userId = claims.getSubject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;token非法！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 从redis中获取用户信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;login:&quot;</span> + userId;<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) redisUtil.getCacheObject(redisKey);<br>        <span class="hljs-comment">// 判断loginUser是否存在</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(loginUser)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户未登录！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// TODO 获取权限信息，封装到UsernamePasswordAuthenticationToken</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 存入SecurityContextHolder</span><br><span class="hljs-comment">         * 需要一个Authentication类型，使用UsernamePasswordAuthenticationToken封装即可，但注意需要使用三个参数，添加认证状态为true</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br><br>        <span class="hljs-comment">// 一切存完之后放行，访问下一个过滤器</span><br>        filterChain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>request.getHeader(“token”)  这里是取了请求头中token属性的值，但是没有的话就要判断</p><p>!StringUtils.hasText(token)  判断token是否存在</p><p>JwtUtil.parseJWT(“token”, token)  第一个token是我设置的加密密钥</p><p>claims.getSubject()  使用getSubject方法获取解密之后的值，也就是之前加密的userId</p></blockquote><h3 id="在security配置类中添加这个过滤器"><a href="#在security配置类中添加这个过滤器" class="headerlink" title="在security配置类中添加这个过滤器"></a>在security配置类中添加这个过滤器</h3><p>添加一个过滤器要指定两个参数</p><ol><li>添加的Filter类（过滤器类）</li><li>在哪个位置添加</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">// 关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">// 不使用session获取securityContent</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许不登陆使用（允许匿名访问）</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated()<br><br>            <span class="hljs-comment">// 添加请求过滤器</span><br>            .and()<br>            .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在UsernamePasswordAuthenticationFilter过滤器之前添加</p><p>这是一个请求判断的过滤器，所以要放在前面</p></blockquote><h2 id="授权实现"><a href="#授权实现" class="headerlink" title="授权实现"></a>授权实现</h2><h3 id="授权基本流程"><a href="#授权基本流程" class="headerlink" title="授权基本流程"></a>授权基本流程</h3><p>在SpringSecurity中，会使用默认的<code>FilterSecurityInterceptor</code>来进行权限校验。在FilterSecurityInterceptor中会从<code>SecurityContextHolder</code>获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>所以我们在项目中只需要把当前登录用户的权限信息也<code>存入Authentication</code>。</p><p>然后设置我们的资源所需要的权限即可。</p><h3 id="配置类中配置开启权限控制方案"><a href="#配置类中配置开启权限控制方案" class="headerlink" title="配置类中配置开启权限控制方案"></a>配置类中配置开启权限控制方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br></code></pre></td></tr></table></figure><h3 id="使用-PreAuthorize定义方法所需要的权限"><a href="#使用-PreAuthorize定义方法所需要的权限" class="headerlink" title="使用@PreAuthorize定义方法所需要的权限"></a>使用@PreAuthorize定义方法所需要的权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>hasAuthority 这里去调用这个方法判断是否有这个权限，现在是写死的</p></blockquote><h3 id="封装权限信息"><a href="#封装权限信息" class="headerlink" title="封装权限信息"></a>封装权限信息</h3><p>由于LoginUser中只写了User字段，现在要存权限要加上一个List类型的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permissions;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br><br>        <span class="hljs-comment">// 把permissions中的String类型转为SimpleGrantedAuthority</span><br><br>        <span class="hljs-comment">// 方法一：（使用for循环遍历permissions，再使用SimpleGrantedAuthority对象创建）</span><br><span class="hljs-comment">//        List&lt;GrantedAuthority&gt; newList = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        for (String permission : permissions) &#123;</span><br><span class="hljs-comment">//            SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(permission);</span><br><span class="hljs-comment">//            newList.add(simpleGrantedAuthority);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">// 方法二：（使用集合流的形式将集合中String类型转为GrantedAuthority的实现类SimpleGrantedAuthority）</span><br>        List&lt;SimpleGrantedAuthority&gt; newList = permissions.stream()<br>                .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)<br>                .collect(Collectors.toList());<br><br>        <span class="hljs-keyword">return</span> newList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserName();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * true表示没过期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否可用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>security在从实体类拿出权限列表的时候，使用的是getAuthorities方法，返回值为GrantedAuthority的集合类型，所以要在返回前将集合中字符串转为实现GrantedAuthority的SimpleGrantedAuthority类型</p><p>stream()  转为集合流</p><p>collect(Collectors.toList())  固定写法，将Stream流转为List对象</p><p>map(SimpleGrantedAuthority::new)  将每一个List对象转为map中设置的返回结果</p><ul><li>如map(Person::getName) 即是将原List中的字符串转为Person类中的getName返回值，所以结果为存储Person类型的列表对象，使用getName获取原List元素</li><li>简单理解：map中指定转化后的类型和对原List元素的放置</li></ul><p>取名为 permissions</p></blockquote><p><strong>但是这样权限的列表每次取出都需要序列化，所以优化如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JSONField(serialize = false)</span>    <br><span class="hljs-keyword">private</span> List&lt;SimpleGrantedAuthority&gt; authorities;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br><br>    <span class="hljs-keyword">if</span> (authorities != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br>    <span class="hljs-comment">// 把permissions中的String类型转为SimpleGrantedAuthority</span><br><br>    <span class="hljs-comment">// 方法一：（使用for循环遍历permissions，再使用SimpleGrantedAuthority对象创建）</span><br>    <span class="hljs-comment">//        List&lt;GrantedAuthority&gt; newList = new ArrayList&lt;&gt;();</span><br>    <span class="hljs-comment">//        for (String permission : permissions) &#123;</span><br>    <span class="hljs-comment">//            SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(permission);</span><br>    <span class="hljs-comment">//            newList.add(simpleGrantedAuthority);</span><br>    <span class="hljs-comment">//        &#125;</span><br><br>    <span class="hljs-comment">// 方法二：（使用集合流的形式将集合中String类型转为GrantedAuthority的实现类SimpleGrantedAuthority）</span><br>    authorities = permissions.stream()<br>        .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)<br>        .collect(Collectors.toList());<br><br>    <span class="hljs-keyword">return</span> authorities;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>定义一个属性用来存转换后的权限列表，当有值时直接返回即可</p><p>但是这样在存入redis时，<code>List&lt;SimpleGrantedAuthority&gt;这种类型是无法存入</code>的，需要加上<code>@JSONField(serialize = false)</code>表示无需序列化</p></blockquote><h3 id="从数据库查询权限信息"><a href="#从数据库查询权限信息" class="headerlink" title="从数据库查询权限信息"></a>从数据库查询权限信息</h3><p>创建RBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用，通用的权限模型</p><p>创建以下五个数据表</p><ol><li>用户表（user）</li><li>权限表（menu）</li><li>角色表（role）</li><li>角色权限关联表（role_menu）</li><li>用户角色关联表（user_role）</li></ol><p><strong>sql联表根据用户id查询权限:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">DISTINCT</span> m.perms<br><span class="hljs-keyword">FROM</span><br>sys_user_role ur<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sys_role r <span class="hljs-keyword">ON</span> ur.role_id <span class="hljs-operator">=</span> r.id<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sys_role_menu rm <span class="hljs-keyword">ON</span> ur.role_id <span class="hljs-operator">=</span> rm.role_id<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sys_menu m <span class="hljs-keyword">ON</span> m.id <span class="hljs-operator">=</span> rm.menu_id <br><span class="hljs-keyword">WHERE</span><br>user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">AND</span> r.`status` <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <br><span class="hljs-keyword">AND</span> m.`status` <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><blockquote><p>distinct 排除重复项（因为一个用户可能有多个角色，每个角色的权限会有重复）</p></blockquote><h2 id="菜单表的实体类"><a href="#菜单表的实体类" class="headerlink" title="菜单表的实体类"></a>菜单表的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.pojo;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 菜单表（Menu）实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@TableName(value = &quot;sys_menu&quot;)</span><br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">54979041104113736L</span>;<br><br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">// 菜单名</span><br>    <span class="hljs-keyword">private</span> String menuName;<br>    <span class="hljs-comment">// 路由地址</span><br>    <span class="hljs-keyword">private</span> String path;<br>    <span class="hljs-comment">// 组件地址</span><br>    <span class="hljs-keyword">private</span> String component;<br>    <span class="hljs-comment">// 菜单状态（0显示 1隐藏）</span><br>    <span class="hljs-keyword">private</span> String visible;<br>    <span class="hljs-comment">// 菜单状态（0正常 1停用）</span><br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-comment">// 菜单图标</span><br>    <span class="hljs-keyword">private</span> String icon;<br><br>    <span class="hljs-keyword">private</span> Long createBy;<br><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-keyword">private</span> Long updateBy;<br><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-comment">// 是否删除（0未删除 1已删除）</span><br>    <span class="hljs-keyword">private</span> Integer delFlag;<br>    <span class="hljs-comment">// 备注</span><br>    <span class="hljs-keyword">private</span> String remark;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现Serializable类表示该类可以序列化，必须要加上serialVersionUID属性</p></blockquote><h3 id="使用mybatis-plus自定义配置实现多表联查"><a href="#使用mybatis-plus自定义配置实现多表联查" class="headerlink" title="使用mybatis plus自定义配置实现多表联查"></a>使用mybatis plus自定义配置实现多表联查</h3><ol><li>创建MenuMapper</li><li>创建配置文件</li><li>在spring配置文件中指定mapper配置的地址</li></ol><p><strong>创建MenuMapper:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.fsan.springsecurity.pojo.Menu;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MenuMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Menu&gt; &#123;<br>    List&lt;String&gt; <span class="hljs-title function_">selectPermsByUserId</span><span class="hljs-params">(Long userid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建配置文件(resources.mapper.MenuMapper.xml)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.fsan.springsecurity.mapper.MenuMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPermsByUserId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>      SELECT<br>         DISTINCT m.perms<br>      FROM<br>         sys_user_role ur<br>         LEFT JOIN sys_role r ON ur.role_id = r.id<br>         LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id<br>         LEFT JOIN sys_menu m ON m.id = rm.menu_id<br>      WHERE<br>         user_id = #&#123;userid&#125;<br>         AND r.`status` = 0<br>         AND m.`status` = 0<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>只要将之前写的多表联查语句放上修改用户id即可 #{userid}</p><p>id mapper中方法名</p></blockquote><p><strong>在spring配置文件中指定mapper配置的地址</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:/mapper/**/*.xml</span><br></code></pre></td></tr></table></figure><blockquote><p>这里查看源码发现默认就是classpath*:&#x2F;mapper&#x2F;**&#x2F;*.xml，所以创建mapper下的配置文件的时候，不定义也没事</p></blockquote><h3 id="在UserDetails中获取权限"><a href="#在UserDetails中获取权限" class="headerlink" title="在UserDetails中获取权限"></a>在UserDetails中获取权限</h3><p><strong>先写测试类获取权限列表：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectPermsByUserId</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(menuMapper.selectPermsByUserId(<span class="hljs-number">1L</span>));<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用的userid为Long类型，最后加上 L</p><p>获取数据列表没有问题之后，加入UserDetailsService</p></blockquote><p><strong>整合进UserDetailsService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br><br><span class="hljs-comment">//         炫技写法：可读性没有下面好</span><br><span class="hljs-comment">//        List&lt;User&gt; user = new LambdaQueryChainWrapper&lt;&gt;(sysUserMapper)</span><br><span class="hljs-comment">//                .eq(User::getUserName, username)</span><br><span class="hljs-comment">//                .list();</span><br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUserName, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> sysUserMapper.selectOne(queryWrapper);<br>        <span class="hljs-comment">// 如果没有查询到用户就抛出异常</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(user)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户不存在！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 查询对应的权限信息</span><br><span class="hljs-comment">//        List&lt;String&gt; authList = Arrays.asList(&quot;test&quot;,&quot;admin&quot;);</span><br>        List&lt;String&gt; authList = menuMapper.selectPermsByUserId(user.getId());<br><br>        <span class="hljs-comment">// 将数据封装为UserDetails返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user, authList);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>之前使用的是假数据，现在改为获取权限列表之后，在controller处修改真实限制</p></blockquote><p><strong>在controller处修改真实限制：（以测试为例）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;system:test:list&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h2><p>除了直接使用security的hasAuthority, hasAnyAuthority, 等权限校验方法，我们还可以自定义权限校验方法，实现复杂的权限校验</p><h3 id="创建自定义权限类"><a href="#创建自定义权限类" class="headerlink" title="创建自定义权限类"></a>创建自定义权限类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;hasMyAuth&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPreAuth</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAuthority</span><span class="hljs-params">(String authority)</span> &#123;<br>        <span class="hljs-comment">// 获取当前用户的权限</span><br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginuser</span> <span class="hljs-operator">=</span> (LoginUser) authentication.getPrincipal();<br>        List&lt;String&gt; list = loginuser.getPermissions();<br><br>        <span class="hljs-comment">// 判断用户权限集合中是否存在authority</span><br>        <span class="hljs-keyword">return</span> list.contains(authority);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过jwt过滤器存的SecurityContextHolder中拿到当前登录用户的权限列表</p><p>getPermissions方法是上面封装的没有转类型的权限数据</p><p>@Component(“hasMyAuth”) 对注入spring容器的bean取别名，方便下一步调用</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@hasMyAuth.hasAuthority(&#x27;system:test:list&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在SPEL表达式中使用@ 获取容器中bean的别名对象，然后再调用这个对象类的方法</p></blockquote><h2 id="数据库联表知识"><a href="#数据库联表知识" class="headerlink" title="数据库联表知识"></a>数据库联表知识</h2><h3 id="MySql-LEFT-JOIN（左连接）"><a href="#MySql-LEFT-JOIN（左连接）" class="headerlink" title="MySql LEFT JOIN（左连接）"></a>MySql LEFT JOIN（左连接）</h3><p>left join 子句允许您从两个或多个数据库表查询数据。left join子句是select语句的可选部分，出现在form子句之后。</p><p>假设需要从t1，t2查询数据。以下语句说明了连接两个表的left join子句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    t1.c1, t1.c2, t2.c1, t2.c2<br><span class="hljs-keyword">FROM</span><br>    t1<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br>    t2 <span class="hljs-keyword">ON</span> t1.c1 <span class="hljs-operator">=</span> t2.c1<br></code></pre></td></tr></table></figure><blockquote><p>连接条件则是t1.c1 &#x3D; t2.c1</p><p>讲的通俗一点就是：t2表的满足t1.c1 &#x3D; t2.c1的部分在查询时加入了t1表</p></blockquote><h3 id="更多用法："><a href="#更多用法：" class="headerlink" title="更多用法："></a>更多用法：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>c.customerNumber, customerName, orderNumber, status <br><span class="hljs-keyword">FROM</span><br>customers c<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> c.customerNumber <span class="hljs-operator">=</span> o.customerNumber<br></code></pre></td></tr></table></figure><p>在以上子句中将customers数据表取别名为c，两个字段一致，则可以写作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>c.customerNumber, customerName, orderNumber, status <br><span class="hljs-keyword">FROM</span><br>customers c<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">USING</span> (customerNumber)<br></code></pre></td></tr></table></figure><blockquote><p>using 使用</p></blockquote><h2 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h2><p>如果是认证过程出现的异常会被封装成AuthenticationException然后调用AuthenticationEntryPoint对象的方法取进行异常处理。</p><p>如果是授权过程中出想的异常会被封装成AccessDeniedException然后调用AccessDeniedHandler对象的方法取进行异常处理。</p><p>所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可</p><h3 id="实现AuthenticationEntryPoint完成认证失败的错误处理"><a href="#实现AuthenticationEntryPoint完成认证失败的错误处理" class="headerlink" title="实现AuthenticationEntryPoint完成认证失败的错误处理"></a>实现AuthenticationEntryPoint完成认证失败的错误处理</h3><ol><li>创建handler下的<code>AuthenticationEntryPointImpl</code></li><li>实现<code>AuthenticationEntryPoint</code>，重写<code>commence</code>方法</li><li>通过设置响应体来将字符串渲染到客户端</li></ol><p><strong>WebUtils:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.Utils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将字符串渲染到客户端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 渲染对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string 待渲染的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">renderString</span><span class="hljs-params">(HttpServletResponse response, String string)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            response.setStatus(<span class="hljs-number">200</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.getWriter().print(string);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>AuthenticationEntryPointImpl:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationEntryPointImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(HttpStatus.UNAUTHORIZED.value(),<span class="hljs-string">&quot;用户认证失败，请重新登录！&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 处理异常</span><br>        WebUtils.renderString(response, json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>HttpStatus这个枚举类直接指定401报错，记得使用value拿到401</p><p>将ResponseResult转为json字符串然后使用WebUtils的响应体返回客户端</p><p>这里的JSON.toJSONString是fastjson</p><p>404 肯定为请求地址写错了</p></blockquote><h3 id="实现AccessDeniedHandler完成权限不足的错误处理"><a href="#实现AccessDeniedHandler完成权限不足的错误处理" class="headerlink" title="实现AccessDeniedHandler完成权限不足的错误处理"></a>实现AccessDeniedHandler完成权限不足的错误处理</h3><ol><li>创建handler下的AccessDeniedHandlerImpl</li><li>实现AccessDeniedHandler，重写handle方法</li><li>设置响应体来返回字符串给客户端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDeniedHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(HttpStatus.FORBIDDEN.value(),<span class="hljs-string">&quot;您的权限不足！&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 处理异常</span><br>        WebUtils.renderString(response, json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>权限不足的错误处理其实和上面的认证失败一样，只是认证失败使用的是401，权限不足返回的错误为403</p></blockquote><h3 id="在security配置类中配置异常处理器"><a href="#在security配置类中配置异常处理器" class="headerlink" title="在security配置类中配置异常处理器"></a>在security配置类中配置异常处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">// 关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">// 不使用session获取securityContent</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许不登陆使用（允许匿名访问）</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated();<br><br>    <span class="hljs-comment">// 添加请求过滤器</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br><br>    <span class="hljs-comment">// 配置异常处理器</span><br>    http.exceptionHandling()<br>            .authenticationEntryPoint(authenticationEntryPoint)<br>            .accessDeniedHandler(accessDeniedHandler);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决security跨域"><a href="#解决security跨域" class="headerlink" title="解决security跨域"></a>解决security跨域</h2><p>非常简单，在配置类中使用cors方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">// 关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">// 不使用session获取securityContent</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许不登陆使用（允许匿名访问）</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated();<br><br>    <span class="hljs-comment">// 添加请求过滤器</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br><br>    <span class="hljs-comment">// 配置异常处理器</span><br>    http.exceptionHandling()<br>            .authenticationEntryPoint(authenticationEntryPoint)<br>            .accessDeniedHandler(accessDeniedHandler);<br><br>    <span class="hljs-comment">// 允许跨域</span><br>    http.cors();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用权限配置权限控制"><a href="#使用权限配置权限控制" class="headerlink" title="使用权限配置权限控制"></a>使用权限配置权限控制</h2><p>在方法上使用注解，在有很多方法需要控制的时候，查找比较麻烦，所以可以在security的配置类中配置全部方法的一个权限情况，方便管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">// 关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">// 不使用session获取securityContent</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许不登陆使用（允许匿名访问）</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <br>            <span class="hljs-comment">// 添加权限控制</span><br>            .antMatchers(<span class="hljs-string">&quot;/test&quot;</span>).hasAuthority(<span class="hljs-string">&quot;system:dept:list&quot;</span>)<br>            <br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated();<br><br>    <span class="hljs-comment">// 添加请求过滤器</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br><br>    <span class="hljs-comment">// 配置异常处理器</span><br>    http.exceptionHandling()<br>            .authenticationEntryPoint(authenticationEntryPoint)<br>            .accessDeniedHandler(accessDeniedHandler);<br><br>    <span class="hljs-comment">// 允许跨域</span><br>    http.cors();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在这个方法中直接传入要控制的路径，后续调用的方法和使用注解是一样的</p></blockquote><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>SpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token，后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p>我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储在cookie中，并且需要前端代码去把token设置到请求头中才可以，所以csrf攻击也就不用担心了。</p><h2 id="认证成功和失败处理器"><a href="#认证成功和失败处理器" class="headerlink" title="认证成功和失败处理器"></a>认证成功和失败处理器</h2><p>实际上在<code>UsernamePasswordAuthenticationFilter</code>进行登录认证的时候，如果登录成功了是会调用<code>AuthenticationSuccessHandler</code>的方法进行认证成功后的处理的。AuthenticationSuccessHandler就是登录成功处理器，<code>AuthenticationFailureHandler</code>就是登录失败</p><p>源码可以查看UsernamePasswordAuthenticationFilter的父类下的doFilter方法</p><p>但按照我们上面的jwt流程的话是完全用不到这两个处理器的，这里算是扩展</p><h3 id="认证成功处理器"><a href="#认证成功处理器" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h3><p>写一个类，实现AuthenticationSuccessHandler类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;用户认证通过！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现AuthenticationSuccessHandler后，下面有两个方法，但是有一个defalut修饰可不重写</p></blockquote><p>在配置类中添加formLogin配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 自定义认证成功和失败的处理器</span><br>    http.formLogin()<br>            .successHandler(authenticationSuccessHandler)<br>            .failureHandler(authenticationFailureHandler);<br>    <br>    <span class="hljs-comment">// 对所有请求开启认证</span><br>    http.authorizeRequests().anyRequest().authenticated();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="认证失败处理器"><a href="#认证失败处理器" class="headerlink" title="认证失败处理器"></a>认证失败处理器</h3><p>创个类，实现AuthenticationFailureHandler类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFailureHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;用户认证失败！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加配置类（看上面的成功处理器即可）</p><h2 id="注销成功处理器"><a href="#注销成功处理器" class="headerlink" title="注销成功处理器"></a>注销成功处理器</h2><h3 id="注销成功处理器-1"><a href="#注销成功处理器-1" class="headerlink" title="注销成功处理器"></a>注销成功处理器</h3><p>写一个类实现LogoutSuccessHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogoutSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;用户注销成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在配置类中添加相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MyLogoutSuccessHandler myLogoutSuccessHandler;<br><br><span class="hljs-comment">// 自定义登录成功和注销成功处理器</span><br>http.logout()<br>        .logoutSuccessHandler(myLogoutSuccessHandler);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>security框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java使用jdbc连接</title>
    <link href="/2022/03/18/java%E4%BD%BF%E7%94%A8jdbc%E8%BF%9E%E6%8E%A5/"/>
    <url>/2022/03/18/java%E4%BD%BF%E7%94%A8jdbc%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="准备操作"><a href="#准备操作" class="headerlink" title="准备操作"></a>准备操作</h2><p>下载 jar 包：<code>mysql-connector-java</code></p><blockquote><p>搜索jar包：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></blockquote><p>整体步骤：</p><ol><li>导入jar包</li><li>使用<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;)</code>注册驱动（8.0）</li><li>获取conn对象，并使用<code>prepareStatement</code>装入<code>sql</code>语句</li><li>使用pre对应方法执行</li></ol><h2 id="封装连接工具类"><a href="#封装连接工具类" class="headerlink" title="封装连接工具类"></a>封装连接工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getConn</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url, user, pwd;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection conn;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        url = <span class="hljs-string">&quot;jdbc:mysql://XXX.XXX.XXX.XXX:XXXX/FSAN?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        user = <span class="hljs-string">&quot;root&quot;</span>;<br>        pwd = <span class="hljs-string">&quot;FSAN&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConn</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(url, user, pwd);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addData</span><span class="hljs-params">(loginUser loginUser)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        pre = conn.prepareStatement(<span class="hljs-string">&quot;insert into loginUser(username,password) VALUES (?,?)&quot;</span>);<br>        pre.setString(<span class="hljs-number">1</span>, loginUser.getUsername());<br>        pre.setString(<span class="hljs-number">2</span>, loginUser.getPassword());<br>        <span class="hljs-keyword">if</span> (pre.executeUpdate() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加成功！&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加失败！&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现未知错误！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">editData</span><span class="hljs-params">(loginUser loginUser)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        pre = conn.prepareStatement(<span class="hljs-string">&quot;update loginUser set username=?,password=? where id=?&quot;</span>);<br>        pre.setString(<span class="hljs-number">1</span>, loginUser.getUsername());<br>        pre.setString(<span class="hljs-number">2</span>, loginUser.getPassword());<br>        pre.setInt(<span class="hljs-number">3</span>, loginUser.getId());<br>        <span class="hljs-keyword">if</span> (pre.executeUpdate() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改成功！&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改失败！&quot;</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现未知错误！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">delDataById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        pre = conn.prepareStatement(<span class="hljs-string">&quot;delete from loginUser where id=?&quot;</span>);<br>        pre.setInt(<span class="hljs-number">1</span>, id);<br>        <span class="hljs-keyword">if</span> (pre.executeUpdate() != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;删除成功！&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id不存在！&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现未知错误！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ArrayList&lt;loginUser&gt; <span class="hljs-title function_">getAllData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            pre = conn.prepareStatement(<span class="hljs-string">&quot;select * from loginUser&quot;</span>);<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pre.executeQuery();<br>            <span class="hljs-keyword">while</span> (result.next()) &#123;<br>                list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">loginUser</span>(result.getInt(<span class="hljs-string">&quot;id&quot;</span>), result.getString(<span class="hljs-string">&quot;username&quot;</span>), result.getString(<span class="hljs-string">&quot;password&quot;</span>)));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="完整DB"><a href="#完整DB" class="headerlink" title="完整DB"></a>完整DB</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCAbout</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection conn;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PreparedStatement pre;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;loginUser&gt; list;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> loginUser loginUser;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">getConn</span>().getConn();<br>        list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ArrayList&lt;loginUser&gt; <span class="hljs-title function_">getAllData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            pre = conn.prepareStatement(<span class="hljs-string">&quot;select * from loginUser&quot;</span>);<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pre.executeQuery();<br>            <span class="hljs-keyword">while</span> (result.next()) &#123;<br>                list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">loginUser</span>(result.getInt(<span class="hljs-string">&quot;id&quot;</span>), result.getString(<span class="hljs-string">&quot;username&quot;</span>), result.getString(<span class="hljs-string">&quot;password&quot;</span>)));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delDataById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            pre = conn.prepareStatement(<span class="hljs-string">&quot;delete from loginUser where id=?&quot;</span>);<br>            pre.setInt(<span class="hljs-number">1</span>, id);<br>            <span class="hljs-keyword">if</span> (pre.executeUpdate() != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;删除成功！&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id不存在！&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现未知错误！&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addData</span><span class="hljs-params">(loginUser loginUser)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            pre = conn.prepareStatement(<span class="hljs-string">&quot;insert into loginUser(username,password) VALUES (?,?)&quot;</span>);<br>            pre.setString(<span class="hljs-number">1</span>, loginUser.getUsername());<br>            pre.setString(<span class="hljs-number">2</span>, loginUser.getPassword());<br>            <span class="hljs-keyword">if</span> (pre.executeUpdate() != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加成功！&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加失败！&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现未知错误！&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">editData</span><span class="hljs-params">(loginUser loginUser)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            pre = conn.prepareStatement(<span class="hljs-string">&quot;update loginUser set username=?,password=? where id=?&quot;</span>);<br>            pre.setString(<span class="hljs-number">1</span>, loginUser.getUsername());<br>            pre.setString(<span class="hljs-number">2</span>, loginUser.getPassword());<br>            pre.setInt(<span class="hljs-number">3</span>, loginUser.getId());<br>            <span class="hljs-keyword">if</span> (pre.executeUpdate() != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改成功！&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改失败！&quot;</span>;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现未知错误！&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeAll</span><span class="hljs-params">(Connection conn, PreparedStatement pre)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                conn.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">null</span>) &#123;<br>                pre.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署python项目</title>
    <link href="/2022/02/20/docker%E9%83%A8%E7%BD%B2python%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/02/20/docker%E9%83%A8%E7%BD%B2python%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h2><ol><li>开发项目并本地测试通过</li><li>编写 Dockerfile 放置项目根目录</li><li>打包镜像文件</li><li>创建并运行镜像容器</li></ol><h2 id="创建文件结构"><a href="#创建文件结构" class="headerlink" title="创建文件结构"></a>创建文件结构</h2><ol><li><p>建立一个文件夹，名称随便，如 dockerpython</p></li><li><p>在文件夹中创建Dockerfile文件，project文件夹（用于存放项目代码，名称随便）</p></li><li><p>进入project文件夹，执行 <code>pip freeze &gt; requirements.txt</code> 生成项目配置文件</p></li><li><p>输入 Dockerfile 文件内容</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基于的基础镜像</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.8</span><br><br><span class="hljs-comment"># 代码添加到code文件夹</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ./project /code   </span><br><br><span class="hljs-comment"># 设置code文件夹是工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-comment"># 安装支持</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><br><span class="hljs-comment"># 设置容器启动时执行的文件</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;/code/main.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="上传至服务器中并生成镜像"><a href="#上传至服务器中并生成镜像" class="headerlink" title="上传至服务器中并生成镜像"></a>上传至服务器中并生成镜像</h2><ol><li>将dockerpython文件夹压缩上传到服务器中</li><li>使用 unzip 文件名.zip 解压</li><li>进入解压后的文件中，执行：<code>docker build -t python_images .</code></li></ol><blockquote><p>python_images 是生成的镜像名称，不可大写</p></blockquote><h2 id="生成容器并运行"><a href="#生成容器并运行" class="headerlink" title="生成容器并运行"></a>生成容器并运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -dp5001:5000 --name pythonName python_images<br></code></pre></td></tr></table></figure><p>退出容器，但不关闭运行：ctrl + p + q</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sprinboot中jjwt工具类</title>
    <link href="/2022/02/19/sprinboot%E4%B8%ADjjwt%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/02/19/sprinboot%E4%B8%ADjjwt%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="导入jwt的依赖库"><a href="#导入jwt的依赖库" class="headerlink" title="导入jwt的依赖库"></a>导入jwt的依赖库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jwt--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="工具类："><a href="#工具类：" class="headerlink" title="工具类："></a>工具类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fsan.springsecurity.Utils;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.JwtBuilder;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtil</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成jwt</span><br><span class="hljs-comment">     * 使用Hs256算法, 私匙使用固定JWT_SEC秘钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtSec    jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username  用户名 可根据需要传递的信息添加更多, 因为浏览器get传参url限制，不建议放置过多的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createJWT</span><span class="hljs-params">(String jwtSec, <span class="hljs-type">long</span> ttlMillis, String username)</span> &#123;<br>        <span class="hljs-comment">// 指定签名的时候使用的签名算法，也就是header那部分</span><br>        <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">signatureAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS256;<br><br>        <span class="hljs-comment">// 生成JWT的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowMillis</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(nowMillis);<br><br>        <span class="hljs-comment">// 创建payload的私有声明（根据特定的业务需要添加）</span><br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(<span class="hljs-string">&quot;username&quot;</span>, username);<br><br>        <span class="hljs-comment">// 添加payload声明</span><br>        <span class="hljs-comment">// 设置jwt的body</span><br>        <span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                <span class="hljs-comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span><br>                .setClaims(claims)<br>                <span class="hljs-comment">// 设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span><br>                .setId(UUID.randomUUID().toString())<br>                <span class="hljs-comment">// iat: jwt的签发时间</span><br>                .setIssuedAt(now)<br>                <span class="hljs-comment">// 代表这个JWT的主体，即它的所有人，这个是一个json格式的字符串</span><br>                .setSubject(username)<br>                <span class="hljs-comment">// 设置签名使用的签名算法和签名使用的秘钥</span><br>                .signWith(signatureAlgorithm, jwtSec.getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-keyword">if</span> (ttlMillis &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">expMillis</span> <span class="hljs-operator">=</span> nowMillis + ttlMillis;<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(expMillis);<br>            <span class="hljs-comment">// 设置过期时间</span><br>            builder.setExpiration(exp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(createJWT(<span class="hljs-string">&quot;FSAN&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;admin&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Token的解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtSec jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token  加密后的token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">parseJWT</span><span class="hljs-params">(String jwtSec, String token)</span> &#123;<br>        <span class="hljs-comment">// 得到DefaultJwtParser</span><br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>                <span class="hljs-comment">// 设置签名的秘钥</span><br>                .setSigningKey(jwtSec.getBytes(StandardCharsets.UTF_8))<br>                <span class="hljs-comment">// 设置需要解析的jwt</span><br>                .parseClaimsJws(token).getBody();<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>设置过期时间过期之后，token过期会在读取的时候报错，需要自行判断</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot中Redis使用fastjson序列化</title>
    <link href="/2022/02/19/springboot%E4%B8%ADRedis%E4%BD%BF%E7%94%A8fastjson%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/02/19/springboot%E4%B8%ADRedis%E4%BD%BF%E7%94%A8fastjson%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring data redis 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- commons-pool2 对象池依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- JSON工具 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实现RedisSerializer接口"><a href="#实现RedisSerializer接口" class="headerlink" title="实现RedisSerializer接口"></a>实现RedisSerializer接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.SerializationException;<br><br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJson2JsonRedisSerializer</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisSerializer</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">DEFAULT_CHARSET</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;T&gt; clazz;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FastJson2JsonRedisSerializer</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] serialize(T t) <span class="hljs-keyword">throws</span> SerializationException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == t) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> SerializationException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == bytes || bytes.length &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, DEFAULT_CHARSET);<br>        <span class="hljs-keyword">return</span> (T) JSON.parseObject(str, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置redisTemplate"><a href="#配置redisTemplate" class="headerlink" title="配置redisTemplate"></a>配置redisTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@AutoConfigureAfter(RedisAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCacheAutoConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(factory);<br>        FastJson2JsonRedisSerializer&lt;Object&gt; fastJsonRedisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-comment">// key采用String的序列化方式</span><br>        template.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>        template.setHashKeySerializer(stringRedisSerializer);<br><br>        <span class="hljs-comment">// value序列化方式采用fastJson</span><br>        template.setValueSerializer(fastJsonRedisSerializer);<br>        <span class="hljs-comment">// hash的value序列化方式采用fastJson</span><br>        template.setHashValueSerializer(fastJsonRedisSerializer);<br><br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="redis通用工具"><a href="#redis通用工具" class="headerlink" title="redis通用工具"></a>redis通用工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * spring redis 工具类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存基本的对象，Integer、String、实体类等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 缓存的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ValueOperations&lt;Object, Object&gt; <span class="hljs-title function_">setCacheObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        ValueOperations&lt;Object, Object&gt; operation = redisTemplate.opsForValue();<br>        operation.set(key, value);<br>        <span class="hljs-keyword">return</span> operation;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存基本的对象，Integer、String、实体类等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key      缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value    缓存的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout  时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间颗粒度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ValueOperations&lt;Object, Object&gt; <span class="hljs-title function_">setCacheObject</span><span class="hljs-params">(Object key, Object value, Integer timeout, TimeUnit timeUnit)</span> &#123;<br>        ValueOperations&lt;Object, Object&gt; operation = redisTemplate.opsForValue();<br>        operation.set(key, value, timeout, timeUnit);<br>        <span class="hljs-keyword">return</span> operation;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的基本对象。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存键值对应的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getCacheObject</span><span class="hljs-params">(Object key)</span> &#123;<br>        ValueOperations&lt;Object, Object&gt; operation = redisTemplate.opsForValue();<br>        <span class="hljs-keyword">return</span> operation.get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除单个对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteObject</span><span class="hljs-params">(Object key)</span> &#123;<br>        redisTemplate.delete(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除集合对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> collection</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteObject</span><span class="hljs-params">(Collection collection)</span> &#123;<br>        redisTemplate.delete(collection);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> expire, TimeUnit timeUnit)</span> &#123;<br>        redisTemplate.expire(key, expire, timeUnit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存List数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key      缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList 待缓存的List数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ListOperations&lt;Object, Object&gt; <span class="hljs-title function_">setCacheList</span><span class="hljs-params">(Object key, List&lt;Object&gt; dataList)</span> &#123;<br>        <span class="hljs-type">ListOperations</span> <span class="hljs-variable">listOperation</span> <span class="hljs-operator">=</span> redisTemplate.opsForList();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != dataList) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> dataList.size();<br>            <span class="hljs-keyword">for</span> (Object o : dataList) &#123;<br>                listOperation.leftPush(key, o);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> listOperation;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的list对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存键值对应的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getCacheList</span><span class="hljs-params">(String key)</span> &#123;<br>        List&lt;Object&gt; dataList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ListOperations&lt;Object, Object&gt; listOperation = redisTemplate.opsForList();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> listOperation.size(key);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != size) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                dataList.add(listOperation.index(key, i));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dataList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存Set</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key     缓存键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSet 缓存的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存数据的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BoundSetOperations&lt;Object, Object&gt; <span class="hljs-title function_">setCacheSet</span><span class="hljs-params">(String key, Set&lt;Object&gt; dataSet)</span> &#123;<br>        BoundSetOperations&lt;Object, Object&gt; setOperation = redisTemplate.boundSetOps(key);<br>        <span class="hljs-keyword">for</span> (Object o : dataSet) &#123;<br>            setOperation.add(o);<br>        &#125;<br>        <span class="hljs-keyword">return</span> setOperation;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的set</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">getCacheSet</span><span class="hljs-params">(Object key)</span> &#123;<br>        Set&lt;Object&gt; dataSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        BoundSetOperations&lt;Object, Object&gt; operation = redisTemplate.boundSetOps(key);<br>        dataSet = operation.members();<br>        <span class="hljs-keyword">return</span> dataSet;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存Map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> HashOperations&lt;Object, Object, Object&gt; <span class="hljs-title function_">setCacheMap</span><span class="hljs-params">(Object key, Map&lt;Object, Object&gt; dataMap)</span> &#123;<br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != dataMap) &#123;<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : dataMap.entrySet()) &#123;<br>                hashOperations.put(key, entry.getKey(), entry.getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hashOperations;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的Map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title function_">getCacheMap</span><span class="hljs-params">(Object key)</span> &#123;<br>        Map&lt;Object, Object&gt; map = redisTemplate.opsForHash().entries(key);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的基本对象列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern 字符串前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对象列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Collection&lt;Object&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">(String pattern)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.keys(pattern);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h3><p><a href="https://www.jianshu.com/p/1b3f33a045bf">https://www.jianshu.com/p/1b3f33a045bf</a></p><p>只是怕原文失效了搬运下</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署nginx</title>
    <link href="/2022/02/08/docker%E9%83%A8%E7%BD%B2nginx/"/>
    <url>/2022/02/08/docker%E9%83%A8%E7%BD%B2nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><p>对于创建正式的nginx容器需要做磁盘挂载，就需要提前有配置文件，所以先随便生成一个nginx容器用于拷贝配置文件</p><h3 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx<br></code></pre></td></tr></table></figure><blockquote><p>docker镜像搜索：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p></blockquote><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>主要为了拷贝配置文件，创建一个最简单的容器即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -dp80:80 --name nginxName nginx<br></code></pre></td></tr></table></figure><h3 id="拷贝出配置文件"><a href="#拷贝出配置文件" class="headerlink" title="拷贝出配置文件"></a>拷贝出配置文件</h3><p>先在宿主机建立存放位置，用于存放配置文件和html文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br><span class="hljs-built_in">mkdir</span> -p nginx/conf<br><span class="hljs-built_in">mkdir</span> -p nginx/html<br></code></pre></td></tr></table></figure><p>拷贝文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拷贝配置文件目录和文件</span><br>docker <span class="hljs-built_in">cp</span> nginxName:/etc/nginx/nginx.conf /nginx/conf/nginx.conf<br>docker <span class="hljs-built_in">cp</span> nginxName:/etc/nginx/conf.d /nginx/conf/conf.d<br><br><span class="hljs-comment"># 拷贝html文件目录</span><br>docker <span class="hljs-built_in">cp</span> nginxName:/usr/share/nginx/html /nginx/html/<br></code></pre></td></tr></table></figure><blockquote><p>docker cp：复制一个文件&#x2F;目录到指定路径，指定容器可以使用容器name或容器id</p></blockquote><h3 id="删除临时的nginx容器"><a href="#删除临时的nginx容器" class="headerlink" title="删除临时的nginx容器"></a>删除临时的nginx容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop nginxId<br>docker <span class="hljs-built_in">rm</span> nginxId<br><br><span class="hljs-comment"># or 一步到位</span><br>docker <span class="hljs-built_in">rm</span> -f nginxId<br></code></pre></td></tr></table></figure><h2 id="正式创建"><a href="#正式创建" class="headerlink" title="正式创建"></a>正式创建</h2><p>映射端口到81和对配置文件，html文件做挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>-dp81:80 \<br>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v /nginx/conf/conf.d:/etc/nginx/conf.d \<br>-v /nginx/html:/usr/share/nginx/html \<br>--name nginxName \<br>nginx<br></code></pre></td></tr></table></figure><p>前宿主机，后容器</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云短信服务</title>
    <link href="/2022/01/20/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/01/20/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>进入阿里云官网，登录</p></li><li><p>鼠标放置头像上点击AccessKey管理</p></li><li><p>创建一个用户组（权限管理选上sms短信服务）</p></li><li><p>创建一个用户（一定要勾上Open API调用访问）</p></li><li><p>在组中添加用户，记录用户的AccessKey ID和密钥</p></li></ol><h3 id="开启短信服务"><a href="#开启短信服务" class="headerlink" title="开启短信服务"></a>开启短信服务</h3><p>直接搜索短信服务，启动</p><p>如 【齐氏有限公司】：您的验证码为：${code}</p><p>这里齐氏有限公司则是签名，后面提示为模板</p><blockquote><p>签名：</p></blockquote><ol><li>一个用户只有一个验证码的签名</li><li>选择自用不需要提供三证</li><li>场景说明要严谨，比如：某某某需要某某业务</li></ol><br><blockquote><p>模板：</p></blockquote><ol><li>添加模板类型为验证码</li><li>名称可以提示，如：某某某公司 注册</li><li>申请说明需要正规，如某某某公司为了某某业务测试</li></ol><h3 id="使用api文档"><a href="#使用api文档" class="headerlink" title="使用api文档"></a>使用api文档</h3><p><a href="https://next.api.aliyun.com/api/Dysmsapi/2017-05-25/SendSms">点击查看</a></p><ol><li><strong>使用sdk添加阿里云依赖</strong></li><li><strong>建立Client类客户端连接</strong></li><li><strong>写入配置项</strong></li><li><strong>发送并接收，查看返回状态码和消息</strong></li></ol><blockquote><p>建立Client类客户端连接：</p></blockquote><p>写一个方法用来提供连接客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Client <span class="hljs-title function_">createClient</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>()<br>            .setAccessKeyId(<span class="hljs-string">&quot;youAccessKeyId&quot;</span>)<br>            .setAccessSecret(<span class="hljs-string">&quot;youAccessKeySecret&quot;</span>);<br>    config.endpoint = <span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>(config);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>setAccessKeyId 传入用户的accessId</li><li>setAccessSecret 传入对应id的密钥</li><li>config.endpoint &#x3D; “dysmsapi.aliyuncs.com”;  固定不可改，访问域名</li></ul><br><blockquote><p>发送短信：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>GetClient getClient;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String youPhoneNumbers, String youTemplateCode, String youSignName)</span> &#123;<br>    <span class="hljs-comment">// 获取连接客户端</span><br>    <span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> getClient.createClient();<br>    <span class="hljs-comment">// 设置发送的模板变量的值($&#123;code&#125; 验证码的值)</span><br>    HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 使用UUID工具类生成随机数</span><br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br>    <span class="hljs-comment">// 填写发送配置，手机号，模板code，签名，变量值（json格式）</span><br>    <span class="hljs-type">SendSmsRequest</span> <span class="hljs-variable">smsRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendSmsRequest</span>()<br>            .setPhoneNumbers(youPhoneNumbers)<br>            .setTemplateCode(youTemplateCode)<br>            .setSignName(youSignName)<br>            .setTemplateParams(JSON.toJSONString(map));<br>    <span class="hljs-comment">// 发送</span><br>    <span class="hljs-type">SendSmsResponse</span> <span class="hljs-variable">sendResp</span> <span class="hljs-operator">=</span> client.sendSms(smsRequest);<br>    System.out.println(sendResp.body.code);<br>    System.out.println(sendResp.body.message);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>UUID.randomUUID().toString().substring(0, 4)   使用UUID工具类生成随机数，转为字符串后使用substring从下标0开始取4位</li><li>setPhoneNumbers  设置发送的手机号，字符串类型</li><li>setTemplateCode  用户模板的code值</li><li>setSignName  用户签名名称</li><li>sendResp.body.code  返回值，成功为ok</li><li>sendResp.body.message  返回消息</li></ul><br><h3 id="配合redis做缓存："><a href="#配合redis做缓存：" class="headerlink" title="配合redis做缓存："></a>配合redis做缓存：</h3><p>配置redis地址和端口：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">XXXXXX</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">XXXX</span><br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>RedisTemplate&lt;String, String&gt; redisTemplate;<br><br><span class="hljs-meta">@GetMapping(&quot;/sendPhone/&#123;phone&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendPhone</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;phone&quot;)</span> String phone)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> aliyun.sendPhone(phone, <span class="hljs-string">&quot;youTemplateCode&quot;</span>, <span class="hljs-string">&quot;youSignName&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(phone);<br><br>    <span class="hljs-comment">// 查看redis</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.hasText(code)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机号&quot;</span> + phone + <span class="hljs-string">&quot;验证码已存在，未过期！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        redisTemplate.opsForValue().set(phone, msg, TimeUnit.MINUTES);<br>        System.out.println(<span class="hljs-string">&quot;发送成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建key和value都是字符串的redis模板</li><li>redisTemplate.opsForValue().get(phone)  查找</li><li>redisTemplate.opsForValue().set(phone, msg, 5, TimeUnit.MINUTES);  写入，时间为5分钟（使用TimeUnit工具类）</li><li>使用StringUtils工具类的hasText查看是否为空</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>短信服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署redis</title>
    <link href="/2022/01/20/docker%E9%83%A8%E7%BD%B2redis/"/>
    <url>/2022/01/20/docker%E9%83%A8%E7%BD%B2redis/</url>
    
    <content type="html"><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br></code></pre></td></tr></table></figure><h3 id="准备redis配置文件"><a href="#准备redis配置文件" class="headerlink" title="准备redis配置文件"></a>准备redis配置文件</h3><p>中文官网：<a href="http://www.redis.cn/download.html">http://www.redis.cn/download.html</a></p><p>去redis中文官网进去点击download解压后拿到redis.conf即可</p><p>配置redis.conf，主要配置如下：</p><ol><li>bind 127.0.0.1  #注释这部分，使redis可以访问外部</li><li>daemonize no  #用守护线程访问</li><li>requirepass 你的密码  #给redis设置密码</li><li>appendonly yes  #redis持久化  默认为no</li><li>tcp-keepalive 300   #防止出现远程主机强迫关闭了一个现有的连接的错误，默认为300</li></ol><h3 id="创建docker映射目录"><a href="#创建docker映射目录" class="headerlink" title="创建docker映射目录"></a>创建docker映射目录</h3><p>配置文件：&#x2F;myRedis&#x2F;redis.conf</p><p>持久化文件：&#x2F;myRedis&#x2F;data</p><h3 id="生成容器并启动"><a href="#生成容器并启动" class="headerlink" title="生成容器并启动"></a>生成容器并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p6380:6379 --name myRedis -v /myRedis/data:/data -v /myRedis/redis.conf:/etc/redis.conf redis redis-server /etc/redis.conf --appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><ul><li>redis启动默认端口为6379，映射到宿主机6380</li><li>-v &#x2F;myRedis&#x2F;data:&#x2F;data  将redis容器内的data持久化的数据挂载到宿主机&#x2F;myRedis&#x2F;data</li><li>-v &#x2F;myRedis&#x2F;redis.conf:&#x2F;etc&#x2F;redis.conf   将宿主机配置好的配置文件映射到容器&#x2F;etc&#x2F;redis.conf这个位置</li><li>redis-server &#x2F;etc&#x2F;redis.conf   关键配置，让redis不是无配置启动，而是使用&#x2F;etc&#x2F;redis.conf配置文件</li></ul><h3 id="查看日志是否成功"><a href="#查看日志是否成功" class="headerlink" title="查看日志是否成功"></a>查看日志是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h3 id="进入redis命令行"><a href="#进入redis命令行" class="headerlink" title="进入redis命令行"></a>进入redis命令行</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@8810fdef372c</span><span class="hljs-symbol">:/data</span><span class="hljs-comment"># redis-cli</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署图片服务器</title>
    <link href="/2022/01/19/docker%E9%83%A8%E7%BD%B2%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/01/19/docker%E9%83%A8%E7%BD%B2%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>图片服务器就是通过配置nginx服务完成的，所以建立nginx容器的过程就省略了，需要注意的是，在<code>usr/share/nginx/</code>下建立一个img文件夹用于存放静态文件，也需要挂载出去</p><h2 id="区分root和alias"><a href="#区分root和alias" class="headerlink" title="区分root和alias"></a>区分root和alias</h2><p>使用root：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/img</span> &#123;<br>    root /static;<br>&#125;<br></code></pre></td></tr></table></figure><p>当访问 &#x2F;img 路径的时候，nginx会映射到 &#x2F;static&#x2F;img 下，如 &#x2F;img&#x2F;hello.png 会返回容器根目录下 &#x2F;static&#x2F;img&#x2F;hello.png，即用 &#x2F;static 加上 &#x2F;img</p><p>使用alias：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">location /img &#123;<br><span class="hljs-built_in">alias</span> /static;<br>&#125;<br></code></pre></td></tr></table></figure><p>当访问 &#x2F;img 路径的时候，nginx会映射到 &#x2F;static 下，如 &#x2F;img&#x2F;hello.png 返回的是 &#x2F;static&#x2F;hello.png，即用 &#x2F;static 替换掉 &#x2F;img</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs conf">location /img/ &#123;<br>    root   /usr/share/nginx/;<br>    // 开启静态资源预览<br>    autoindex on;<br>&#125;<br><br>location / &#123;<br>    root   /usr/share/nginx/html;<br>indexindex.html;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成后：访问 XXXX:XXX&#x2F;img&#x2F;hello.png 就等于访问 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;img&#x2F;hello.png 的资源</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20220103日记</title>
    <link href="/2022/01/05/20220103%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/01/05/20220103%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="写给自己的话"><a href="#写给自己的话" class="headerlink" title="写给自己的话"></a>写给自己的话</h2><p>约束自己，学习</p><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>下列关于vue的知识，写在vueCli项目基础知识那一篇</p><h2 id="20220103"><a href="#20220103" class="headerlink" title="20220103"></a>20220103</h2><p>学习成果如下：</p><ol><li>使用vuecli框架技术，复习axios三层封装，调用和风天气接口，使用echarts地图渲染出浙江省级地图气温情况</li></ol><h2 id="20220104"><a href="#20220104" class="headerlink" title="20220104"></a>20220104</h2><ol><li>在昨天的基础上，做如下更改<ol><li>使用echarts地图动态渲染出六个省级地图，使用elementUI中的el-select标签选择</li><li>动态添加选中每一个省级地图下的市级，选中市级可查看市级的天气情况</li><li>根据市级使用遍历获取json的的城市id，获取未来三天的天气预报并渲染</li></ol></li></ol><p>天气预报项目End</p><h2 id="20220105"><a href="#20220105" class="headerlink" title="20220105"></a>20220105</h2><ol><li>复习python爬虫，使用爬虫爬取b站热榜的信息（标题，作者，点赞数，播放数，封面图片）</li><li>学习ts中各类接口继承和实现，泛型，es6中三点运算符</li></ol><h2 id="20220106"><a href="#20220106" class="headerlink" title="20220106"></a>20220106</h2><ol><li>学习ts泛型接口，模块化，命名空间</li><li>使用ts模仿jquery封装写一个$.get，$.post功能</li></ol><h2 id="20220107-见TypeScript基础"><a href="#20220107-见TypeScript基础" class="headerlink" title="20220107(见TypeScript基础)"></a>20220107(见TypeScript基础)</h2><ol><li>学习ts中的装饰器（类装饰器，方法装饰器，属性装饰器）</li><li>认识vue3.x，vite创建vue项目</li><li>按键修饰符@keyup</li><li>巩固vue项目基础，复习watch和computed</li><li>利用计算属性，写一个检索功能</li></ol><h2 id="20220108"><a href="#20220108" class="headerlink" title="20220108"></a>20220108</h2><ol><li>使用vue仿ToDoList</li><li>学习localStorage存放参数</li><li>使用props子父组件传参</li><li>父组件使用标签自定义函数，子组件使用$emit调用父组件的函数</li></ol><h2 id="20220109"><a href="#20220109" class="headerlink" title="20220109"></a>20220109</h2><ol><li>学习mitt插件，一个页面内多个组件间传值</li><li>利用@input和$emit实现父子组件双向绑定</li><li>了解vue3中新出的setup功能</li></ol><h2 id="20220110"><a href="#20220110" class="headerlink" title="20220110"></a>20220110</h2><ol><li>使用reactive函数和ref函数创建响应式对象</li><li>设计自定义组件，文本，样式</li><li>小综合案例（切换功能栏）</li><li>keep-alive保存状态</li><li>学习this.$nextTick函数</li></ol><h2 id="20220111"><a href="#20220111" class="headerlink" title="20220111"></a>20220111</h2><ol><li>vue3的全局变量（原型属性）</li><li>使用mixins抽离功能</li><li>使用mixin函数定义全局功能</li><li>Teleport标签实现放置指定位置</li><li>小综合案例（自定义模态对话框）</li></ol><h2 id="20220112"><a href="#20220112" class="headerlink" title="20220112"></a>20220112</h2><ol><li>使用toRefs函数结构一个响应式对象为普通对象，但里面的属性为响应式变量</li><li>在setup中写computed（计算属性）</li><li>readonly()，传入响应式数据，改为普通数据</li><li>watch和watchEffect的区别，setup中写法，watch监听前后值</li></ol><h2 id="20220113"><a href="#20220113" class="headerlink" title="20220113"></a>20220113</h2><ol><li>使用inject接收provide传的参数（子孙组件传参）</li><li>vueCli创建vue3集成typescript项目</li><li>defineComponent函数</li><li>使用类型限制组合式api的属性及方法</li><li>‘vue-router’的useRouter函数和useRoute函数setup中动态路由传值</li></ol><h2 id="20220114"><a href="#20220114" class="headerlink" title="20220114"></a>20220114</h2><ol><li>vue路由history模式和hash模式区别，默认为hash模式</li><li>tslint在2019年停了，项目一律使用eslint</li><li>配合path，query传值（?参数名&#x3D;值），动态路由配合name使用params传值（路由&#x2F;值）</li><li>vuex的引入和store，mutations使用（见vuex基础），组合式api中使用useStore函数获取执行对象</li></ol><h2 id="20220115"><a href="#20220115" class="headerlink" title="20220115"></a>20220115</h2><ol><li>配合组合式api学习vuex的getter（计算属性），actions（异步执行），modules（模块化）</li><li>vuexEnd，vue3End，typescriptEnd</li><li>划水，思考人生，确定下一步，实现计划</li></ol><h2 id="20220116（详见响应式css）"><a href="#20220116（详见响应式css）" class="headerlink" title="20220116（详见响应式css）"></a>20220116（详见响应式css）</h2><ol><li>学习css响应式标签，@media，新学flex属性</li><li>:root 设置全局样式，设置全局变量很有用</li><li>label，header标签</li><li>写一个小案例，响应式标题栏（如何收缩标题栏为一个按钮，不使用js实现点击切换）</li></ol><h2 id="20220117（练习springMVC防忘）"><a href="#20220117（练习springMVC防忘）" class="headerlink" title="20220117（练习springMVC防忘）"></a>20220117（练习springMVC防忘）</h2><ol><li>jackson插件使用ObjectMapper类的writeValueAsString方法将对象转为json字符串</li><li>fastjson插件使用JSON类的toJSONString方法将对象转为json字符串</li><li>Date类转化为json字符串会变为时间戳JSON.toJSONString(new Date())</li><li>使用SimpleDateFormat设置时间格式，format方法传入Date类</li><li>在浏览器上访问json字符串，出现乱码可以在注解中添加produces &#x3D; {“application&#x2F;json;charset&#x3D;UTF-8”}</li></ol><h2 id="20220118"><a href="#20220118" class="headerlink" title="20220118"></a>20220118</h2><ol><li><p>通过HttpServletRequest的getParameter方法接收表单数据</p></li><li><p>sprinboot使用MultipartFile工具类接收文件（使用RequestParam注解指定name接收）</p><ol><li>getOriginalFilename方法获取文件名字</li><li>transferTo方法将文件写入file对象</li></ol></li><li><p>复习spring前后端交互（拦截器，mybatis）（见springboot_mybatis文件）</p><ol><li>实现HandlerInterceptor接口就是一个拦截器<ol><li>preHandle 请求处理之前</li><li>postHandle 请求处理之后</li><li>afterCompletion 整个请求结束之后</li><li>使用一个类继承WebMvcConfigurer重写addInterceptors实现拦截器registry.addInterceptor(new HandleConfig()).addPathPatterns(“&#x2F;user&#x2F;**”);</li></ol></li><li>mybatis 标签中参数<ol><li>parameterType 参数定义传入类型，不是特别重要</li><li>resultType 结果返回类型，如果要返回指定实例对象，需要写在配置文件中定义，也可以直接写com开始的路径 com.FSAN.demo.pojo.User</li></ol></li></ol></li></ol><h2 id="20220119"><a href="#20220119" class="headerlink" title="20220119"></a>20220119</h2><ol><li>docker使用redis（见docker安装配置redis）</li><li>springMVC复习End</li><li>阿里云短信服务（验证码功能）start！</li><li>申请短信服务中。。。（见阿里云短信服务）</li></ol><h2 id="20220120"><a href="#20220120" class="headerlink" title="20220120"></a>20220120</h2><ol><li>写一遍完整的短信发送流程，使用redis做缓存防止频繁发送，知识点：<ol><li>使用UUID工具类生成随机数</li><li>StringUtils工具类的hasText方法判断字符为空</li><li>redis使用TimeUnit工具类设置过期时间</li></ol></li></ol><h2 id="20220121"><a href="#20220121" class="headerlink" title="20220121"></a>20220121</h2><ol><li>复习redis基础命令（见Redis学习）<ol><li>特性</li><li>命令：<ol><li>select</li><li>dbsize</li><li>get，set</li><li>keys *</li><li>flushall，flushdb</li><li>exists</li><li>move</li><li>expire</li><li>ttl</li><li>del</li><li>type</li><li>strlen</li><li>append</li><li>incr，decr</li><li>incrby，decrby</li><li>setex，setnx</li><li>mget，mset，msetnx</li><li>user:{id}:{filed} 取key名称设计</li><li>getset</li></ol></li></ol></li></ol><h2 id="20220122"><a href="#20220122" class="headerlink" title="20220122"></a>20220122</h2><ol><li>redis学习List类型操作（见Redis学习）<ol><li>lpush，rpush</li><li>lrange</li><li>lpop</li><li>lrem</li><li>llen</li><li>ltrim</li><li>rpoplpush</li><li>lset</li><li>linsert</li></ol></li><li>set（集合）类型操作<ol><li>sadd</li><li>smembers</li><li>sismember</li><li>scard</li><li>srem</li><li>srandmember</li><li>spop</li></ol></li></ol><h2 id="20220123"><a href="#20220123" class="headerlink" title="20220123"></a>20220123</h2><ol><li>java中认识jwt（见jwt基础）<ol><li>常见jwt库：java-jwt、jose4j、nimbus-jose-jwt、jjwt、prime-jwt、vertx-auth-jwt</li><li>Header（令牌类型，签名算法），Payload（数据声明），Signature（签名，算法生成） 组成</li></ol></li></ol><h2 id="20220124"><a href="#20220124" class="headerlink" title="20220124"></a>20220124</h2><p>今天感冒非常没精神，容我休息一天，下午打扫卫生，晚上早睡，明天补上</p><h2 id="20220125（springboot-vue-jwt项目开始）"><a href="#20220125（springboot-vue-jwt项目开始）" class="headerlink" title="20220125（springboot_vue_jwt项目开始）"></a>20220125（springboot_vue_jwt项目开始）</h2><ol><li>前端vue3+ts+axios+element-plus，后端springboot+mybatisplus+jwt项目开始（前见springboot_vue_jwt_before）</li><li>做出登录页面<ol><li>运用栅格布局</li><li>在el-input中使用&lt;template #append&gt;定义末尾（知识new）</li><li>require 导入图片</li><li>验证码功能</li></ol></li><li>学习await，async用法，import和require的区别</li><li>element-plus 导入 ELMessage 使用消息提示</li><li>写拦截器统一做状态判断</li><li>mock拦截请求返回模拟数据</li></ol><h2 id="20220126（before-2）"><a href="#20220126（before-2）" class="headerlink" title="20220126（before-2）"></a>20220126（before-2）</h2><ol><li>认识vue3的新语法糖script setup语法糖</li><li>element-plus中icon图标的注册</li><li>justify-content常用相关属性：<ol><li>centent  居中</li><li>flex-start   从行首起始位置开始排列</li><li>flex-end   从行尾位置开始排列</li><li>space-between   均匀排列每个元素，首个元素放置于起点，末尾元素放置于终点</li><li>space-around   均匀排列每个元素，每个元素周围分配相同的空间</li><li>space-evenly   均匀排列每个元素，每个元素之间的间隔相等</li><li>stretch   均匀排列每个元素，’auto’-sized 的元素会被拉伸以适应容器的大小</li></ol></li><li>完成登录后的主页，侧边菜单栏的制作</li><li>制作对应的页面子路由配合菜单栏跳转</li></ol><h2 id="20220127-before-3"><a href="#20220127-before-3" class="headerlink" title="20220127(before-3)"></a>20220127(before-3)</h2><ol><li>完成头像和用户信息接口并使用</li><li>完成个人中心页面<ol><li>路由path query传参</li><li>validator 使用自定义校验，自定义错误 new Error</li><li>@click.native 使用原生事件，用于自定义组件如，在router-link中使用点击事件，但我在vue3中使用会报错，原因不详，就直接使用@click，发现正常使用</li></ol></li><li>退出账号功能<ol><li>发起请求退出账号</li><li>使用clear方法清除localStorage和sessionStorage信息</li><li>清除vuex中的token</li><li>跳转到登录页</li></ol></li><li>学会在main.js中全局注册element-plus组件<ol><li>导入使用as改名</li><li>循环遍历使用createApp(App)下的component方法注册组件<ol><li>component 函数，传入两个值，注册名和组件名，全局注册</li></ol></li></ol></li></ol><h2 id="20220128（before-4）"><a href="#20220128（before-4）" class="headerlink" title="20220128（before-4）"></a>20220128（before-4）</h2><ol><li>将侧边菜单栏改为动态菜单<ol><li>写mock模拟返回</li><li>使用v-for配合component标签，动态添加icon图标</li></ol></li><li>使用路由拦截器请求路由返回（通过请求后放行）</li><li>使用addRoute函数添加子路由</li></ol><h2 id="20220129（before-5）"><a href="#20220129（before-5）" class="headerlink" title="20220129（before-5）"></a>20220129（before-5）</h2><ol><li>sessionStorage 和 localStorage的区别<ol><li>localStorage 是跨选项卡共享数据，同步刷新的</li><li>sessionStorage 则是单页面独立数据</li></ol></li><li>将获取的动态路由和用户权限列表放入vuex</li><li>添加tabs标签页，将tabs标签页独立做一个vue组件，并将配置交给vuex管理</li></ol><h2 id="20220130"><a href="#20220130" class="headerlink" title="20220130"></a>20220130</h2><p>有事</p><h2 id="20220131"><a href="#20220131" class="headerlink" title="20220131"></a>20220131</h2><p>除夕夜忙</p><h2 id="20220201"><a href="#20220201" class="headerlink" title="20220201"></a>20220201</h2><p>春节忙</p><h2 id="20220202"><a href="#20220202" class="headerlink" title="20220202"></a>20220202</h2><p>回老家忙</p><h2 id="20220203"><a href="#20220203" class="headerlink" title="20220203"></a>20220203</h2><p>沉浸在过年气氛中</p><h2 id="20220204（见before-6）"><a href="#20220204（见before-6）" class="headerlink" title="20220204（见before-6）"></a>20220204（见before-6）</h2><p>开始学习，重新振作起来：</p><ol><li>将tabs标签页动态和路由绑定，点击切换和侧边栏同步（tabs的name值设置为侧边当前name就行了，都是路由）</li><li>新函数findIndex，根据自定义回调方法返回符合的数组数据下标，避免tabs重复添加</li><li>删除tabs标签时处理为当前标签时的情况，设置首页不可删除</li></ol><h2 id="20220205（见before-7）"><a href="#20220205（见before-7）" class="headerlink" title="20220205（见before-7）"></a>20220205（见before-7）</h2><ol><li>使用filter函数，获取满足指定条件的数组中的数据</li><li>深度学习路由守卫中的next效果（放行和中断）<ol><li>next() 只有这个是对路由的放行</li><li>next(‘&#x2F;login’) 类似只是拦截到to为’&#x2F;login’的路由，并重新执行beforeEach((to, from, next)</li><li>next({…to, replace: true})  拦截路由信息，判断是否有路由，没有就再次执行beforeEach((to, from, next)，replace: true让用户禁止使用浏览器后退</li></ol></li><li>解决动态路由刷新问题<ol><li>问题：在添加路由之后第一次访问被添加的路由会白屏</li><li>原因：在路由刚被加载的时候就立刻访问被添加的路由，这时addRoute还没有执行结束，所以找不到</li><li>解决：使用next({…to, replace: true})拦截to的路由信息，如果没有则会再次执行beforeEach((to, from, next)，这时可以通过一个参数来控制不获取路由，直接next()</li></ol></li><li>浏览器刷新时，保留当前的标签<ol><li>在app.vue中监听$route的变化，将路由中的title和name添加到tabs即可</li></ol></li><li>使用退出按钮时，恢复默认tabs标签</li><li>vue3中slot插槽的变化，都由 <code>#</code> 统一（<code>v-slot</code>）</li></ol><h2 id="20220206（见before-8）"><a href="#20220206（见before-8）" class="headerlink" title="20220206（见before-8）"></a>20220206（见before-8）</h2><ol><li>编写菜单页表格</li><li>编写添加对话框功能</li><li>复习linux中docker挂载和映射</li></ol><h2 id="20220207（before-9）"><a href="#20220207（before-9）" class="headerlink" title="20220207（before-9）"></a>20220207（before-9）</h2><ol><li>es6中new Promise讲解，解决回调地狱问题<ol><li>resolve，回调参数，表示处理通过，给下级then接收</li><li>reject，回调参数，表示处理错误，给下级catch接收</li></ol></li><li>将具体的接口操作过程交给vuex管理<ol><li>action配合promise对象，这样就不用在vue中导入api，只要导入dispatch即可（个人理解）</li></ol></li></ol><h2 id="20220208（before-10）"><a href="#20220208（before-10）" class="headerlink" title="20220208（before-10）"></a>20220208（before-10）</h2><ol><li>完善添加对话框<ol><li>关闭事件清空form数据，reset表单</li></ol></li><li>实现添加数据和编辑更新接口调用<ol><li>提交更新后的数据和添加数据使用一个函数，通过是否有id判断是update还是add</li></ol></li><li>删除数据接口调用<ol><li>使用Pop confirm二次提示删除</li></ol></li></ol><h2 id="20220209（before-11）"><a href="#20220209（before-11）" class="headerlink" title="20220209（before-11）"></a>20220209（before-11）</h2><ol><li>角色界面的多选表格，搜索、删除和批量删除操作<ol><li>监听多选数据是否为空</li><li>批量删除和删除的按钮事件设置为一个，是否传递id判断是删除还是批量删除，将id放入list后到调用接口即可</li></ol></li><li>分页功能<ol><li>current 当前页</li><li>size 显示数</li><li>total 总数据条数</li><li>当前页显示数和每页显示数改变时修改获取数据的参数并重新获取数据</li></ol></li><li>element plus组件默认英文改中文<ol><li>main.js 中导入element-plus的中文插件，在使用element-plus时带上即可</li></ol></li></ol><h2 id="20220210（before-12）"><a href="#20220210（before-12）" class="headerlink" title="20220210（before-12）"></a>20220210（before-12）</h2><ol><li>mock的url中使用RegExp函数可以使用正则的模糊匹配</li><li>vue 中的watch（监听属性）和computed（计算属性）的区别<ol><li>computed可以观察多个数据，watch只能是一个数据</li><li>computed可以直接生成一个新的数据渲染致视图中，watch是修改本身已经存在的数据</li><li>computed不可以执行异步的，因为需要返回值，返回值是由js主线程控制，watch可以执行异步的，因为不需要返回数据，参考定时器（定时器是属于异步的线程）</li></ol></li><li>角色管理中新增，编辑功能</li></ol><h2 id="20220211（before-13）"><a href="#20220211（before-13）" class="headerlink" title="20220211（before-13）"></a>20220211（before-13）</h2><ol><li>完成角色管理中分配权限展开对话框<ol><li>tree 树形控件<ol><li>data 数据源</li><li>props 指定label和children属性名</li><li>show-checkbox 节点是否有选中框</li><li>node-key 指定唯一值（key）</li><li>通过设置ref的setCheckedKeys方法设置对应key值的状态</li><li>通过ref对象的getCheckedKeys方法获取选中的keys</li></ol></li></ol></li><li>完成用户管理基础table</li></ol><h2 id="20220212（before-14）"><a href="#20220212（before-14）" class="headerlink" title="20220212（before-14）"></a>20220212（before-14）</h2><ol><li>完成用户管理（新增，编辑，分配角色，重置密码）<ol><li>使用@close清空对话框数据，不能用before-close属性（直接改变dialogVisible这种做法不会调用before-close事件）</li></ol></li><li>傻傻的踩坑：rules写成roles，也没报错，硬找了半小时</li></ol><h2 id="20220213（before-15）"><a href="#20220213（before-15）" class="headerlink" title="20220213（before-15）"></a>20220213（before-15）</h2><ol><li>完成分配角色<ol><li>确认事件</li><li>重置密码</li><li>删除和批量删除</li><li>搜索</li></ol></li><li>vue2中使用的this.$confirm在vue3中需要导入ElMessageBox，然后ElMessageBox.confirm</li><li>flex-flow是flex-direction（控制盒子内元素排列顺序）和flex-wrap（规定flex容器是单行或者多行）复合型，如flex-flow: column 就是flex-direction的属性，同：flex-direction: column</li><li>使用default-openeds设置刷新浏览器后的默认展开sub-menu（配合动态路由）</li></ol><h2 id="20220214（before-16-after-16-5）"><a href="#20220214（before-16-after-16-5）" class="headerlink" title="20220214（before-16, after-16.5）"></a>20220214（before-16, after-16.5）</h2><ol><li>使用全局方法控制页面中的每一个按钮权限</li><li>前端完结，开始springboot后端接口编写，技术栈：<ol><li>springboot</li><li>mybatis plus</li><li>spring security</li><li>lombok</li><li>jwt</li><li>redis</li><li>hibernate validatior</li></ol></li><li>初始化springboot+mybatis-plus项目<ol><li>idea快速创建springboot</li><li>官网复制mybatis-plus依赖添加即可</li></ol></li><li>学习 Lambda 表达式</li><li>数据库搭建（表如下）<ol><li>sys_menu (menu控件数据)</li><li>sys_role (角色管理数据)</li><li>sys_role_menu</li><li>sys_user (用户管理数据)</li><li>sys_user_role</li></ol></li><li>写一个返回的统一封装类</li></ol><h2 id="20220215（after-17）"><a href="#20220215（after-17）" class="headerlink" title="20220215（after-17）"></a>20220215（after-17）</h2><ol><li>写好对应的mapper类和model</li><li>创建config类，配置分页插件</li><li>在返回包中写全局异常反馈处理</li><li>@ResponseStatus  注解，设置返回的消息模板，如返回400<ol><li>@ResponseStatus(HttpStatus.BAD_REQUEST)</li></ol></li><li>@ExceptionHandler 注解，捕获某种异常类型，如运行时异常<ol><li>@ExceptionHandler(value &#x3D; RuntimeException.class)</li></ol></li><li>认识并引入spring security （安全框架），jjwt，redis<ol><li>配置security默认用户名和密码</li></ol></li></ol><h2 id="20220216（after-18）"><a href="#20220216（after-18）" class="headerlink" title="20220216（after-18）"></a>20220216（after-18）</h2><ol><li>使用redis报错，于是修改maven镜像源，发现自己原来没有settings.xml，去找了个配置好jdk8和阿里云镜像的cv上，在idea中搜索maven修改对应的配置目录，终于正常了（浪费一小时）</li><li>在config新建RedisConfig文件，配置Redis序列化（为了让存入的数据和拿出的是一个格式，设置value为json格式）</li><li>登录页面大致流程<ol><li>前端进入页面发送请求给后端，后端返回图片key和code并存入redis</li><li>前端发起登录请求，后端通过key在redis中拿到code进行比对，返回登录成功或失败</li></ol></li><li>导入并使用google captcha（google验证码生成器）<ol><li>因为原来的com.google.com已经无法使用，现在使用com.github.axet，在mvn上搜索即可</li><li>在config下创建配置文件，设置生成图片的宽高等属性</li></ol></li><li>在controller下创建AuthController和BaseController，在BaseController中注入常用的Bean，然后再其他控制处使用extends继承即可</li><li>AuthController中写获取验证码的方法（知识点：）<ol><li>UUID.randomUUID()   生成UUID（32位的随机数字）</li><li>注入Producer（就是我们上面导入的验证码生成器）<ol><li>createText()  创建五位数的随机验证码</li><li>cretaImage()   根据传入的字符类型生成图片</li></ol></li><li>ByteArrayOutputStream对象配合ImageIO类根据文件创建IO流</li><li>Base64的前缀是 “ data:image&#x2F;jpeg;base64, “</li></ol></li></ol><h2 id="20220217（after-19）"><a href="#20220217（after-19）" class="headerlink" title="20220217（after-19）"></a>20220217（after-19）</h2><ol><li>配置security<ol><li>@EnableWebSecurity  加载security相关安全策略的配置</li><li>@EnableGlovalMethodSecurity  指定校验的时机</li></ol></li><li>看了这么多security，太陌生了，虽去补课（见security基础）</li></ol><h2 id="20220218（security-基础）"><a href="#20220218（security-基础）" class="headerlink" title="20220218（security 基础）"></a>20220218（security 基础）</h2><ol><li>使用 fastjson 的 @JsonInclude 注解，常见如下：<ol><li>ALWAYS 表示全部序列化，null和空字符串都会序列化</li><li>NON_NULL 好理解，就是值为null就不序列化</li><li>NON_EMPTY 以下情况都不会被序列化：<ol><li>null</li><li>空字符串</li><li>空集合</li><li>空数组</li><li>Optional 类型的，其引用为空</li><li>AtomicReference 类型的，其引用为空</li></ol></li></ol></li><li>jackson的ObjectMapper类介绍和使用<ol><li>ObjectMapper类是Jackson库的主要类。它提供一些功能将转换成Java对象匹配JSON结构，反之亦然。它使用JsonParser和JsonGenerator的实例实现JSON实际的读&#x2F;写</li><li>ObjectMapper类的方法<ol><li>.enable(SerializationFeature.INDENT_OUTPUT)  美化输出</li><li>.registerModule(new Jdk8Module());  jackson支持Optional特性</li><li>.writerValueAsString(对象)  按照@JsonInclude配置序列化</li></ol></li></ol></li><li>redis和jjwt工具类保存</li></ol><h2 id="20220219"><a href="#20220219" class="headerlink" title="20220219"></a>20220219</h2><p>开学麻烦</p><h2 id="20220220"><a href="#20220220" class="headerlink" title="20220220"></a>20220220</h2><ol><li><p>使用@TableName注释配置mybatis plus的映射，如数据表为sys_user，按道理说，实体类的自动映射名称是SysUser，要是实体类名称对不上，如取名为User，就可以在类上使用@TableName(value&#x3D; “sys_user”)直接配置映射表名</p></li><li><p>写UserDetailsServiceImpl实现UserDetailsService，重写loadUserByUsername方法（UserDetailsServiceImpl记得加上@Service注解）</p><ol><li>在这个方法中去查询数据库，在查询不到异常的时候，也可以通过直接使用  throw new RuntimeException(“出现异常”);  来自定义抛出异常，会被security自带的异常处理收集到</li></ol></li><li><p>java中注释加上TODO的作用（TODO占位，表示接下去该写的但是还没写的）</p></li><li><p>java8中可以使用Objects.isNull()判断是否为空，源码为 return obj &#x3D;&#x3D; null</p></li><li><p>写一个实体类实现UserDetails，重写所有方法，并将返回的布尔类型全改为true</p></li><li><p>QueryWrapper到LambdaQueryWrapper的演变（<a href="https://blog.csdn.net/qlzw1990/article/details/116996422%EF%BC%89">https://blog.csdn.net/qlzw1990/article/details/116996422）</a></p></li></ol><h2 id="20220221"><a href="#20220221" class="headerlink" title="20220221"></a>20220221</h2><ol><li>启动spring security，在测试时如出现There is PasswordEncoder mapped for the id “null”报错，则是明文密码的原因，需要在数据库的密码前面加上 {noop}，暂时这样写</li><li>关于数据库中密码前面的大括号</li><li>登录流程—–输入账号密码之后，security经过一系列过滤器后到达UserDetailsService，返回UserDetails对象数据，在权限的过滤器中判断UserDetails对象中的用户名和密码能不能和输入的对上，但是UserDetails对象由我们自定义之后，默认使用的PasswordEncoder要求数据库中的密码格式为: {id}password，它会根据id去判断密码的加密方式，但是我们一般不采用这种方式，所以就需要替换PasswordEncoder</li><li>配置类中passwordEncoder使用BCryptPasswordEncoder配置密码加密<ol><li>new BCryptPasswordEncoder().encode(“FSAN”)  得到“FSAN”的随机加盐加密后的密文</li><li>new BCryptPasswordEncoder().matches(“FSAN”, “$2a$10$qNin1NOP265Zqme378882uxos.haI3Da9JCi3gPg65GOHb&#x2F;5t1oGO”)  判断密文是否为加密后的FSAN，返回true为相同</li></ol></li></ol><h2 id="20220222"><a href="#20220222" class="headerlink" title="20220222"></a>20220222</h2><ol><li>写登录的controller，和service<ol><li>登录接口一般为post接口，数据通过json格式在请求体中传递，所以使用@PostMapping和@RequestBody</li><li>接收参数直接使用实体类接收即可</li></ol></li><li>对登录接口进行放行（不需要登录security也能调用接口），配置security<ol><li>关闭csrf</li><li>不使用session获取SecurityContent</li><li>配置不登录就可以访问的接口（匿名登陆）</li></ol></li><li>再service中使用AuthenticationManager authenticate 进行用户认证<ol><li>AuthenticationManager需要先在security配置类中先重写后注入</li><li>在service使用@Autowired引入之后使用authenticate，需要传入Authentication类型</li><li>创建UsernamePasswordAuthentication对象，因为UsernamePasswordAuthentication源码中有实现Authentication对象</li><li>使用new构造UsernamePasswordAuthentication对象时需要传入用户名和密码(user.getUsername,user.getPassword)</li><li>使用objects.isNull判断authenticate方法的返回值就知道是否有权限登录</li></ol></li></ol><h2 id="20220223"><a href="#20220223" class="headerlink" title="20220223"></a>20220223</h2><ol><li>使用redis的工具类，保存用户的id和完整的用户信息</li><li>复兴登录流程，整理思路</li></ol><h2 id="20220224"><a href="#20220224" class="headerlink" title="20220224"></a>20220224</h2><p>写材料</p><h2 id="20220225"><a href="#20220225" class="headerlink" title="20220225"></a>20220225</h2><ol><li>定义jwt过滤器（建立filter包）<ol><li>定义class继承OncePerRequestFilter重写doFilterInternal方法</li><li>使用filterChain.doFilter(request, response);对过滤器放行</li></ol></li><li>在过滤器中需要实现的操作<ol><li>获取请求过来携带的token</li><li>解析token</li><li>向redis获取用户信息</li><li>将用户信息存入SecurityContextHolder</li></ol></li></ol><h2 id="20220226"><a href="#20220226" class="headerlink" title="20220226"></a>20220226</h2><ol><li>退出登录功能实现<ol><li>写controller和server实现类</li></ol></li><li>需要实现的操作<ol><li>从SecurityContextHolder中拿取用户id</li><li>删除redis中的数据</li></ol></li><li>配置项中antMathers()<ol><li>permitAll()，设置登录或者不登陆都可以访问</li><li>anonymous()，设置不登陆可以访问</li></ol></li><li>配置项中anyRequest()<ol><li>authenticated() 其他用户在认证后都可访问</li></ol></li></ol><h2 id="20220227"><a href="#20220227" class="headerlink" title="20220227"></a>20220227</h2><ol><li>授权的实现<ol><li>首先在security配置类中使用@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)开启权限控制方案</li><li>然后在需要设置权限的方法上使用@PreAuthorize定义所需要的权限即可</li></ol></li><li>权限列表的实现<ol><li>在UserDetailsServer实现类中获取权限列表并存入UserDetail</li><li>在LoginUser实体类中添加权限列表字段（主要涉及的是List列表中数据类型的流转换）</li><li>在分析token的过滤器中就将权限列表放入UsernamePasswordAuthenticationToken中</li></ol></li><li>RBAC权限模型<ol><li>RBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用，通用的权限模型。</li><li>数据库设计：用户表（user），权限表（menu），角色表（role），角色权限关联表（role_menu），用户角色关联表（user_role）</li></ol></li><li>使用数据库中的left join on 联表查询（多对多查询）</li></ol><h2 id="20220228"><a href="#20220228" class="headerlink" title="20220228"></a>20220228</h2><ol><li>完成数据库的根据用户id查询权限列表操作，难点：<ol><li>多次使用left join连表</li><li>使用distinct去除重复（因为一个用户可能有多个角色，每个角色的权限会有重复）</li></ol></li><li>实现Serializable表示该类可以序列化，必须要加上serialVersionUID属性</li><li>完成菜单表的实体类编写</li><li>使用mybatis-plus做多表联查还是得自定xml配置文件</li><li>修改UserDetails获取的权限列表</li></ol><h2 id="20220301"><a href="#20220301" class="headerlink" title="20220301"></a>20220301</h2><ol><li>自定义异常处理介绍<ol><li>如果是认证过程出现的异常会被封装成AuthenticationException然后调用AuthenticationEntryPoint对象的方法取进行异常处理。</li><li>如果是授权过程中出想的异常会被封装成AccessDeniedException然后调用AccessDeniedHandler对象的方法取进行异常处理。</li><li>所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可</li></ol></li><li>自定义实现类<ol><li>创建AuthenticationEntryPoint实现类，重写commence方法，使用HttpStatus枚举类返回401（用户认证异常）</li><li>创建AccessDeniedHandler实现类，重写handle方法，使用HttpStatus枚举类返回403（权限不足异常）</li><li>两个实现类最后都需要设置响应体格式返回json字符串，写为一个WebUtils工具类</li></ol></li></ol><h2 id="20220302"><a href="#20220302" class="headerlink" title="20220302"></a>20220302</h2><ol><li>在springMVC的配置类中配置spring的跨域问题</li><li>在security的配置类中配置security的跨域问题</li><li>使用@PreAuthorize权限注解中<ol><li>hasAuthority 传入单个字符串表示需要权限@PreAuthorize(“hasAuthority(‘system:test:list’)”)</li><li>hasAnyAuthority 可以传入多个限制权限@PreAuthorize(“hasAnyAuthority(‘system:test:list’,’system:test:add’)”)，表示只要拥有这些权限任意一个即可访问</li></ol></li></ol><h2 id="20220303"><a href="#20220303" class="headerlink" title="20220303"></a>20220303</h2><ol><li>自定义权限认证<ol><li>获取当前用户的权限</li><li>判断用户权限集合中是否存在authority</li></ol></li><li>list集合直接使用contains判断是否有某个字符串</li><li>使用component注解传入自定义bean名，然后在@PreAuthorize权限注解处使用@调用自己定义的权限方法，如：@PreAuthorize(“@hasMyAuth(‘system:test:list’)”)</li></ol><h2 id="20220304"><a href="#20220304" class="headerlink" title="20220304"></a>20220304</h2><ol><li>自定义认证成功和失败处理器（拓展）<ol><li>实现对应接口，重写方法</li><li>添加配置类</li></ol></li><li>源码接口中的default修饰表示可重写也可以不重写</li><li>注销成功处理器<ol><li>实现LogoutSuccessHandler</li><li>添加配置类</li></ol></li></ol><h2 id="20220305"><a href="#20220305" class="headerlink" title="20220305"></a>20220305</h2><ol><li>梳理流程<ol><li>从UserDetails认证开始，无查询到用户即可抛出运行时异常，被AuthenticationEntryPoint接收时，查看authException即可</li><li>认证通过之后的操作（添加jwt和处理redis数据）也可以写在认证成功处理器中</li></ol></li><li>security基础结束</li><li>开始自己写一次jwt登录流程，了解配置类中配置项</li></ol><h2 id="20220306"><a href="#20220306" class="headerlink" title="20220306"></a>20220306</h2><ol><li>复习spring security权限认证流程，redis缓存和jwtToken</li><li>debug 自定义错误异常</li></ol><h2 id="20220307"><a href="#20220307" class="headerlink" title="20220307"></a>20220307</h2><ol><li><p>完善流程，添加CURD</p></li><li><p>security学习结束</p></li></ol><h2 id="20220308"><a href="#20220308" class="headerlink" title="20220308"></a>20220308</h2><ol><li>继续之前的Vue前后端项目的后端开发</li><li>认识@RestControllerAdvice注解，主要配合@ExceptionHandler使用，统一处理异常情况</li><li>认识@ExceptionHandler，设置捕获某种异常类</li><li>认识@ResponseStatus注解，设置一个异常类返回状态，如设置404及返回消息为No such order，@ResponseStatus(value &#x3D; HttpStatus.NOT_FOUND, reason &#x3D; “No such order”)，可以配合@ExceptionHandler注解一起使用</li></ol><h2 id="20220312"><a href="#20220312" class="headerlink" title="20220312"></a>20220312</h2><ol><li>gird布局使用自适应布局，使用ul，加上最大宽度即可居中<ol><li>auto-fit</li><li>auto-fill</li></ol></li><li>-webkit-box-reflect: below;  css3投影</li><li>animation 动画效果</li><li>defineProps  vue3新api，类似props</li></ol><h1 id="日记目录结束"><a href="#日记目录结束" class="headerlink" title="日记目录结束"></a>日记目录结束</h1>]]></content>
    
    
    <categories>
      
      <category>曾经</category>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python使用socket控制div移动</title>
    <link href="/2021/09/23/python%E4%BD%BF%E7%94%A8socket%E6%8E%A7%E5%88%B6div%E7%A7%BB%E5%8A%A8/"/>
    <url>/2021/09/23/python%E4%BD%BF%E7%94%A8socket%E6%8E%A7%E5%88%B6div%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>还是老样子</p><ol><li>使用flask写网页路由（记得跨域）</li><li>flask-socketIO来创建服务器和封装app（记得跨域）</li><li>两个路由网页一个控制一个显示（也可以多个显示）</li><li>控制发送请求到服务器，服务器发给显示页面，显示自己判断（判断处写的很妙）</li></ol><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><p>control.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/socket.io.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>控制器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#secondBox</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">700px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#secondBox</span> <span class="hljs-selector-class">.headerBox</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: 仿宋, monospace;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:active</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">5px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#up</span>, <span class="hljs-selector-id">#center</span>, <span class="hljs-selector-id">#down</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#center</span> <span class="hljs-selector-class">.one</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: auto;width: 800px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;secondBox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;headerBox&quot;</span>&gt;</span>遥控器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;up&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send(&#x27;up&#x27;)&quot;</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send(&#x27;left&#x27;)&quot;</span>&gt;</span>左<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;start()&quot;</span>&gt;</span>建立连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send(&#x27;right&#x27;)&quot;</span>&gt;</span>右<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;down&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send(&#x27;down&#x27;)&quot;</span>&gt;</span>下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px;float: right&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> socket = io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&quot;:5000&quot;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title function_">send</span> = (<span class="hljs-params">path</span>) =&gt; &#123;</span><br><span class="language-javascript">        socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;move&quot;</span>, path)</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;发出了&quot;</span> + path + <span class="hljs-string">&quot;请求&quot;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> viewDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;view&quot;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>)</span><br><span class="language-javascript">        p.<span class="hljs-property">innerText</span> = str</span><br><span class="language-javascript">        viewDiv.<span class="hljs-title function_">appendChild</span>(p)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">start</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;已经建立连接，可以使用！&quot;</span>)</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;连接不成功！看控制台&quot;</span>)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Home.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主目录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/socket.io.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> socket = io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&quot;:5000&quot;</span>)</span><br><span class="language-javascript">    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;move&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        move[data]()</span><br><span class="language-javascript">        move.<span class="hljs-title function_">move</span>()</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> move = &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">up</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            y -= <span class="hljs-number">50</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">left</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            x -= <span class="hljs-number">50</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">right</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            x += <span class="hljs-number">50</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">down</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            y += <span class="hljs-number">50</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">move</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translateX(<span class="hljs-subst">$&#123;x&#125;</span>px) translateY(<span class="hljs-subst">$&#123;y&#125;</span>px)`</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2021/9/23 21:02</span><br><span class="hljs-comment"># @Author : FSAN</span><br><span class="hljs-comment"># @File : main.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><span class="hljs-keyword">from</span> flask_cors <span class="hljs-keyword">import</span> CORS<br><span class="hljs-keyword">from</span> flask_socketio <span class="hljs-keyword">import</span> SocketIO, emit<br><br>app = Flask(<span class="hljs-string">&quot;&quot;</span>)<br>CORS(app)<br><br>socket = SocketIO()<br>socket.init_app(app, cors_allowed_origins=<span class="hljs-string">&quot;*&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;Home.html&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/control&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">control</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;control.html&quot;</span>)<br><br><br><span class="hljs-meta">@socket.on(<span class="hljs-params"><span class="hljs-string">&#x27;message&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-built_in">print</span>(data)<br><br><br><span class="hljs-meta">@socket.on(<span class="hljs-params"><span class="hljs-string">&#x27;move&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_move</span>(<span class="hljs-params">data</span>):<br>    emit(<span class="hljs-string">&quot;move&quot;</span>, data, broadcast=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    socket.run(<br>        app,<br>        host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>        port=<span class="hljs-number">5000</span>,<br>        debug=<span class="hljs-literal">True</span><br>    )<br><br></code></pre></td></tr></table></figure><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><p>添加元素忘了的去看js基础</p><p>控制器四个按钮发送四个方向到服务器，服务器直接转发到显示的html，在显示的网页上根据接收的值去调用对应的函数做相应操作就行</p><p>变量要提前赋值，服务器的debug可以不用写，我是单纯为了调试css样式方便</p>]]></content>
    
    
    <categories>
      
      <category>曾经</category>
      
      <category>python小玩意</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python使用socketio实现双向通信</title>
    <link href="/2021/09/22/python%E4%BD%BF%E7%94%A8socketio%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/09/22/python%E4%BD%BF%E7%94%A8socketio%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="H5-建立socket连接"><a href="#H5-建立socket连接" class="headerlink" title="H5 建立socket连接"></a>H5 建立socket连接</h2><h3 id="使用原生对象"><a href="#使用原生对象" class="headerlink" title="使用原生对象"></a>使用原生对象</h3><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p>判断浏览器是否支持websocket服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;WebSocket&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>    websocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:8080&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>建立连接发送数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">websocket.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;建立websocket连接成功！&quot;</span>)<br>&#125;<br>websocket.<span class="hljs-property">onmessage</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我收到了默认的消息！&quot;</span>)<br>&#125;<br>websocket.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;连接出错了！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>建议使用封装更好的socket.io.js</p><h3 id="使用socket-io-js"><a href="#使用socket-io-js" class="headerlink" title="使用socket.io.js"></a>使用socket.io.js</h3><h4 id="下载并引入："><a href="#下载并引入：" class="headerlink" title="下载并引入："></a>下载并引入：</h4><p>官网：<a href="https://socket.io/">https://socket.io/</a></p><p>中文文档：<a href="https://socketio.bootcss.com/">https://socketio.bootcss.com</a></p><p>4.1.3版本cdn：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/socket.io/4.1.3/socket.io.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>不考虑空间的话使用不压缩的好，有代码提示和补全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> websocket_url = <span class="hljs-string">&#x27;http://127.0.0.1:5000&#x27;</span>  <br><span class="hljs-keyword">let</span> socket = io.<span class="hljs-title function_">connect</span>(websocket_url)<br></code></pre></td></tr></table></figure><blockquote><p>没错，直接使用http协议，这个库会自动解析并创建websocket对象</p></blockquote><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>使用连接对象监听和发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;testRequest&#x27;</span>,&#123;<br><span class="hljs-string">&#x27;params&#x27;</span> : <span class="hljs-string">&#x27;测试连接&#x27;</span><br>&#125;)<br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;response&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(data.<span class="hljs-property">code</span> == <span class="hljs-string">&#x27;200&#x27;</span>)&#123;<br><span class="hljs-title function_">alert</span>(data.<span class="hljs-property">msg</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;error&quot;</span>)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用send发送就一定是message接收（与emit的区别）</p><h2 id="python中socket服务编写"><a href="#python中socket服务编写" class="headerlink" title="python中socket服务编写"></a>python中socket服务编写</h2><p>python中对应的包为<code>flask-socketio</code></p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>导入flask-socketio下的SocketIO和emit</li><li>导入flask框架，并初始化(记得使用跨域)</li><li>使用SocketIO建立服务器连接对象</li><li>使用连接对象的init_app方法在flask对象上建立应用服务</li></ol><blockquote><p>tips:</p><ol><li>socket 使用 <code>cors_allowed_origins=&quot;*&quot;</code>解决跨域</li><li>如要广播多个网页，要在emit或者send方法后面加上broadcast&#x3D;True</li></ol></blockquote><h3 id="最简结构"><a href="#最简结构" class="headerlink" title="最简结构"></a>最简结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask-socketio <span class="hljs-keyword">import</span> SocketIO,emit<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_cors <span class="hljs-keyword">import</span> CORS<br><br>app = Flask(<span class="hljs-string">&quot;&quot;</span>)<br>CORS(app)<br>socket = SocketIO()<br>socket.init_app(app, cors_allowed_origins=<span class="hljs-string">&quot;*&quot;</span>)<br><br><br><span class="hljs-meta">@socket.on(<span class="hljs-params"><span class="hljs-string">&quot;testRequest&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_testRequest</span>(<span class="hljs-params">data</span>):<br>    emit(<span class="hljs-string">&quot;response&quot;</span>, &#123;<br>        <span class="hljs-string">&#x27;msg&#x27;</span>: data.params<br>    &#125;)<br>    <br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    socket.run(<br>        app,<br>        port=<span class="hljs-number">5000</span>,<br>        host=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dos（python极简版）</title>
    <link href="/2021/09/19/%E7%AE%80%E5%8D%95%E7%9A%84dos/"/>
    <url>/2021/09/19/%E7%AE%80%E5%8D%95%E7%9A%84dos/</url>
    
    <content type="html"><![CDATA[<h2 id="DDos介绍"><a href="#DDos介绍" class="headerlink" title="DDos介绍"></a>DDos介绍</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>分布式拒绝服务（Distributed Denial of Service）攻击指借助于客户&#x2F;服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动dos攻击，从而成倍地提高拒绝服务攻击的威力。通常该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。</p><h2 id="使用python模拟点对点的攻击"><a href="#使用python模拟点对点的攻击" class="headerlink" title="使用python模拟点对点的攻击"></a>使用python模拟点对点的攻击</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>利用多线程的无限循环发起请求，统计结果以及抛出502错误</p><ol><li>创建类继承多线程</li><li>使用init封装url</li><li>run方法传入url，以及错误处理</li><li>统计数据和主方法启动</li></ol><h3 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2021/9/19 13:45</span><br><span class="hljs-comment"># @Author : FSAN</span><br><span class="hljs-comment"># @File : sendHttpRequest.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><br><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> requests <span class="hljs-keyword">import</span> get<br><br>status = &#123;<span class="hljs-string">&quot;200&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;404&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;500&quot;</span>: <span class="hljs-number">0</span>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sendHtpp</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, HOST, PORT</span>):<br>        <span class="hljs-keyword">global</span> status<br>        self.url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;HOST&#125;</span>:<span class="hljs-subst">&#123;PORT&#125;</span>&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            sendHtpp.START(self.url)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">START</span>(<span class="hljs-params">url</span>):<br>        <span class="hljs-keyword">try</span>:<br>            resp = get(url).status_code<br>            status[<span class="hljs-built_in">str</span>(resp)] += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(status)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        s = sendHtpp(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">81</span>)<br>        s.start()<br>    s.join()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>多线程请求</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask框架</title>
    <link href="/2021/09/13/Flask%E6%A1%86%E6%9E%B6/"/>
    <url>/2021/09/13/Flask%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="使用flask框架"><a href="#使用flask框架" class="headerlink" title="使用flask框架"></a>使用flask框架</h3><p>官网：<a href="https://dormousehole.readthedocs.io/en/latest/quickstart.html#id2">https://dormousehole.readthedocs.io/en/latest/quickstart.html#id2</a></p><blockquote><p>初始化：</p></blockquote><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install flask<br></code></pre></td></tr></table></figure><span id="more"></span><ol><li>按需导入Flask和拆分用的Blueprint（蓝图）</li><li>定义一个变量初始化flask框架  Flask(“”)</li><li>在main方法中使用初始化变量的run方法，定义两个参数，host和port</li></ol><h3 id="最小的程序"><a href="#最小的程序" class="headerlink" title="最小的程序"></a>最小的程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>在控制台启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD">&gt; <span class="hljs-built_in">set</span> FLASK_APP=hello<br>&gt; flask run<br></code></pre></td></tr></table></figure><h3 id="使用python启动的最小程序"><a href="#使用python启动的最小程序" class="headerlink" title="使用python启动的最小程序"></a>使用python启动的最小程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(<span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!!&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<br>        host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>        port=<span class="hljs-number">5000</span><br>    )<br></code></pre></td></tr></table></figure><p> 注意：这里run下的两个参数，host是启动的地址，写0.0.0.0就是使用网络地址<a href="http://192.168.214.206:5000/">http://192.168.214.206:5000/</a> ，端口号默认5000</p><h3 id="使用Blueprint"><a href="#使用Blueprint" class="headerlink" title="使用Blueprint"></a>使用Blueprint</h3><blockquote><p>写Blueprint</p></blockquote><p>作用：让代码整体更美观，拆分代码块</p><ol><li>创建api下的文件，导入Blueprint</li><li>定义蓝图的主路径并指定返回的名字</li><li>写对应接口</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint<br><br>app = Blueprint(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, url_prefix=<span class="hljs-string">&#x27;/api&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;09/13/21/58&#x27;</span>,<br>        <span class="hljs-string">&#x27;print&#x27;</span>: <span class="hljs-string">&#x27;Hello World!!&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>注意这里的url_prefix不要写成url_defaults</p><br><blockquote><p>用Blueprint</p></blockquote><p>在启动的地方先使用import导入文件下的返回值</p><p>使用Flask初始化的对象下register_blueprint方法指定名字，在导入时不能重名，所以可以使用as指定副名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pythonweb.api.hello <span class="hljs-keyword">import</span> app <span class="hljs-keyword">as</span> hello_api<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(<span class="hljs-string">&quot;&quot;</span>)<br>app.register_blueprint(hello_api)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<br>        host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>        port=<span class="hljs-string">&quot;5000&quot;</span><br>    )<br></code></pre></td></tr></table></figure><h3 id="自定义路径和接口地址"><a href="#自定义路径和接口地址" class="headerlink" title="自定义路径和接口地址"></a>自定义路径和接口地址</h3><blockquote><p>yaml文件</p></blockquote><p>内容仿造java就可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><br><blockquote><p>写提供属性的py文件</p></blockquote><p>思路就是使用yaml模块下的load下的get方法，提取出yaml文件中的属性对应的值，再在主启动中调用</p><p>但是yaml下的load模块现在被弃用了，如果还要再使用就得在load中加一个属性，Loader&#x3D;FullLoader，就要再导入FullLoader模块</p><p>get方法的第二个参数是在第一个参数为空时调用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> yaml <span class="hljs-keyword">import</span> FullLoader, load<br><br>ymlLoad = load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myConfig/serve.yml&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>), Loader=FullLoader)<br>PORT = ymlLoad.get(<span class="hljs-string">&#x27;server&#x27;</span>).get(<span class="hljs-string">&#x27;port&#x27;</span>, <span class="hljs-number">80</span>)<br>HOST = ymlLoad.get(<span class="hljs-string">&#x27;server&#x27;</span>).get(<span class="hljs-string">&#x27;host&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)<br></code></pre></td></tr></table></figure><br><blockquote><p>调用数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pythonweb.config.serve <span class="hljs-keyword">import</span> HOST, PORT<br><br>...<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<br>        host=HOST,<br>        port=PORT<br>    )<br></code></pre></td></tr></table></figure><h3 id="使用before和after实现判断"><a href="#使用before和after实现判断" class="headerlink" title="使用before和after实现判断"></a>使用before和after实现判断</h3><blockquote><p>判断是否是程序访问</p></blockquote><p>html页面使用axios发起请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send()&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title function_">send</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> data = axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;qixin&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123&#x27;</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在python中的login接口上使用request接收json数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, request<br><br>api = Blueprint(<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;login&quot;</span>, url_prefix=<span class="hljs-string">&quot;/api&quot;</span>)<br><br><br><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>():<br>    <span class="hljs-built_in">print</span>(request.json[<span class="hljs-string">&quot;username&quot;</span>])<br>    <span class="hljs-built_in">print</span>(request.json[<span class="hljs-string">&quot;password&quot;</span>])<br>    <span class="hljs-keyword">if</span> request.json[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&quot;qixin&quot;</span>:<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-number">200</span>,<br>            <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;确认身份成功！&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-number">404</span>,<br>            <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;确认身份失败&quot;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>在主线路上使用before下的函数，判断ua即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.before_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.headers[<span class="hljs-string">&quot;User-Agent&quot;</span>].find(<span class="hljs-string">&quot;PostmanRuntime&quot;</span>) == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;请不要使用程序访问！&quot;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>使用postman测试是否成功：</p><ol><li>选择Headers，key:COntent-Type，value:application&#x2F;json</li><li>选择body，写入下列数据</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;qixin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>post方法发送的是json形式，使用request下的json方法接收</li><li>get方法发送的是地址形式，使用request下的args方法接收</li></ol><h3 id="input发送并接收file文件"><a href="#input发送并接收file文件" class="headerlink" title="input发送并接收file文件"></a>input发送并接收file文件</h3><blockquote><p>思路：</p></blockquote><p>前端使用input中type样式为file的选择发送文件，然后在button点击事件中拿到input标签下的files属性，再根据下标0拿到数据，创建一个FormData对象，使用addend方法添加键值对形式拿到的数据当做数据使用axios的post方法发送。</p><p>后端使用request的files.get方法拿取数据，再使用二进制写入本地的文件夹下</p><p>index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send()&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendFile()&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title function_">send</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: res&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;qixin&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123&#x27;</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendFile</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> file = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;file1&quot;</span>).<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> fileData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>()</span><br><span class="language-javascript">        fileData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, file)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>:res&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/setFile&quot;</span>, fileData)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">url</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/setFile&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    file = request.files.get(<span class="hljs-string">&quot;file&quot;</span>)<br>    b = file.stream.read()<br>    name = file.filename<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;static/img/&quot;</span> + name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> img:<br>        img.write(b)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">f&quot;http://122.239.1.117:1234/static/img/<span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>request中files可以拿到传来的FormData文件，request.remote_addr则可以拿到请求客户端的ip地址（小心这个）</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习</title>
    <link href="/2021/09/12/Redis%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/09/12/Redis%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，即远程字典服务，Redis是一个使用ANSI C编写的开源，包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>多样的数据类型</li><li>持久化</li><li>集群 </li><li>事务</li></ol><h3 id="为什么快？"><a href="#为什么快？" class="headerlink" title="为什么快？"></a>为什么快？</h3><p>Redis 是单线程的，但是Redis很快，官网表示，Redis是基于内存操作，CPU不是Redis性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了！<br>Redis是C语言写的，官方提供的数据为 100000+ 的QPS（每秒处理请求数）</p><p>核心：redis是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！！！），对于内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个CPU上的，在内存情况下，这个就是最佳的方案！</p><blockquote><p>误区：</p><ol><li>高性能的服务器一定是多线程的</li><li>多线程一定比单线程效率高</li></ol></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>中文网: <a href="http://www.redis.cn/">http://www.redis.cn/</a></p><h3 id="windows-下使用"><a href="#windows-下使用" class="headerlink" title="windows 下使用"></a>windows 下使用</h3><p>使用github托管仓库：<a href="http://github.com/dmajkic/redis/releases">http://github.com/dmajkic/redis/releases</a></p><p>或：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server.exe redis.windows.conf<br></code></pre></td></tr></table></figure><p>启动控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli.exe -h 127.0.0.1 -p 6379<br>ping<br></code></pre></td></tr></table></figure><p>ping 之后能返回PONG就说明了redis启动正常</p><h3 id="linux下使用"><a href="#linux下使用" class="headerlink" title="linux下使用"></a>linux下使用</h3><p>可见docker部署redis</p><h2 id="redis命令基础"><a href="#redis命令基础" class="headerlink" title="redis命令基础"></a>redis命令基础</h2><h3 id="String类型操作"><a href="#String类型操作" class="headerlink" title="String类型操作"></a>String类型操作</h3><h4 id="切换库"><a href="#切换库" class="headerlink" title="切换库"></a>切换库</h4><p>redis默认是有16个数据库的，默认使用第0个（类似下标）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> 3<br></code></pre></td></tr></table></figure><p>如果有(error) NOAUTH Authentication required.报错，则是因为没有登录，先使用auth登录，：如 auth “FSAN”</p><h4 id="查看当前库的大小："><a href="#查看当前库的大小：" class="headerlink" title="查看当前库的大小："></a>查看当前库的大小：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dbsize<br></code></pre></td></tr></table></figure><h4 id="设置，获取值"><a href="#设置，获取值" class="headerlink" title="设置，获取值"></a>设置，获取值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> name FSAN<br>get name<br></code></pre></td></tr></table></figure><p>记住在哪个库中就行</p><h4 id="获取全部键："><a href="#获取全部键：" class="headerlink" title="获取全部键："></a>获取全部键：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keys *<br></code></pre></td></tr></table></figure><h4 id="清空数据库："><a href="#清空数据库：" class="headerlink" title="清空数据库："></a>清空数据库：</h4><p>清空当前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flushdb<br></code></pre></td></tr></table></figure><p>清空所有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flushall<br></code></pre></td></tr></table></figure><h4 id="判断是否存在key"><a href="#判断是否存在key" class="headerlink" title="判断是否存在key"></a>判断是否存在key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exists key<br></code></pre></td></tr></table></figure><p>如果存在则返回1，不存在则是0</p><h4 id="移动值到另一个库中"><a href="#移动值到另一个库中" class="headerlink" title="移动值到另一个库中:"></a>移动值到另一个库中:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">move key 库下标<br></code></pre></td></tr></table></figure><p>如 move name 1 名字移动到下标1的数据库中，作用于逻辑删除</p><h4 id="为键值对设置过期时间"><a href="#为键值对设置过期时间" class="headerlink" title="为键值对设置过期时间"></a>为键值对设置过期时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">expire key secoud<br></code></pre></td></tr></table></figure><blockquote><p>secoud为秒数</p></blockquote><h4 id="查看是否过期"><a href="#查看是否过期" class="headerlink" title="查看是否过期"></a>查看是否过期</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ttl key<br></code></pre></td></tr></table></figure><p>-1 则无过期<br>-2 则已过期或不存在该数据</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据:"></a>删除数据:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">del key<br></code></pre></td></tr></table></figure><h4 id="查看当前类型："><a href="#查看当前类型：" class="headerlink" title="查看当前类型："></a>查看当前类型：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> key<br></code></pre></td></tr></table></figure><h4 id="获取字符串长度，添加长度"><a href="#获取字符串长度，添加长度" class="headerlink" title="获取字符串长度，添加长度"></a>获取字符串长度，添加长度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">strlen key <span class="hljs-comment"># 返回类型和长度</span><br>append <span class="hljs-string">&quot;new str&quot;</span> <span class="hljs-comment"># 在字符串后面追加字符串，不存在则新建</span><br></code></pre></td></tr></table></figure><h4 id="自增1，自减1："><a href="#自增1，自减1：" class="headerlink" title="自增1，自减1："></a>自增1，自减1：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">incr key <span class="hljs-comment"># 加一</span><br>decr key <span class="hljs-comment"># 减一</span><br></code></pre></td></tr></table></figure><h4 id="增加，减少指定数："><a href="#增加，减少指定数：" class="headerlink" title="增加，减少指定数："></a>增加，减少指定数：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">incrby key 10 <span class="hljs-comment"># 加10</span><br>decrby key 10 <span class="hljs-comment"># 减10</span><br></code></pre></td></tr></table></figure><h4 id="setex，setnx（重点）"><a href="#setex，setnx（重点）" class="headerlink" title="setex，setnx（重点）"></a>setex，setnx（重点）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">setex key secoud <span class="hljs-string">&quot;value&quot;</span> <span class="hljs-comment"># 一次设置三个参数，创建了键值对并设置过期时间（秒）</span><br>setnx key <span class="hljs-string">&quot;value&quot;</span> <span class="hljs-comment"># 如果不存在则设置，对于已经存在的不变</span><br></code></pre></td></tr></table></figure><p>setnx的返回值状态，0表示设置失败，以后常用于做分布式锁</p><h4 id="批量操作："><a href="#批量操作：" class="headerlink" title="批量操作："></a>批量操作：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mset k1 v1 k2 v2 k3 v3<br>mget k1 k2 k3<br></code></pre></td></tr></table></figure><p>设置了三个键值对，获取三个对应的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msetnx k1 v2 k2 v3<br></code></pre></td></tr></table></figure><p>设置k1 k2的值，但如果存在则设置失败<br>与上面的mget，mset一样，属于原子性操作，要么一起成功，要么就都失败，回滚</p><h4 id="对key的巧妙的设计："><a href="#对key的巧妙的设计：" class="headerlink" title="对key的巧妙的设计："></a>对key的巧妙的设计：</h4><p>key的名称可以这样取：user:{id}:{filed}，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">setex user:1:name 10 FSAN<br>setex user:1:age 10 19<br></code></pre></td></tr></table></figure><p>设置了user:1:name，user:1:age两个数据，10秒过期<br>这样可以类似关系型数据库，方便顺序取数据</p><h4 id="常用组合式命令："><a href="#常用组合式命令：" class="headerlink" title="常用组合式命令："></a>常用组合式命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">getset user:1:name FSAN<br></code></pre></td></tr></table></figure><p>先获取user:1:name的值，再设置一个新的值</p><h4 id="存储对象："><a href="#存储对象：" class="headerlink" title="存储对象："></a>存储对象：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> myObject &#123;name:FSAN,age:19&#125;<br></code></pre></td></tr></table></figure><p>看似存储了一个对象，实际在redis中是存储了一个json字符串，本质还是String类型</p><h3 id="List类型操作"><a href="#List类型操作" class="headerlink" title="List类型操作"></a>List类型操作</h3><h4 id="添加数据-lpush-rpush-："><a href="#添加数据-lpush-rpush-：" class="headerlink" title="添加数据(lpush,rpush)："></a>添加数据(lpush,rpush)：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpush myList end<br>rpush myList first<br></code></pre></td></tr></table></figure><p>lpush 对指定列表的左边（left）添加一个值<br>rpush 对指定列表的右边（right）添加一个值</p><h4 id="获取数据-lrange-："><a href="#获取数据-lrange-：" class="headerlink" title="获取数据(lrange)："></a>获取数据(lrange)：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lrange myList 0 -1<br></code></pre></td></tr></table></figure><p>lrange获取列表数据，下标从0开始，取到-1（全部获取）<br>这里的l意思不是left，是list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange myList 0 -1<br>1) <span class="hljs-string">&quot;4&quot;</span><br>2) <span class="hljs-string">&quot;1,2,3&quot;</span><br>3) <span class="hljs-string">&quot;123312&quot;</span><br>127.0.0.1:6379&gt; lrange myList 0 1<br>1) <span class="hljs-string">&quot;4&quot;</span><br>2) <span class="hljs-string">&quot;1,2,3&quot;</span><br></code></pre></td></tr></table></figure><p>从myList中获取下标为0-1的数据</p><h4 id="默认移除数据（添加使用push，移除就是pop）"><a href="#默认移除数据（添加使用push，移除就是pop）" class="headerlink" title="默认移除数据（添加使用push，移除就是pop）"></a>默认移除数据（添加使用push，移除就是pop）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpop myList<br>rpop myList<br></code></pre></td></tr></table></figure><p>lpop 从左边移除一个数据<br>rpop 从右边移除一个数据<br>执行命令之后，会返回被移除的对象</p><h4 id="移除指定的值-lrem"><a href="#移除指定的值-lrem" class="headerlink" title="移除指定的值(lrem)"></a>移除指定的值(lrem)</h4><p>移除myList中值为FSAN的一条数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lrem myList 1 FSAN<br></code></pre></td></tr></table></figure><blockquote><p>l(list)rem(remove)</p></blockquote><h4 id="获取列表长度-llen-："><a href="#获取列表长度-llen-：" class="headerlink" title="获取列表长度(llen)："></a>获取列表长度(llen)：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">llen myList<br></code></pre></td></tr></table></figure><blockquote><p>l(list)len(length)</p></blockquote><h4 id="裁剪ltrim（只留下指定范围的数据）"><a href="#裁剪ltrim（只留下指定范围的数据）" class="headerlink" title="裁剪ltrim（只留下指定范围的数据）"></a>裁剪ltrim（只留下指定范围的数据）</h4><p>现在有六个数据，FSAN6下标为0，FSAN1下标为5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange myList 0 -1<br>1) <span class="hljs-string">&quot;FSAN6&quot;</span><br>2) <span class="hljs-string">&quot;FSAN5&quot;</span><br>3) <span class="hljs-string">&quot;FSAN4&quot;</span><br>4) <span class="hljs-string">&quot;FSAN3&quot;</span><br>5) <span class="hljs-string">&quot;FSAN2&quot;</span><br>6) <span class="hljs-string">&quot;FSAN1&quot;</span><br></code></pre></td></tr></table></figure><p>只保留下标2到4的数据（即FSAN4，FSAN3，FSAN2）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; ltrim myList 2 4<br></code></pre></td></tr></table></figure><h4 id="将一个列表的最后一个元素添加到新的列表中（rpoplpush）"><a href="#将一个列表的最后一个元素添加到新的列表中（rpoplpush）" class="headerlink" title="将一个列表的最后一个元素添加到新的列表中（rpoplpush）"></a>将一个列表的最后一个元素添加到新的列表中（rpoplpush）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; rpoplpush myList myListBak<br><span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>返回值是被移动的参数</p><h4 id="更新列表中的元素-lset-："><a href="#更新列表中的元素-lset-：" class="headerlink" title="更新列表中的元素(lset)："></a>更新列表中的元素(lset)：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lset myListBak 0 useLset<br>OK<br></code></pre></td></tr></table></figure><p>将myListBak中下标为0的元素更新为”useLset”</p><h4 id="在列表的指定元素之前或者之后插入元素（linsert）"><a href="#在列表的指定元素之前或者之后插入元素（linsert）" class="headerlink" title="在列表的指定元素之前或者之后插入元素（linsert）"></a>在列表的指定元素之前或者之后插入元素（linsert）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; linsert myList before 4 10<br></code></pre></td></tr></table></figure><p>l(list)insert ,在myList列表中的”4”元素之前<br>如果不存在就会失败</p><h3 id="set（集合）类型"><a href="#set（集合）类型" class="headerlink" title="set（集合）类型"></a>set（集合）类型</h3><p>set中的值是无序的，不能重复的</p><h4 id="set集合中添加元素（sadd）"><a href="#set集合中添加元素（sadd）" class="headerlink" title="set集合中添加元素（sadd）"></a>set集合中添加元素（sadd）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; sadd name FSAN<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>s(set)add</p><h4 id="查看指定set中所有值（smembers）"><a href="#查看指定set中所有值（smembers）" class="headerlink" title="查看指定set中所有值（smembers）"></a>查看指定set中所有值（smembers）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; smembers name<br>1) <span class="hljs-string">&quot;FSAN&quot;</span><br></code></pre></td></tr></table></figure><p>s(set)member(成员)s</p><h4 id="判断某一个值是不是在set集合中（sismember）"><a href="#判断某一个值是不是在set集合中（sismember）" class="headerlink" title="判断某一个值是不是在set集合中（sismember）"></a>判断某一个值是不是在set集合中（sismember）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; sismember name BSAN<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>s(set)is member，1：在  0：不在</p><h4 id="获取set集合中内容元素的个数（scard）"><a href="#获取set集合中内容元素的个数（scard）" class="headerlink" title="获取set集合中内容元素的个数（scard）"></a>获取set集合中内容元素的个数（scard）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; scard name<br>(<span class="hljs-built_in">integer</span>) 2<br></code></pre></td></tr></table></figure><h4 id="移除set集合中的指定元素（srem）"><a href="#移除set集合中的指定元素（srem）" class="headerlink" title="移除set集合中的指定元素（srem）"></a>移除set集合中的指定元素（srem）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; srem name BSAN<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><ul><li>s(set)rem(remove)</li></ul><h4 id="从一个集合中随机抽选出元素（srandmember）"><a href="#从一个集合中随机抽选出元素（srandmember）" class="headerlink" title="从一个集合中随机抽选出元素（srandmember）"></a>从一个集合中随机抽选出元素（srandmember）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; srandmember name<br><span class="hljs-string">&quot;FSAN&quot;</span><br></code></pre></td></tr></table></figure><ul><li>s(set)rand(随机)member</li><li>可以在后面加上数据，表示抽取的个数</li></ul><p>抽两个随机数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; srandmember name 2<br>1) <span class="hljs-string">&quot;FSAN&quot;</span><br>2) <span class="hljs-string">&quot;BSAN&quot;</span><br></code></pre></td></tr></table></figure><p>当数据不够的时候，不会报错，继续返回</p><h4 id="随机移除集合中的一个成员（spop）："><a href="#随机移除集合中的一个成员（spop）：" class="headerlink" title="随机移除集合中的一个成员（spop）："></a>随机移除集合中的一个成员（spop）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; spop name 1<br>1) <span class="hljs-string">&quot;BSAN6&quot;</span><br></code></pre></td></tr></table></figure><p>pop在列表中是移除在栈顶的一个元素，但是在set集合中成员是无序的，所以变为随机删除了</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html练习案例</title>
    <link href="/2021/08/19/html%E7%BB%83%E4%B9%A0%E6%A1%88%E4%BE%8B/"/>
    <url>/2021/08/19/html%E7%BB%83%E4%B9%A0%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="小标题案例（text-indent-文字缩进）"><a href="#小标题案例（text-indent-文字缩进）" class="headerlink" title="小标题案例（text-indent  文字缩进）"></a>小标题案例（text-indent  文字缩进）</h2><p>效果图：</p><p><img src="https://s2.loli.net/2022/08/01/L1Fm8QZjz6YlO4H.png"></p><p>知识点：</p><ol><li>text-indent  文字缩进</li><li>background-position  背景图位置</li></ol><p>思路：</p><ol><li>图标当作div的背景，向左偏移</li><li>文字垂直居中，缩进显示图标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-comment">/*IFC模型*/</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/*文字缩进30px宽度，显示图标*/</span></span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*引入图标，向左偏移30px，垂直居中对齐*/</span></span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;https://game.gtimg.cn/images/js/title/title_sprite.png&#x27;</span>) no-repeat -<span class="hljs-number">30px</span> center;</span><br><span class="language-css">            <span class="hljs-comment">/*文字垂直居中*/</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>成长守护平台<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>知识点：</p><ol><li>普通导航栏布局</li><li>复习伪类元素</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#F08A5D</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-top</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#F08A5D</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>设为首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>手机新浪网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>移动客户端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>关注我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>a标签的默认高度就是父元素的行高</p><p>个人觉得太简单了，于是加了点动效：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br> <span class="hljs-attribute">text-decoration</span>: none;<br> <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br> <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br> <span class="hljs-attribute">display</span>: inline-block;<br> <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1px</span>;<br> <span class="hljs-attribute">transition</span>: .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br> <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br> <span class="hljs-attribute">color</span>: <span class="hljs-number">#F08A5D</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:after</span>&#123;<br> <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br> <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br> <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br> <span class="hljs-attribute">transition</span>: .<span class="hljs-number">5s</span>;<br> <span class="hljs-attribute">background</span>: <span class="hljs-number">#F08A5D</span>;<br> <span class="hljs-attribute">display</span>: block;<br> <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;<br> <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="小米侧边栏"><a href="#小米侧边栏" class="headerlink" title="小米侧边栏"></a>小米侧边栏</h2><p>知识点：</p><ol><li>垂直导航栏布局</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#7D7D7D</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: <span class="hljs-number">15px</span>/<span class="hljs-number">50px</span> <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#EEEEEE</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#FF9234</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>手机电话卡<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电视 盒子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>笔记本 平板<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>出行 穿搭<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>智能 路由器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>健康 儿童<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>耳机 音响<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="产品展示卡"><a href="#产品展示卡" class="headerlink" title="产品展示卡"></a>产品展示卡</h2><ol><li>padding 百分比计算</li><li>文字单行省略</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-css">            图片显示处理：</span></span><br><span class="hljs-comment"><span class="language-css">            padding百分比对于父元素宽度计算，这里图片要求宽:高 100:45</span></span><br><span class="hljs-comment"><span class="language-css">         */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.img-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">45%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.img-box</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: .<span class="hljs-number">3s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.img-box</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span> <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: <span class="hljs-number">15px</span>/<span class="hljs-number">2</span> <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.assess</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#C5C5C5</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-css">            让盒子中的元素全部变为行内标签</span></span><br><span class="hljs-comment"><span class="language-css">            white-space: nowrap;  超出不换行</span></span><br><span class="hljs-comment"><span class="language-css">            text-overflow: ellipsis;  超出文字省略号表示</span></span><br><span class="hljs-comment"><span class="language-css">            overflow: hidden;  隐藏超出文字</span></span><br><span class="hljs-comment"><span class="language-css">         */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.content-footer</span> * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="language-css">            <span class="hljs-attribute">text-overflow</span>: ellipsis;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ossweb-img.qq.com/upload/webplat/info/yxzj/20181210/86638782789061.jpg&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>快递牛，整体不错蓝牙可以说秒连，红米给力<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;assess&quot;</span>&gt;</span>来自于 XXXXX 的评价<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 70%&quot;</span>&gt;</span>Redmi AirDots真无线蓝牙<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 0 7px 0 5px;color: #ccc&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #F08A5D;font-weight: bold;max-width: 30%&quot;</span>&gt;</span>99.9元<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="快报"><a href="#快报" class="headerlink" title="快报"></a>快报</h2><p>知识点：</p><ol><li>行高继承</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#393E46</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: <span class="hljs-number">15px</span>/<span class="hljs-number">1.5</span> <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">15px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>品优购快报<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>【特惠】爆款耳机五折秒！<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>【特惠】母亲节，健康好礼低至五折！<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>【特惠】爆款耳机5折秒！<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>【特惠】9.9元洗100张照片！<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>【特惠】长虹智能空调立省1000<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="小米首页展示导航栏"><a href="#小米首页展示导航栏" class="headerlink" title="小米首页展示导航栏"></a>小米首页展示导航栏</h2><p>知识点：</p><ol><li>超链接配合无序列表做导航栏</li><li>外边距合并原理</li><li>盒子模型</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.header</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#393E46</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: <span class="hljs-number">15px</span>/<span class="hljs-number">50px</span> <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#EEEEEE</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#FF9234</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.plan</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.plan</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>手机 电话卡<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电视 盒子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>笔记本 平板<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>出行 穿搭<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>智能 路由器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>健康 儿童<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>耳机 音响<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;plan&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://res.youpin.mi-img.com/youpinoper/79acf6d5_b744_4988_ada9_5dde11aaebdf.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="学成在线"><a href="#学成在线" class="headerlink" title="学成在线"></a>学成在线</h2><p>知识点：</p><ol><li>取名</li><li>浮动布局</li><li>链接标签  ul &gt; li &gt; a</li></ol><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--头部 start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header base-box&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    logo--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    导航栏--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>课程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>职业规划<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    搜索框--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入关键字&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    用户模块--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/user.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        FSAN<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--头部 end--&gt;</span><br><br><span class="hljs-comment">&lt;!--banner start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;base-box&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        左侧边导航--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>前端开发<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>后端开发<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>移动开发<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>人工智能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>商业预测<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>云计算&amp;大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>运维&amp;从测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>UI设计<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        右边课程 course--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;course&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我的课程表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bd&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>继续学习 程序语言设计<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>正在学习，使用对象<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>继续学习 程序语言设计<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>正在学习，使用对象<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>继续学习 程序语言设计<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>正在学习，使用对象<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;more&quot;</span>&gt;</span>全部课程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--banner end--&gt;</span><br><br><span class="hljs-comment">&lt;!--goods start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods base-box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>精品推荐<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>JQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Spark<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>JavaWeb<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>JavaWeb<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>修改兴趣<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--goods end--&gt;</span><br><br><span class="hljs-comment">&lt;!--module1 start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module1 base-box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>精品推荐<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>查看更多<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-img&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/course01.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-bd&quot;</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color-text&quot;</span>&gt;</span>高级<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        1125人在学习<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--module1 end--&gt;</span><br><br><span class="hljs-comment">&lt;!--footer start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;base-box&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        左侧--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                学成在线致力于普及中国最好的教育它与中国一流大学和机构合作提供在线课程。<br>                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>                © 2017年XTCG Inc.保留所有权利。-沪ICP备15025210号<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>下载APP<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        右侧列表--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>关于学成网<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>管理团队<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>工作机会<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>客户服务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>帮助<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>关于学成网<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>管理团队<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>工作机会<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>客户服务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>帮助<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>关于学成网<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>管理团队<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>工作机会<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>客户服务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>帮助<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--footer end--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f3f5f7</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><br><span class="hljs-selector-class">.base-box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.base-box</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><br><br><span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto <span class="hljs-number">29px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>&#125;<br><br><span class="hljs-comment">/*头部logo*/</span><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.logo</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">195px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>&#125;<br><br><span class="hljs-comment">/*头部导航栏*/</span><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.nav</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#050505</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.search</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">70px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">412px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.search</span> <span class="hljs-selector-tag">input</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">border-right</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#bfbfbf</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">360px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">outline</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.search</span> <span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-comment">/*按钮有默认边框*/</span><br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./img/btn.png&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.user</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.user</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">vertical-align</span>: middle;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">421px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#1b026b</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./img/big-banner.png&quot;</span>) no-repeat top center;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.sub-nav</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.sub-nav</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">45px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">45px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.sub-nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.sub-nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.sub-nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.sub-nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">50%</span>);<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">230px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9bceea</span>;<br>    <span class="hljs-attribute">font</span>: <span class="hljs-number">18px</span>/ <span class="hljs-number">48px</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">2px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-class">.bd</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-class">.bd</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-class">.bd</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-tag">h4</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>&#125;<br><br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-class">.bd</span> <span class="hljs-selector-tag">h4</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#4e4e4e</span>;<br>    <span class="hljs-attribute">font-weight</span>: normal;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-class">.bd</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#a5a5a5</span>;<br>&#125;<br><br><span class="hljs-selector-class">.banner</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.course</span> <span class="hljs-selector-class">.bd</span> <span class="hljs-selector-class">.more</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">38px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">35px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;|&#x27;</span>;<br>    <span class="hljs-attribute">line-height</span>: normal;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-class">.end</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.goods</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.title</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.title</span> <span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">font-weight</span>: normal;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#494949</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.title</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#a5a5a5</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">30px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1234px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">228px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">270px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-class">.content-img</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">155px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-class">.content-img</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">object-fit</span>: cover;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-class">.content-bd</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#050505</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-class">.info</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-class">.color-text</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff7c2d</span>;<br>&#125;<br><br><span class="hljs-selector-class">.module1</span> <span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-class">.color-text</span> + <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">7px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> &#123;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-comment">/*.footer .base-box:after &#123;*/</span><br><span class="hljs-comment">/*    content: &#x27;&#x27;;*/</span><br><span class="hljs-comment">/*    display: block;*/</span><br><span class="hljs-comment">/*    clear: both;*/</span><br><span class="hljs-comment">/*    visibility: hidden;*/</span><br><span class="hljs-comment">/*    height: 0;*/</span><br><span class="hljs-comment">/*&#125;*/</span><br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.left</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00a4ff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-tag">dl</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-tag">dt</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-tag">dd</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.footer</span> <span class="hljs-selector-class">.base-box</span> <span class="hljs-selector-tag">dd</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="精灵图拼接姓名"><a href="#精灵图拼接姓名" class="headerlink" title="精灵图拼接姓名"></a>精灵图拼接姓名</h2><p>知识点：</p><ol><li>背景图的position属性裁剪精灵图</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">106px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">112px</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.q</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./abcd.jpg&#x27;</span>) no-repeat -<span class="hljs-number">8px</span> -<span class="hljs-number">414px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.i</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./abcd.jpg&#x27;</span>) no-repeat -<span class="hljs-number">323px</span> -<span class="hljs-number">136px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">65px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.x</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./abcd.jpg&#x27;</span>) no-repeat -<span class="hljs-number">251px</span> -<span class="hljs-number">554px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.n</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./abcd.jpg&#x27;</span>) no-repeat -<span class="hljs-number">257px</span> -<span class="hljs-number">275px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">110px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="热点图动画"><a href="#热点图动画" class="headerlink" title="热点图动画"></a>热点图动画</h2><p>知识点：</p><ol><li>子绝父绝的使用</li><li>阴影配合动画显示</li><li>animation-delay 延迟效果</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.map</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.dotted</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#00a4ff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.dotted</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;北京&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> <span class="hljs-selector-attr">[class^=pulse]</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">#009dfd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: pulse .<span class="hljs-number">9s</span> linear infinite;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.pulse1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">4s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.pulse2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">8s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.pulse3</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1.2s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> pulse &#123;</span><br><span class="language-css">            <span class="hljs-selector-tag">from</span> &#123;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-number">70%</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">to</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--    假装这里是地图--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        中心点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dotted&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        绝对定位的波纹--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pulse1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pulse2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pulse3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里变宽要直接设置宽度，使用transform会导致阴影也变大</p></blockquote><h2 id="进度条效果"><a href="#进度条效果" class="headerlink" title="进度条效果"></a>进度条效果</h2><p>知识点：</p><ol><li><code>transition</code> 匀速变化</li><li>控制伪元素属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid darkred;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: width <span class="hljs-number">3s</span> linear .<span class="hljs-number">2s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: darkred;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">:hover</span> + <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>鼠标放这加载进度条<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h2><p>知识点：</p><ol><li>文字强制一行显示</li><li>超出隐藏</li><li>动画属性的 steps()</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#7D7D7D</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 强制一行显示 */</span></span><br><span class="language-css">            <span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="language-css">            <span class="hljs-comment">/* 超出隐藏 */</span></span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-comment">/* 展示36段（36个字符） */</span></span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: width-open <span class="hljs-number">7s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">36</span>) forwards;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> width-open &#123;</span><br><span class="language-css">            <span class="hljs-selector-tag">from</span> &#123;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">to</span> &#123;</span><br><span class="language-css">                <span class="hljs-comment">/* 宽度 = 字体大小 * 字符个数 */</span></span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">32px</span> * <span class="hljs-number">36</span>);</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>无论我去往哪里，那都是我该去的地方，经历我该经历的事，遇见我该遇见的人。<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="奔跑的熊"><a href="#奔跑的熊" class="headerlink" title="奔跑的熊"></a>奔跑的熊</h2><p>知识点：</p><ol><li>使用动画将长图片做出gif图的效果</li><li>动画属性多写</li><li>背景图水平平铺做出无限运动</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#7D7D7D</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.bear-bg</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class^=bg-]</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.bg-1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;img/bg1.png&quot;</span>) repeat-x left bottom;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: bg-move <span class="hljs-number">10s</span> linear infinite;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.bg-2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;img/bg2.png&quot;</span>) repeat-x left bottom;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">2</span>;</span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: bg-move <span class="hljs-number">20s</span> linear infinite;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.bear</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;img/bear.png&quot;</span>) no-repeat left;</span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: bear-run .<span class="hljs-number">7s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">8</span>) infinite, bear-move <span class="hljs-number">3.5s</span> ease-out forwards;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> bear-run &#123;</span><br><span class="language-css">            <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-position</span>-x: -<span class="hljs-number">1600px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> bear-move &#123;</span><br><span class="language-css">            <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">                <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> bg-move &#123;</span><br><span class="language-css">            <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-position</span>-x: -<span class="hljs-number">3840px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bear-bg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>难点：</p><ol><li>背景在x上平铺达到循环效果</li><li>对于熊的关键帧提取，动画属性可以直接写两个动画</li></ol></blockquote><h2 id="穿梭的盒子"><a href="#穿梭的盒子" class="headerlink" title="穿梭的盒子"></a>穿梭的盒子</h2><p>使用3D呈现做出穿梭盒子的效果</p><p>知识点：</p><ol><li>视距使用</li><li><code>transform-style: preserve-3d; </code>为子元素开启三维立体环境</li><li>对于3d盒子的旋转</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置视距，祖宗级使用需要配合transform-style，不然就只能写在父元素上 */</span></span><br><span class="language-css">            <span class="hljs-attribute">perspective</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">            <span class="hljs-comment">/* 控制子元素开启三维立体环境 */</span></span><br><span class="language-css">            <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: <span class="hljs-number">2s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">60deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00a4ff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">60deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="两面翻转盒子"><a href="#两面翻转盒子" class="headerlink" title="两面翻转盒子"></a>两面翻转盒子</h2><p>效果：鼠标放置div，div翻转后显示另一行文字</p><p>知识点：</p><ol><li>三维空间想象（一个盒子前一个盒子后，后的那个要正常显示需要Y轴翻转180）</li><li><code>backface-visibility: hidden;</code>盒子背后不可见，可见的话就会遮住该显示的部分</li><li><code>transform-style: preserve-3d;</code> 的使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">perspective</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: <span class="hljs-number">2s</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 给子盒子开启三维立体环境 */</span></span><br><span class="language-css">            <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 绝对定位重合 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 去除h1标签默认外边距 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置宽度就够了，高度自动继承行高 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: help;</span><br><span class="language-css">            <span class="hljs-comment">/* 重要：背面不可见 */</span></span><br><span class="language-css">            <span class="hljs-attribute">backface-visibility</span>: hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00a4ff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> <span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff7c2d</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 让背后的盒子文字倒回正常 */</span></span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>经历该经历的事<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>遇见该遇见的人<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3D导航栏"><a href="#3D导航栏" class="headerlink" title="3D导航栏"></a>3D导航栏</h2><p>效果：鼠标放置后，盒子类似长方体向上翻转，显示底部文字</p><p>知识点：</p><ol><li>注意长方体翻转时，轴心一定是长方体的中心点，所以要将正面向Z轴偏移出去</li><li>底部的旋转要注意文字的位置</li></ol><p>总结：遇到这种立方体旋转的，就需要注意中心点位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">perspective</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: .<span class="hljs-number">4s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">90deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: <span class="hljs-number">1s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00a4ff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 不是让底部向后偏移，而是让正面向前偏移(Z轴)，把中心点留出来旋转 */</span></span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">20px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff7c2d</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 因为要正确显示文字，所以旋转角度为负数，再Y轴偏移到底部 */</span></span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">20px</span>) <span class="hljs-built_in">rotateX</span>(-<span class="hljs-number">90deg</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里没有人<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里没有人<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里没有人<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="旋转木马效果"><a href="#旋转木马效果" class="headerlink" title="旋转木马效果"></a>旋转木马效果</h2><p>知识点：</p><ol><li>图片正方向就是Z轴正方向，所以先旋转后偏移就可以做成这个效果</li><li>给大盒子背景图片达到中心一张图片旋转的效果</li><li>视距可以大一点，因为图片本身就蛮大的</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">perspective</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: dog-run <span class="hljs-number">15s</span> linear infinite;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;pig.jpg&quot;</span>) no-repeat center;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> dog-run &#123;</span><br><span class="language-css">            <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">transform</span>:  <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>);</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;dog.jpg&quot;</span>) no-repeat center;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">400px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 旋转角度为 360 / 图片的数量 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">72deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">400px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">144deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">400px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">216deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">400px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">288deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">400px</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="京东首页流式布局"><a href="#京东首页流式布局" class="headerlink" title="京东首页流式布局"></a>京东首页流式布局</h2><p>知识点：</p><ol><li>使用初始化css（normalize.css）时注意link引入顺序</li><li>移动端meta标签</li><li>别忘了图片的基线对齐</li><li>三栏水平布局（左右两块宽度不动，中间自适应）思路：<ol><li>左右两边用定位</li><li>中间一个标准流，加左右外边距留出距离</li></ol></li></ol><p>代码就不贴了，对元素定位时多使用百分比即可</p><h2 id="苏宁首页（rem-媒体查询-less）【方案一】"><a href="#苏宁首页（rem-媒体查询-less）【方案一】" class="headerlink" title="苏宁首页（rem + 媒体查询 + less）【方案一】"></a>苏宁首页（rem + 媒体查询 + less）【方案一】</h2><p>知识点：</p><ol><li>先使用媒体查询定义公共的css，对页面的宽度设置对应的字体大小（一般页面水平分15份）</li><li>然后根据设计图的宽度计算设计图中rem的大小 <code>份数大小 = 页面宽度 / 份数（设计图上的宽度 / 15）</code>，如设计图宽度为750px，分15份，设计图中元素高度为75px，那么转换为rem就为  <code>75rem / 50</code></li></ol><p>公共部分（媒体查询设置字体）：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 横向页面分为15份</span><br><span class="hljs-variable">@span:</span> <span class="hljs-number">15</span>;<br><span class="hljs-comment">// 大于等于320px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">320px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于360px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">360px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">360px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于375px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">375px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">375px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于384px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">384px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">384px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于400px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">400px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">400px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于414px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">414px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">414px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于424px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">424px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">424px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于480px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">480px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">480px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于540px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">540px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">540px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于720px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">720px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">720px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 大于等于750px</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">750px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">750px</span> / <span class="hljs-variable">@span</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,use-scalable=no&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/normalize.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;厨卫保暖季 哒哒哒&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>        登录<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爆款手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 1000px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式文件：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;common.css&quot;</span>;<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">15rem</span>;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>&#125;<br><br><span class="hljs-comment">// 份数大小 = 页面宽度 / 份数（设计图上的宽度 / 15）</span><br><span class="hljs-variable">@base-font:</span> <span class="hljs-number">50</span>;<br><span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">position</span>: sticky;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">15rem</span>;<br>  <span class="hljs-comment">// 高度比例 = 自身高度 / 份数大小（页面宽度 / 份数）</span><br>  <span class="hljs-attribute">height</span>: (<span class="hljs-number">88rem</span> / <span class="hljs-variable">@base-font</span>);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffc001</span>;<br><br>  <span class="hljs-selector-class">.menu</span> &#123;<br>    <span class="hljs-attribute">margin</span>: (<span class="hljs-number">11rem</span> / <span class="hljs-variable">@base-font</span>) (<span class="hljs-number">25rem</span> / <span class="hljs-variable">@base-font</span>) (<span class="hljs-number">7rem</span> / <span class="hljs-variable">@base-font</span>) (<span class="hljs-number">24rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">width</span>: (<span class="hljs-number">44rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">70rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">background</span>: url(<span class="hljs-string">&quot;../img/classify.png&quot;</span>) no-repeat center;<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.search</span> &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br><br>    <span class="hljs-selector-tag">input</span> &#123;<br>      <span class="hljs-attribute">border</span>: none;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">margin-top</span>: (<span class="hljs-number">12rem</span> / <span class="hljs-variable">@base-font</span>);<br>      <span class="hljs-attribute">height</span>: (<span class="hljs-number">66rem</span> / <span class="hljs-variable">@base-font</span>);<br>      <span class="hljs-attribute">border-radius</span>: (<span class="hljs-number">33rem</span> / <span class="hljs-variable">@base-font</span>);<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff2cc</span>;<br>      <span class="hljs-attribute">padding-left</span>: (<span class="hljs-number">55rem</span> / <span class="hljs-variable">@base-font</span>);<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#757575</span>;<br>      <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">@base-font</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.login</span> &#123;<br>    <span class="hljs-attribute">width</span>: (<span class="hljs-number">75rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">70rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">line-height</span>: (<span class="hljs-number">70rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">margin</span>: (<span class="hljs-number">10rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">@base-font</span>);<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-flow</span>: row wrap;<br>  <span class="hljs-attribute">text-align</span>: center;<br><br>  &gt; <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">20%</span>;<br><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">width</span>: (<span class="hljs-number">82rem</span> / <span class="hljs-variable">@base-font</span>);<br>      <span class="hljs-attribute">height</span>: (<span class="hljs-number">82rem</span> / <span class="hljs-variable">@base-font</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">@base-font</span>);<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用less做除法运算的时候，需要带一个括号，使用scss也是需要的</p></blockquote><h2 id="黑马面面（rem-vw-scss-flex-移动端布局）"><a href="#黑马面面（rem-vw-scss-flex-移动端布局）" class="headerlink" title="黑马面面（rem + vw + scss + flex 移动端布局）"></a>黑马面面（rem + vw + scss + flex 移动端布局）</h2><p>知识点：</p><ol><li>加深使用rem</li><li>使用swiper插件做轮播图</li><li>沙箱函数</li></ol><p>html部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,use-scalable=no&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 布局选型：rem + vw/vh + flex + 媒体查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/normalize.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用swiper做轮播图 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/swiper@8/swiper-bundle.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 头部 start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>黑马面面<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 头部 end --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 导航栏 start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/icon1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>HR面试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/icon2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>笔试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/icon3.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>技术面试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/icon4.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>模拟面试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/icon5.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>面试技巧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/icon6.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>薪资查询<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导航栏 end --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- go 模块 start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/go.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- go 模块 end --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 就业指导模块 start --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-wrap&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可复用盒子 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-hd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/i2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            就业指导<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多&gt;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 轮播图 start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-box&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Swiper --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-wrapper&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/pic.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>老师教你应对面试技巧1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>老师教你应对面试技巧2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>老师教你应对面试技巧3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 轮播图 end --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 就业指导模块 end --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 充电学习模块 start --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-wrap&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可复用盒子 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-hd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/i1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            充电学习<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多&gt;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 轮播图 start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;study&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper study-swiper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-wrapper&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/pic1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>说地道英语，告别中式英语<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>156<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人学习<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/pic1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>说地道英语，告别中式英语<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>156<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人学习<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/pic1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>说地道英语，告别中式英语<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>156<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人学习<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/pic1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>说地道英语，告别中式英语<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>156<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人学习<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/pic1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>说地道英语，告别中式英语<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>156<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人学习<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 轮播图 end --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 充电学习模块 end --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 帮底部占个空间 start --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-space&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 帮底部占个空间 end--&gt;</span><br><br><span class="hljs-comment">&lt;!-- 底部 start --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/home.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/ms.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>模拟面试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/net.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>技术面试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./icons/user.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的首页<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 底部 end --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/swiper@8/swiper-bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 使用沙箱函数包装，就业学习模块的轮播图</span></span><br><span class="language-javascript">    (<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> swiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span>(<span class="hljs-string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">slidesPerView</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">centeredSlides</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">navigation</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">nextEl</span>: <span class="hljs-string">&quot;.swiper-button-next&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">prevEl</span>: <span class="hljs-string">&quot;.swiper-button-prev&quot;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;)();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 充电学习模块的轮播图</span></span><br><span class="language-javascript">    (<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> swiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span>(<span class="hljs-string">&quot;.study-swiper&quot;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">slidesPerView</span>: <span class="hljs-number">2.3</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">spaceBetween</span>: <span class="hljs-number">20</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;)()</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式文件：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$span</span>: <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 设计图为750px，我分10份，因为10好计算</span><br><span class="hljs-variable">$font-span</span>: <span class="hljs-number">75</span>;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100vw</span> / <span class="hljs-variable">$span</span>;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">750px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">75px</span>;<br>  &#125;<br>&#125;<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: bottom;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">$span</span>+rem;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f2f4f7</span>;<br>&#125;<br><br><span class="hljs-selector-class">.wrap1</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: (<span class="hljs-number">43rem</span> / <span class="hljs-variable">$font-span</span>);<br><br>  <span class="hljs-selector-tag">header</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">80rem</span> / <span class="hljs-variable">$font-span</span>);<br>    <span class="hljs-attribute">line-height</span>: (<span class="hljs-number">80rem</span> / <span class="hljs-variable">$font-span</span>);<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">35rem</span> / <span class="hljs-variable">$font-span</span>);<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#1c1c1c</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eaeaea</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">nav</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-flow</span>: row wrap;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">margin</span>: (<span class="hljs-number">45rem</span> / <span class="hljs-variable">$font-span</span>) <span class="hljs-number">0</span> (<span class="hljs-number">60rem</span> / <span class="hljs-variable">$font-span</span>) <span class="hljs-number">0</span>;<br><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">width</span>: (<span class="hljs-number">139rem</span> / <span class="hljs-variable">$font-span</span>);<br>      <span class="hljs-attribute">height</span>: (<span class="hljs-number">139rem</span> / <span class="hljs-variable">$font-span</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">flex</span>: <span class="hljs-number">33.3%</span>;<br><br>      <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">$font-span</span>);<br>      &#125;<br><br>      <span class="hljs-comment">// 控制前三个盒子添加下边距</span><br>      &amp;<span class="hljs-selector-pseudo">:nth-child</span>(-n + <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-attribute">margin-bottom</span>: (<span class="hljs-number">62rem</span> / <span class="hljs-variable">$font-span</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.go</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> (<span class="hljs-number">10rem</span> / <span class="hljs-variable">$font-span</span>) <span class="hljs-number">0</span> (<span class="hljs-number">18rem</span> / <span class="hljs-variable">$font-span</span>);<br><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 可复用的模块</span><br><span class="hljs-selector-class">.content-wrap</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">padding</span>: (<span class="hljs-number">40rem</span> / <span class="hljs-variable">$font-span</span>) (<span class="hljs-number">22rem</span> / <span class="hljs-variable">$font-span</span>);<br>  <span class="hljs-attribute">margin-top</span>: (<span class="hljs-number">10rem</span> / <span class="hljs-variable">$font-span</span>);<br><br>  <span class="hljs-selector-class">.content-hd</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">38rem</span> / <span class="hljs-variable">$font-span</span>);<br>    <span class="hljs-attribute">line-height</span>: (<span class="hljs-number">38rem</span> / <span class="hljs-variable">$font-span</span>);<br>    <span class="hljs-attribute">margin-bottom</span>: (<span class="hljs-number">5rem</span> / <span class="hljs-variable">$font-span</span>);<br><br>    <span class="hljs-selector-tag">h4</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">28rem</span> / <span class="hljs-variable">$font-span</span>);<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br><br>      <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">width</span>: (<span class="hljs-number">38rem</span> / <span class="hljs-variable">$font-span</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">22rem</span> / <span class="hljs-variable">$font-span</span>);<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 就业指导轮播图</span><br>  <span class="hljs-selector-class">.swiper-box</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br><br>    <span class="hljs-selector-class">.swiper-container</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">overflow</span>: hidden;<br>      <span class="hljs-attr">--swiper-navigation-color</span>: <span class="hljs-number">#000</span>; <span class="hljs-comment">/* 单独设置按钮颜色 */</span><br>      <span class="hljs-attr">--swiper-navigation-size</span>: <span class="hljs-number">30px</span>; <span class="hljs-comment">/* 设置按钮大小 */</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.swiper-slide</span> &#123;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br><br>      <span class="hljs-comment">/* Center slide text vertically */</span><br>      <span class="hljs-attribute">display</span>: -webkit-box;<br>      <span class="hljs-attribute">display</span>: -ms-flexbox;<br>      <span class="hljs-attribute">display</span>: -webkit-flex;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">flex-flow</span>: column nowrap;<br>      -webkit-box-pack: center;<br>      -ms-<span class="hljs-attribute">flex</span>-pack: center;<br>      -webkit-<span class="hljs-attribute">justify-content</span>: center;<br>      <span class="hljs-attribute">justify-content</span>: center;<br>      -webkit-box-align: center;<br>      -ms-<span class="hljs-attribute">flex</span>-align: center;<br>      -webkit-<span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">transition</span>: <span class="hljs-number">300ms</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.8</span>);<br>      <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">6</span>;<br><br>      <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">width</span>: (<span class="hljs-number">338rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">height</span>: (<span class="hljs-number">376rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">position</span>: relative;<br><br>        <span class="hljs-selector-tag">img</span> &#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>          <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">width</span>: (<span class="hljs-number">338rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">margin-top</span>: (<span class="hljs-number">24rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">visibility</span>: hidden;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-class">.swiper-slide-active</span>, <span class="hljs-selector-class">.swiper-slide-duplicate-active</span> &#123;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>      <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br><br>      <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">visibility</span>: visible;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-class">.swiper-button-next</span> &#123;<br>      <span class="hljs-attribute">right</span>: -<span class="hljs-number">40px</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.swiper-button-prev</span> &#123;<br>      <span class="hljs-attribute">left</span>: -<span class="hljs-number">40px</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 充电学习轮播图</span><br>  <span class="hljs-selector-class">.study</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">$font-span</span>);<br><br>    <span class="hljs-selector-class">.swiper</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br><br>      <span class="hljs-selector-class">.swiper-wrapper</span> &#123;<br>        <span class="hljs-attribute">padding</span>: (<span class="hljs-number">10rem</span> /<span class="hljs-variable">$font-span</span>);<br>      &#125;<br><br>      <span class="hljs-selector-class">.swiper-slide</span> &#123;<br>        <span class="hljs-attribute">width</span>: (<span class="hljs-number">290rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">height</span>: (<span class="hljs-number">340rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>        <span class="hljs-attribute">border-radius</span>: (<span class="hljs-number">10rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> (<span class="hljs-number">10rem</span> /<span class="hljs-variable">$font-span</span>) <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">1</span>);<br>        <span class="hljs-attribute">display</span>: flex;<br>        <span class="hljs-attribute">flex-direction</span>: column;<br><br>        <span class="hljs-selector-tag">img</span> &#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        &#125;<br><br>        <span class="hljs-selector-tag">h5</span> &#123;<br>          <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">28rem</span> / <span class="hljs-variable">$font-span</span>);<br>          <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>          <span class="hljs-attribute">margin</span>: (<span class="hljs-number">20rem</span> / <span class="hljs-variable">$font-span</span>) (<span class="hljs-number">10rem</span> /<span class="hljs-variable">$font-span</span>);<br>        &#125;<br><br>        <span class="hljs-selector-tag">p</span> &#123;<br>          <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">25rem</span> / <span class="hljs-variable">$font-span</span>);<br>          <span class="hljs-attribute">padding-left</span>: (<span class="hljs-number">15rem</span> /<span class="hljs-variable">$font-span</span>);<br><br>          <span class="hljs-selector-tag">span</span> &#123;<br>            <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">26rem</span> / <span class="hljs-variable">$font-span</span>);<br>            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff4400</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-selector-class">.footer-space</span> &#123;<br>  <span class="hljs-attribute">height</span>: (<span class="hljs-number">110rem</span> / <span class="hljs-variable">$font-span</span>);<br>&#125;<br><br><span class="hljs-selector-tag">footer</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><br>  <span class="hljs-selector-tag">nav</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-variable">$span</span>+rem;<br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">110rem</span> / <span class="hljs-variable">$font-span</span>);<br>    <span class="hljs-attribute">padding-top</span>: (<span class="hljs-number">20rem</span> / <span class="hljs-variable">$font-span</span>);<br><br>    <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">flex-flow</span>: column nowrap;<br>      <span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br><br>      <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">width</span>: (<span class="hljs-number">39rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">height</span>: (<span class="hljs-number">41rem</span> / <span class="hljs-variable">$font-span</span>);<br>      &#125;<br><br>      <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">margin-top</span>: (<span class="hljs-number">10rem</span> / <span class="hljs-variable">$font-span</span>);<br>        <span class="hljs-attribute">font-size</span>: (<span class="hljs-number">22rem</span> / <span class="hljs-variable">$font-span</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="阿里百秀（bootstrap响应）"><a href="#阿里百秀（bootstrap响应）" class="headerlink" title="阿里百秀（bootstrap响应）"></a>阿里百秀（bootstrap响应）</h2><p>知识点：</p><ol><li>先布局md以上的pc端布局，最后根据实际需求在修改小屏幕和超小屏幕的特殊样式</li><li>pc端布局先看屏幕缩放所产生的格式变化，一般如md以上不改变布局</li></ol><p><strong>index.html:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,use-scalable=no&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/bootstrap-icons.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/index.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 左侧 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-2&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- logo --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/logo.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-block d-sm-none&quot;</span>&gt;</span>阿里百秀<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 导航栏 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-camera-fill&quot;</span>&gt;</span>生活馆<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-card-image&quot;</span>&gt;</span>自然汇<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-phone&quot;</span>&gt;</span>科技潮<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-gift-fill&quot;</span>&gt;</span>奇趣事<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-cup-fill&quot;</span>&gt;</span>美食杰<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 中间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-7&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 新闻 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news clearfix&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;upload/lg.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>阿里百秀<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;upload/1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>奇了，成都一小区护士长的像马云 市民纷纷合影<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;upload/2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>奇了，成都一小区护士长的像马云 市民纷纷合影<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;upload/3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>奇了，成都一小区护士长的像马云 市民纷纷合影<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;upload/4.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>奇了，成都一小区护士长的像马云 市民纷纷合影<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 发表 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;publish&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted d-none d-sm-block&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>指甲是经常容易被人们忽略的身体部位，事实上从指甲的健康状况可以看出一个人的身体健康状况，快来看看10个暗藏在指甲里知识吧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞(18) <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>标签：健康 / 感染 / 营养 / 趣味生活<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 d-none d-sm-block&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./upload/3.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-top: 20px;width: 100%&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted d-none d-sm-block&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>指甲是经常容易被人们忽略的身体部位，事实上从指甲的健康状况可以看出一个人的身体健康状况，快来看看10个暗藏在指甲里知识吧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞(18) <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>标签：健康 / 感染 / 营养 / 趣味生活<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 d-none d-sm-block&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./upload/3.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-top: 20px;width: 100%&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted d-none d-sm-block&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>指甲是经常容易被人们忽略的身体部位，事实上从指甲的健康状况可以看出一个人的身体健康状况，快来看看10个暗藏在指甲里知识吧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞(18) <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>标签：健康 / 感染 / 营养 / 趣味生活<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 d-none d-sm-block&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./upload/3.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-top: 20px;width: 100%&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted d-none d-sm-block&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>指甲是经常容易被人们忽略的身体部位，事实上从指甲的健康状况可以看出一个人的身体健康状况，快来看看10个暗藏在指甲里知识吧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞(18) <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>标签：健康 / 感染 / 营养 / 趣味生活<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 d-none d-sm-block&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./upload/3.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-top: 20px;width: 100%&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted d-none d-sm-block&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>指甲是经常容易被人们忽略的身体部位，事实上从指甲的健康状况可以看出一个人的身体健康状况，快来看看10个暗藏在指甲里知识吧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞(18) <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-none d-sm-block&quot;</span>&gt;</span>标签：健康 / 感染 / 营养 / 趣味生活<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 d-none d-sm-block&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./upload/3.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-top: 20px;width: 100%&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 右侧 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;upload/zgboke.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hot&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>热搜<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-primary&quot;</span>&gt;</span>欢迎来到中国博客联盟<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>这里收录国内各个领域的优秀博客，是一个全人工编辑的开放式博客联盟交流和展示平台......<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>index.scss:</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 定义可控颜色变量</span><br><span class="hljs-variable">$logo-bg</span>: <span class="hljs-number">#429ad9</span>;<br><span class="hljs-variable">$nav-bg</span>: <span class="hljs-number">#eee</span>;<br><span class="hljs-variable">$nav-border</span>: <span class="hljs-number">#ccc</span>;<br><span class="hljs-variable">$a-font</span>: <span class="hljs-number">#666</span>;<br><span class="hljs-variable">$nav-a-hover-bg</span>: <span class="hljs-number">#fff</span>;<br><br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$a-font</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$a-font</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 修改container的宽度为设计图宽度</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>  <span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1280px</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// header</span><br><span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-comment">// 取消bootstrap中列盒子的左侧内边距</span><br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br><br>  <span class="hljs-selector-class">.logo</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$logo-bg</span>;<br><br>    <span class="hljs-comment">// 屏幕缩放后，图片也随之变化</span><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    &#125;<br><br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>    &#125;<br>  &#125;<br><br><br>  <span class="hljs-selector-class">.nav</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$nav-bg</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-variable">$nav-border</span>;<br><br>    <span class="hljs-comment">// bootstrap中nav类默认带了flex布局，导致下面块级a撑不开，所以要先撑开ul</span><br>    <span class="hljs-selector-tag">ul</span> &#123;<br>      <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br><br>      <span class="hljs-selector-tag">li</span> &#123;<br>        <span class="hljs-selector-tag">a</span> &#123;<br>          <span class="hljs-attribute">display</span>: block;<br>          <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>          <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>          <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">30px</span>;<br>          <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><br>          <span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>            <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">5px</span>;<br>          &#125;<br><br>          &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$nav-a-hover-bg</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 当我们进入小屏幕还有超小屏幕的时候，nav里面的li浮动起来，并且宽度为20%</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>  <span class="hljs-selector-class">.nav</span> &#123;<br>    <span class="hljs-selector-tag">li</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;<br><br>      <span class="hljs-comment">// 权重不足，少使用important</span><br>      <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span> <span class="hljs-meta">!important</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span> <span class="hljs-meta">!important</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">article</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span> <span class="hljs-meta">!important</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span> <span class="hljs-meta">!important</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span> <span class="hljs-meta">!important</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.publish</span> <span class="hljs-selector-tag">h3</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span> <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">article</span> &#123;<br>  <span class="hljs-selector-class">.news</span> &#123;<br><br>    <span class="hljs-selector-tag">li</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">128px</span>;<br>      <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br><br>      <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br><br>        <span class="hljs-selector-tag">img</span> &#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>          <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        &#125;<br><br>        <span class="hljs-selector-tag">p</span> &#123;<br>          <span class="hljs-attribute">position</span>: absolute;<br>          <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>          <span class="hljs-attribute">overflow</span>: hidden;<br>          <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>          <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>          <span class="hljs-attribute">transition</span>: .<span class="hljs-number">2s</span>;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>          <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>          <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>          <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>          <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">266px</span>;<br><br>      <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">41px</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(n+<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-selector-tag">p</span> &#123;<br>        <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">5px</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.publish</span> &#123;<br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br><br>    <span class="hljs-selector-class">.row</span> &#123;<br>      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">h3</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>      <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.hot</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">35px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00a4ff</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>  &#125;<br><br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>曾经</category>
      
      <category>H5案例</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBootController接收参数的几种方式</title>
    <link href="/2021/08/19/SpringBootController%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/08/19/SpringBootController%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Controller接收参数的常用方法总体可以分为三类<br>第一类：Get请求通过拼接url进行传递<br>第二类：Post请求通过请求体进行传递<br>第三类：通过请求头部进行参数传递。</p><h3 id="PathVariable-接收参数"><a href="#PathVariable-接收参数" class="headerlink" title="@PathVariable 接收参数"></a>@PathVariable 接收参数</h3><p>请求方式：localhost:8080&#x2F;login&#x2F;FSAN</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;login/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RequestParam-接收参数"><a href="#RequestParam-接收参数" class="headerlink" title="@RequestParam 接收参数"></a>@RequestParam 接收参数</h3><p>使用这个注解需要注意两个点，一是加了这个参数后则请求中必须传递这个参数，二是@RequestParam这个注解可以指定名字，请求参数必须和指定的这个名字相同，如果不指定，则默认为具体参数名</p><p>请求方式：localhost:8080&#x2F;login?name&#x3D;FSAN</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="无注解传参"><a href="#无注解传参" class="headerlink" title="无注解传参"></a>无注解传参</h3><p>这种方式和第2点对比，最大的区别就是这个参数不是必传的，请求路径上可以不传递。</p><p>请求方式：localhost:8080&#x2F;login?name&#x3D;FSAN</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginUser</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HttpServletRequest-接收参数"><a href="#HttpServletRequest-接收参数" class="headerlink" title="HttpServletRequest 接收参数"></a>HttpServletRequest 接收参数</h3><p>请求方式：localhost:8080&#x2F;login?name&#x3D;FSAN</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginUser</span><span class="hljs-params">(HttpServletRequest httpServletRequest)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> httpServletRequest.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RequestBody-接收请求体参数"><a href="#RequestBody-接收请求体参数" class="headerlink" title="@RequestBody 接收请求体参数"></a>@RequestBody 接收请求体参数</h3><p>这种方式一般用来传递实体对象，加了这个注解后，参数也是必传的。</p><p>请求方式：{“name”: FSAN}</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;getName&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String name)</span> &#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RequestHeader-接收请求头参数"><a href="#RequestHeader-接收请求头参数" class="headerlink" title="@RequestHeader 接收请求头参数"></a>@RequestHeader 接收请求头参数</h3><p>请求方式：将name &#x3D; FSAN添加到请求头里</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;getHeader&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHeader</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader</span> String name)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name=&quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/2021/08/15/Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/08/15/Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="Pyhon准备工作"><a href="#Pyhon准备工作" class="headerlink" title="Pyhon准备工作"></a>Pyhon准备工作</h2><h3 id="下载python和配置环境"><a href="#下载python和配置环境" class="headerlink" title="下载python和配置环境"></a>下载python和配置环境</h3><p>很简单，去 <a href="http://www.pyhton.org下载/">www.pyhton.org下载</a><br>打开执行文件，勾选上下面addpath就完成了</p><h2 id="Hello-Python"><a href="#Hello-Python" class="headerlink" title="Hello Python"></a>Hello Python</h2><p>使用的编辑器是官方自带的python入门级IDLE，以后熟练了可以去使用PyCharm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello Python!&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>pycharm中py文件的初始化配置</p></blockquote><p>打开setting下的Editor下的File and Code Templates</p><p>改生成Python文件时的初始化代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># -*- codeing = utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Time</span> : $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span> : FSAN</span><br><span class="hljs-comment"># <span class="hljs-doctag">@File</span> : $&#123;NAME&#125;.py</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Software</span> : $&#123;PRODUCT_NAME&#125;</span><br></code></pre></td></tr></table></figure><p>意思分别是</p><ul><li>字符编码</li><li>记录生成python文件的时间</li><li>作者名字</li><li>文件名，后面是后缀名</li><li>编写软件名字，使用product_name可以自动补上pycharm</li></ul><p>这些配置最好写上，以后如果写一个工程的话，方便别人看到编写环境</p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>做一个输入判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">temp = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;不妨猜一下wo现在心里想的是哪个数字：1-10......&quot;</span>)<br><span class="hljs-keyword">if</span> temp == <span class="hljs-string">&quot;Python&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对了嗷，一看你就是本人，这是Python，不想这个想啥呢，hhh&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;全部提示应该是1-10肯定不可能的啦，xswl。&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提示因为太长就省略一点，[doge]&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错了嗷，再来？？&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;来？&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="转换数值型"><a href="#转换数值型" class="headerlink" title="转换数值型"></a>转换数值型</h3><p>因为使用input接收的数字是字符串类型的<br>需要使用int()转换才能比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字：&quot;</span>)<br>请输入一个数字：<span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num1 = <span class="hljs-built_in">int</span>(num)<br><span class="hljs-meta">&gt;&gt;&gt; </span>num1<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num1 == num<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input()"></a>Input()</h3><p>作用：用来接收用户输入并返回<br>就相当于java里面的Scanner</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量不能以数字开头<br>变量可以使用中文，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>一个人 = <span class="hljs-string">&quot;qixin&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>一个人<br><span class="hljs-string">&#x27;qixin&#x27;</span><br></code></pre></td></tr></table></figure><p>变量可以重新赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>一个人 = <span class="hljs-string">&quot;qixin&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>一个人<br><span class="hljs-string">&#x27;qixin&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>一个人 = <span class="hljs-string">&quot;me&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>一个人<br><span class="hljs-string">&#x27;me&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="换行和print空格"><a href="#换行和print空格" class="headerlink" title="换行和print空格"></a>换行和print空格</h3><p>反斜杠加n<br>\n</p><blockquote><p>在print输出后跟个空格</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;0&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="快速CV上一条记录（IDLE）"><a href="#快速CV上一条记录（IDLE）" class="headerlink" title="快速CV上一条记录（IDLE）"></a>快速CV上一条记录（IDLE）</h3><p>AIt+P</p><h3 id="打印路径"><a href="#打印路径" class="headerlink" title="打印路径"></a>打印路径</h3><p>因为反斜杠之后如果有转义字符，python进行转义</p><p>错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;D:\three\two\one\now&quot;</span>)<br>D:hreewo\one<br>ow<br></code></pre></td></tr></table></figure><p>办法一： 使用\转义\，从而正常输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;D:\\three\\two\\one\\now&quot;</span>)<br>D:\three\two\one\now<br></code></pre></td></tr></table></figure><p>办法二：使用原始字符串，在引号前面加上r，从而跳过编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;D:\three\two\one\now&quot;</span>)<br>D:\three\two\one\now<br></code></pre></td></tr></table></figure><h3 id="打印图形"><a href="#打印图形" class="headerlink" title="打印图形"></a>打印图形</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>原理，在一行结束时使用\n换行，再加上\表示没结束，使用Ctrl+J换行</p><p>三角形：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n\</span><br><span class="hljs-string">     *     \n\</span><br><span class="hljs-string">    ***    \n\</span><br><span class="hljs-string">   *****   \n\</span><br><span class="hljs-string">  *******&quot;</span>)<br><br>     *     <br>    ***    <br>   *****   <br>  *******<br></code></pre></td></tr></table></figure><p>不使用\n换行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\</span><br><span class="hljs-string">     *     \</span><br><span class="hljs-string">    ***    \</span><br><span class="hljs-string">   *****   \</span><br><span class="hljs-string">  *******&quot;</span>)<br>     *         ***       *****     *******<br></code></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>原理，使用’’’标识，或”””<br>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这就是Python吗</span><br><span class="hljs-string">什么傻逼编辑器</span><br><span class="hljs-string">使用关键字这么多。。。。</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br>这就是Python吗<br>什么傻逼编辑器<br>使用关键字这么多。。。。<br></code></pre></td></tr></table></figure><h3 id="重复打印"><a href="#重复打印" class="headerlink" title="重复打印"></a>重复打印</h3><p>使用*</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;buhuibahaizhenyou\n&quot;</span> * <span class="hljs-number">10</span>)<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br>buhuibahaizhenyou<br></code></pre></td></tr></table></figure><h3 id="加程序注释"><a href="#加程序注释" class="headerlink" title="加程序注释"></a>加程序注释</h3><p>单独使用三引号字符串<br>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;这是一个程序&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;woshi shabi&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用while循环</h3><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">while</span> 条件:<br>true执行<br></code></pre></td></tr></table></figure><ul><li>continue 跳出当前一次循环</li></ul><p>使用while-else<br>当while被正常执行完之后触发else的内容，被break打断则不触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">5</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i的值为: &quot;</span>,i)<br><span class="hljs-keyword">if</span> i==<span class="hljs-number">3</span>:<br><span class="hljs-keyword">break</span><br>i+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;因为while正常执行完，我被执行了&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;现在i的值为：&quot;</span>,i)<br>i = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i的值已重置为1&quot;</span>)<br><br><br>i的值为:  <span class="hljs-number">1</span><br>i的值为:  <span class="hljs-number">2</span><br>i的值为:  <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>使用while-else做七天打卡</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python">day = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> day&lt;=<span class="hljs-number">7</span>:<br>    <span class="hljs-built_in">any</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入任意字符进行打卡!!&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span> == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;今天还没打卡！！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        day+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;您已连续打卡一周，打工人努力，我的海景别墅就靠你们了！&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;运行结果&#x27;&#x27;&#x27;</span><br>输入任意字符进行打卡!!<span class="hljs-number">1</span><br>输入任意字符进行打卡!!<span class="hljs-number">2</span><br>输入任意字符进行打卡!!<span class="hljs-number">3</span><br>输入任意字符进行打卡!!<span class="hljs-number">4</span><br>输入任意字符进行打卡!!<span class="hljs-number">5</span><br>输入任意字符进行打卡!!<span class="hljs-number">6</span><br>输入任意字符进行打卡!!<span class="hljs-number">7</span><br>您已连续打卡一周，打工人努力，我的海景别墅就靠你们了！<br></code></pre></td></tr></table></figure><p>使用while打印九九乘法表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;=<span class="hljs-number">9</span>:<br>    j=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> j&lt;=i:<br>        <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&#x27;*&#x27;</span>,j,<span class="hljs-string">&#x27;=&#x27;</span>,j*i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">if</span> j*i&lt;<span class="hljs-number">10</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        j+=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br>    i+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印完成！&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;输出&#x27;&#x27;&#x27;</span><br><span class="hljs-number">1</span> * <span class="hljs-number">1</span> = <span class="hljs-number">1</span>    <br><span class="hljs-number">2</span> * <span class="hljs-number">1</span> = <span class="hljs-number">2</span>    <span class="hljs-number">2</span> * <span class="hljs-number">2</span> = <span class="hljs-number">4</span>    <br><span class="hljs-number">3</span> * <span class="hljs-number">1</span> = <span class="hljs-number">3</span>    <span class="hljs-number">3</span> * <span class="hljs-number">2</span> = <span class="hljs-number">6</span>    <span class="hljs-number">3</span> * <span class="hljs-number">3</span> = <span class="hljs-number">9</span>    <br><span class="hljs-number">4</span> * <span class="hljs-number">1</span> = <span class="hljs-number">4</span>    <span class="hljs-number">4</span> * <span class="hljs-number">2</span> = <span class="hljs-number">8</span>    <span class="hljs-number">4</span> * <span class="hljs-number">3</span> = <span class="hljs-number">12</span>   <span class="hljs-number">4</span> * <span class="hljs-number">4</span> = <span class="hljs-number">16</span>   <br><span class="hljs-number">5</span> * <span class="hljs-number">1</span> = <span class="hljs-number">5</span>    <span class="hljs-number">5</span> * <span class="hljs-number">2</span> = <span class="hljs-number">10</span>   <span class="hljs-number">5</span> * <span class="hljs-number">3</span> = <span class="hljs-number">15</span>   <span class="hljs-number">5</span> * <span class="hljs-number">4</span> = <span class="hljs-number">20</span>   <span class="hljs-number">5</span> * <span class="hljs-number">5</span> = <span class="hljs-number">25</span>   <br><span class="hljs-number">6</span> * <span class="hljs-number">1</span> = <span class="hljs-number">6</span>    <span class="hljs-number">6</span> * <span class="hljs-number">2</span> = <span class="hljs-number">12</span>   <span class="hljs-number">6</span> * <span class="hljs-number">3</span> = <span class="hljs-number">18</span>   <span class="hljs-number">6</span> * <span class="hljs-number">4</span> = <span class="hljs-number">24</span>   <span class="hljs-number">6</span> * <span class="hljs-number">5</span> = <span class="hljs-number">30</span>   <span class="hljs-number">6</span> * <span class="hljs-number">6</span> = <span class="hljs-number">36</span>   <br><span class="hljs-number">7</span> * <span class="hljs-number">1</span> = <span class="hljs-number">7</span>    <span class="hljs-number">7</span> * <span class="hljs-number">2</span> = <span class="hljs-number">14</span>   <span class="hljs-number">7</span> * <span class="hljs-number">3</span> = <span class="hljs-number">21</span>   <span class="hljs-number">7</span> * <span class="hljs-number">4</span> = <span class="hljs-number">28</span>   <span class="hljs-number">7</span> * <span class="hljs-number">5</span> = <span class="hljs-number">35</span>   <span class="hljs-number">7</span> * <span class="hljs-number">6</span> = <span class="hljs-number">42</span>   <span class="hljs-number">7</span> * <span class="hljs-number">7</span> = <span class="hljs-number">49</span>   <br><span class="hljs-number">8</span> * <span class="hljs-number">1</span> = <span class="hljs-number">8</span>    <span class="hljs-number">8</span> * <span class="hljs-number">2</span> = <span class="hljs-number">16</span>   <span class="hljs-number">8</span> * <span class="hljs-number">3</span> = <span class="hljs-number">24</span>   <span class="hljs-number">8</span> * <span class="hljs-number">4</span> = <span class="hljs-number">32</span>   <span class="hljs-number">8</span> * <span class="hljs-number">5</span> = <span class="hljs-number">40</span>   <span class="hljs-number">8</span> * <span class="hljs-number">6</span> = <span class="hljs-number">48</span>   <span class="hljs-number">8</span> * <span class="hljs-number">7</span> = <span class="hljs-number">56</span>   <span class="hljs-number">8</span> * <span class="hljs-number">8</span> = <span class="hljs-number">64</span>   <br><span class="hljs-number">9</span> * <span class="hljs-number">1</span> = <span class="hljs-number">9</span>    <span class="hljs-number">9</span> * <span class="hljs-number">2</span> = <span class="hljs-number">18</span>   <span class="hljs-number">9</span> * <span class="hljs-number">3</span> = <span class="hljs-number">27</span>   <span class="hljs-number">9</span> * <span class="hljs-number">4</span> = <span class="hljs-number">36</span>   <span class="hljs-number">9</span> * <span class="hljs-number">5</span> = <span class="hljs-number">45</span>   <span class="hljs-number">9</span> * <span class="hljs-number">6</span> = <span class="hljs-number">54</span>   <span class="hljs-number">9</span> * <span class="hljs-number">7</span> = <span class="hljs-number">63</span>   <span class="hljs-number">9</span> * <span class="hljs-number">8</span> = <span class="hljs-number">72</span>   <span class="hljs-number">9</span> * <span class="hljs-number">9</span> = <span class="hljs-number">81</span>   <br>打印完成！<br></code></pre></td></tr></table></figure><ul><li>end&#x3D; ‘ ‘防止print的自动换行</li><li></li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for in  类似java的for :<br>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;12345&quot;</span><br><span class="hljs-built_in">print</span>(num)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;输出&#x27;&#x27;&#x27;</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>因为整数无法迭代<br>想要迭代整数可以使用range()函数，参数三个可选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;range(start,stop,step)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一个参数，range(5)&quot;</span>)<br><span class="hljs-keyword">for</span> num1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(num1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两个参数，range(1,5)&quot;</span>)<br><span class="hljs-keyword">for</span> num2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(num2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;三个参数，range(1,5,2)&quot;</span>)<br><span class="hljs-keyword">for</span> num3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(num3)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;输出&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">range</span>(start,stop,step)<br>一个参数，<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>两个参数，<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>三个参数，<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<br><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="使用伪随机数"><a href="#使用伪随机数" class="headerlink" title="使用伪随机数"></a>使用伪随机数</h3><p>生成一到十的伪随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><h3 id="‘攻击’-随机数"><a href="#‘攻击’-随机数" class="headerlink" title="‘攻击’ 随机数"></a>‘攻击’ 随机数</h3><p>让出现的伪随机数固定<br>这就是为什么叫伪随机数的原因<br>原理：random是靠当前的时间产生随机数的，只要我们提前保存random的状态，最后读取就行，类似时间宝石，hhh，玩笑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br>x = random.getstate()<br><br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n开始回退时间了嗷！！木大！！\n&quot;</span>)<br>random.setstate(x)<br><br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>这样，产生的随机数就完全相同</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>因为Python和C一样，都是采用IEEE754的标准来存储浮点数的，所以在精度上就有误差<br>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.3</span> == <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这里0.3是小于0.1 + 0.2的</p><h3 id="精确计算浮点数"><a href="#精确计算浮点数" class="headerlink" title="精确计算浮点数"></a>精确计算浮点数</h3><p>使用decimal的Decimal实例化对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> decimal<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = decimal.Decimal(<span class="hljs-string">&#x27;0.1&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = decimal.Decimal(<span class="hljs-string">&#x27;0.2&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a == b<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a + b == <span class="hljs-number">0.3</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-number">0.3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a+b==decimal.Decimal(<span class="hljs-string">&#x27;0.3&#x27;</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>使用 Decimal 方法传进去的值一定要是字符串型的</li></ul><p><strong>扩展知识：</strong><br>科学计数法：<br>在Python里面，输入0.00005，会输出5e-05<br>这个 e-05 就表示的十的负五次方，也就是0.00001</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>复数由实部和虚部构成<br>使用 j 定义一个数为虚部，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span> + <span class="hljs-number">2j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x)<br>(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.real)<br><span class="hljs-number">1.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.imag)<br><span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure><ul><li>使用 real 调用实部</li><li>使用 imag 调用虚部</li></ul><h3 id="更多计算方法"><a href="#更多计算方法" class="headerlink" title="更多计算方法"></a>更多计算方法</h3><table><thead><tr><th align="center">操作</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">x + y</td><td align="center">x加y</td></tr><tr><td align="center">x - y</td><td align="center">x减y</td></tr><tr><td align="center">x * y</td><td align="center">x乘以y</td></tr><tr><td align="center">x &#x2F; y</td><td align="center">x除以y</td></tr><tr><td align="center">x &#x2F;&#x2F; y</td><td align="center">x除以y的结果（地板除）</td></tr><tr><td align="center">x % y</td><td align="center">x除以y的余数</td></tr><tr><td align="center">-x</td><td align="center">x的相反数</td></tr><tr><td align="center">+x</td><td align="center">x本身</td></tr><tr><td align="center">abs(x)</td><td align="center">x的绝对值</td></tr><tr><td align="center">int(x)</td><td align="center">将x转换成整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x转换成浮点数</td></tr><tr><td align="center">complex(re, im)</td><td align="center">返回一个复数，re是实部，im是虚部</td></tr><tr><td align="center">divmod(x, y)</td><td align="center">返回(x &#x2F;&#x2F; y,x % y)</td></tr><tr><td align="center">pow(x, y)</td><td align="center">计算x的y次方</td></tr><tr><td align="center">x ** y</td><td align="center">计算x的y次方</td></tr></tbody></table><p><strong>地板除：<br>取比目标结果小的整数，如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>/<span class="hljs-number">2</span><br><span class="hljs-number">1.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>//<span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>-<span class="hljs-number">3</span>/<span class="hljs-number">2</span><br>-<span class="hljs-number">1.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>-<span class="hljs-number">3</span>//<span class="hljs-number">2</span><br>-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>pow函数可以传入第三个值，是用来对前两个值运算结果的取余，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>结果等同于：2 &#x2F;&#x2F; 3 % 4<br><strong>注意一点：实部和虚部都是使用浮点数存储的，进行计算还需要使用Decimal</strong></p><h3 id="关于true和false"><a href="#关于true和false" class="headerlink" title="关于true和false"></a>关于true和false</h3><p>使用bool()函数可以直接判断true false<br>在bool()函数中写字符串就不一样了，除了空字符串是false，其他都是true，哪怕就只有一个空格<br>数值中0都是false，浮点数0.0也一样<br>空的数组，空列表，空集合，空对象都是false</p><h3 id="and-or-not优先级"><a href="#and-or-not优先级" class="headerlink" title="and or not优先级"></a>and or not优先级</h3><p>not &gt; and &gt; or</p><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><p>写一个叫做getName的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getName</span> (<span class="hljs-built_in">id</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;姓：qi&#x27;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;名：xin&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;没有这个人&#x27;</span><br><br><span class="hljs-built_in">id</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入一个数字&quot;</span>)<br>name = getName(<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下面有人吗    &quot;</span> + name)<br></code></pre></td></tr></table></figure><h3 id="一行之内的if语法"><a href="#一行之内的if语法" class="headerlink" title="一行之内的if语法"></a>一行之内的if语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">num = <span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span>) <span class="hljs-keyword">if</span> num==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="多分支行内写法"><a href="#多分支行内写法" class="headerlink" title="多分支行内写法"></a>多分支行内写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">score = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;1-100\n&quot;</span>))<br>level = (<span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">if</span> score&gt;=<span class="hljs-number">80</span> <span class="hljs-keyword">else</span><br>         <span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">if</span> score&gt;=<span class="hljs-number">60</span> <span class="hljs-keyword">else</span><br>         <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">if</span> score&gt;=<span class="hljs-number">40</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;D&#x27;</span>)<br><span class="hljs-built_in">print</span>(level)<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;FSAN&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><h4 id="索引列表"><a href="#索引列表" class="headerlink" title="索引列表"></a>索引列表</h4><p>列表的索引可以使用负数<br>如，最后一项的索引值就为负一</p><p>列表还可以使用列表切片查看<br>如：查看下标 0-3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>在下标[]中：表示的就是一个范围，如3:是从三开始，:3是到三结束，而什么都不写则是查询全部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName[<span class="hljs-number">3</span>:]<br>[<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>listName[:]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>listName[<span class="hljs-number">3</span>:]<br>[<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>listName[:<span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>在以上的：后面还可以加：表示跨度值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName[::<span class="hljs-number">2</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="使用切片向列表后面添加值："><a href="#使用切片向列表后面添加值：" class="headerlink" title="使用切片向列表后面添加值："></a>使用切片向列表后面添加值：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName[<span class="hljs-built_in">len</span>(listName):] = [<span class="hljs-string">&#x27;new1&#x27;</span>,<span class="hljs-string">&#x27;new2&#x27;</span>,<span class="hljs-string">&#x27;new3&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>, <span class="hljs-string">&#x27;new1&#x27;</span>, <span class="hljs-string">&#x27;new2&#x27;</span>, <span class="hljs-string">&#x27;new3&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="使用列表的extend函数直接向列表内部添加一个可迭代对象，如："><a href="#使用列表的extend函数直接向列表内部添加一个可迭代对象，如：" class="headerlink" title="使用列表的extend函数直接向列表内部添加一个可迭代对象，如："></a>使用列表的extend函数直接向列表内部添加一个可迭代对象，如：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>addList = [<span class="hljs-string">&#x27;test1&#x27;</span>,<span class="hljs-string">&#x27;test2&#x27;</span>,<span class="hljs-string">&#x27;test3&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>listName.extend(addList)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>, <span class="hljs-string">&#x27;new1&#x27;</span>, <span class="hljs-string">&#x27;new2&#x27;</span>, <span class="hljs-string">&#x27;new3&#x27;</span>, <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;test3&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="使用列表的insert方法可以向列表的指定位置插入数据，如："><a href="#使用列表的insert方法可以向列表的指定位置插入数据，如：" class="headerlink" title="使用列表的insert方法可以向列表的指定位置插入数据，如："></a>使用列表的insert方法可以向列表的指定位置插入数据，如：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>, <span class="hljs-string">&#x27;new1&#x27;</span>, <span class="hljs-string">&#x27;new2&#x27;</span>, <span class="hljs-string">&#x27;new3&#x27;</span>, <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;test3&#x27;</span>, <span class="hljs-string">&#x27;endList&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="使用列表的remove方法可以删除指定的列表数据，如："><a href="#使用列表的remove方法可以删除指定的列表数据，如：" class="headerlink" title="使用列表的remove方法可以删除指定的列表数据，如："></a>使用列表的remove方法可以删除指定的列表数据，如：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>, <span class="hljs-string">&#x27;new1&#x27;</span>, <span class="hljs-string">&#x27;new2&#x27;</span>, <span class="hljs-string">&#x27;new3&#x27;</span>, <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;test3&#x27;</span>, <span class="hljs-string">&#x27;endList&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>listName.remove(<span class="hljs-string">&#x27;endList&#x27;</span>)<br>&gt;&gt;&gt;&gt; <span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>, <span class="hljs-string">&#x27;new1&#x27;</span>, <span class="hljs-string">&#x27;new2&#x27;</span>, <span class="hljs-string">&#x27;new3&#x27;</span>, <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;test3&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li>使用remove时，如有多个数据，则只会删除下标最小的那个</li><li>删除时如果元素不存在则会报错</li></ul><h4 id="使用pop方法可以删除对应下标的元素，如："><a href="#使用pop方法可以删除对应下标的元素，如：" class="headerlink" title="使用pop方法可以删除对应下标的元素，如："></a>使用pop方法可以删除对应下标的元素，如：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName.pop(<span class="hljs-number">0</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(listName)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FSAN&#x27;</span>, <span class="hljs-string">&#x27;new1&#x27;</span>, <span class="hljs-string">&#x27;new2&#x27;</span>, <span class="hljs-string">&#x27;new3&#x27;</span>, <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;test3&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="使用clean方法清空整个列表"><a href="#使用clean方法清空整个列表" class="headerlink" title="使用clean方法清空整个列表"></a>使用clean方法清空整个列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>listName.clean()<br></code></pre></td></tr></table></figure><h4 id="列表的自动排序"><a href="#列表的自动排序" class="headerlink" title="列表的自动排序"></a>列表的自动排序</h4><p>使用列表自带的sort方法<br>s.sort(key&#x3D;None,reverse&#x3D;False): 对列表中的元素进行原地排序（key用于指定一个比较函数，reverse参数用于指定排序结果是否翻转）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>nums = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">19</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(nums)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">19</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(nums)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(nums)<br>[<span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><ul><li>reverse默认为false，也就是从大到小</li></ul><h4 id="查找某个元素的出现次数"><a href="#查找某个元素的出现次数" class="headerlink" title="查找某个元素的出现次数"></a>查找某个元素的出现次数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(nums)<br>[<span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums.count(<span class="hljs-number">4</span>)<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="查找某个元素第一次出现的下标"><a href="#查找某个元素第一次出现的下标" class="headerlink" title="查找某个元素第一次出现的下标"></a>查找某个元素第一次出现的下标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(nums)<br>[<span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums.index(<span class="hljs-number">4</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>index(x,[start],[stop])看参数名思意</li></ul><h4 id="拷贝一个列表，使用copy-，如："><a href="#拷贝一个列表，使用copy-，如：" class="headerlink" title="拷贝一个列表，使用copy()，如："></a>拷贝一个列表，使用copy()，如：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>nums_copy = nums.copy()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(nums_copy)<br>[<span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>也可以使用切片拷贝：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">nums1_copy = nums1[:]<br></code></pre></td></tr></table></figure><p>以上拷贝都算是浅拷贝</p><h4 id="把两个列表合并为一个列表"><a href="#把两个列表合并为一个列表" class="headerlink" title="把两个列表合并为一个列表"></a>把两个列表合并为一个列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums1 + nums2<br></code></pre></td></tr></table></figure><p>也可以使用上面提到的使用切片向后面添加一个列表</p><h4 id="创建二维列表"><a href="#创建二维列表" class="headerlink" title="创建二维列表"></a>创建二维列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">numss1 = [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]<br>numss2 = [[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span>] * <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>上面两个创建出的列表看起来是一样的，其实不是<br>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>numss1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>numss1<br>[[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>numss2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] =<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>numss2<br>[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>numss2[<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> numss2[<span class="hljs-number">1</span>]<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>使用is判断出numss2这两个是放在一个内存地址的，所以才会一起被改变</p><h3 id="使用深拷贝"><a href="#使用深拷贝" class="headerlink" title="使用深拷贝"></a>使用深拷贝</h3><p>浅拷贝处理一维列表是没有问题的，但是要处理嵌套列表就，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>name_copy = name.copy()<br><span class="hljs-meta">&gt;&gt;&gt; </span>name_copy<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>name[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>name<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>name_copy<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure><p>发现copy的列表也会跟着一起变化</p><ul><li>也可以使用copy下的copy函数</li></ul><p>所以这就要用到深拷贝<br>步骤：</p><ul><li>导入copy</li><li>使用copy下的deepcopy()函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> copy<br><span class="hljs-meta">&gt;&gt;&gt; </span>name_deepcopy = copy.deepcopy(name)<br><span class="hljs-meta">&gt;&gt;&gt; </span>name_deepcopy<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>name[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>name<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>name_deepcopy<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>浅拷贝在拷贝嵌套对象的时候只是使用一个新的名字去引用，内容没有真正复制出来<br>深拷贝才是完完整整的复制了一个</p><h3 id="输出变量类型"><a href="#输出变量类型" class="headerlink" title="输出变量类型"></a>输出变量类型</h3><p>使用type方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(a)</span></span>)<br><br><span class="hljs-comment">// run</span><br>&lt;class <span class="hljs-string">&#x27;i&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="使用try处理异常报错"><a href="#使用try处理异常报错" class="headerlink" title="使用try处理异常报错"></a>使用try处理异常报错</h3><p>比如找一个不存在的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text1.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;123&quot;</span>)<br><br>// run<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>在except后面也可以跟上捕获异常的类型，如：except IOError:</p><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>要把列表里面每个值都 * 2<br>传统方法就是遍历里面的全部元素，然后重新赋值<br>这时候就可以使用Python的列表推导式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums = [i * <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums]<br><span class="hljs-meta">&gt;&gt;&gt; </span>nums<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><h3 id="对文件的操作"><a href="#对文件的操作" class="headerlink" title="对文件的操作"></a>对文件的操作</h3><p>注意：每一次打开之后都要关闭，这样才能让别人再打开</p><blockquote><p>打开&#x2F;创建一个文件</p></blockquote><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos">f = <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>f.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><ul><li>open()  第一个参数是打开的文件名，没有就创建一个，第二个是使用模式，这里用的w模式（写模式，w &#x3D; write）</li></ul><p>注意： open的第二个参数如果不写的话，是只有读取的功能的，没有创建的功能（r模式），下面是模式表：</p><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td><strong>r</strong></td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td><strong>w</strong></td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td><strong>rb</strong></td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头，这是默认模式</td></tr><tr><td><strong>wb</strong></td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用与追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>加粗的四个是最常见的</p><blockquote><p>写入数据</p></blockquote><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">f = <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>f.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;hello world!&quot;</span>)<br>f.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><ul><li>open文件的对象是在f上，可以直接对f进行操作</li></ul><br><blockquote><p>读取数据</p></blockquote><p>读取n个字符</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">f = open(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">content</span> = f.<span class="hljs-built_in">read</span>(<span class="hljs-number">5</span>)  # 读取五个字符<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">content</span>)<br><span class="hljs-built_in">content</span> = f.<span class="hljs-built_in">read</span>(<span class="hljs-number">5</span>)  # 如果再读取的话就会接着上次的读取<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">content</span>)<br></code></pre></td></tr></table></figure><p>原因：因为在一次open操作中，并不是每次操作光标都在文档的开头</p><br><p>读取n行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">f</span> = open(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-attr">content</span> = f.readline()  <span class="hljs-comment"># 读取一行的数据</span><br></code></pre></td></tr></table></figure><p>小细节：readline后面可以加个s，就是readlines方法，读取所有行的数据，以列表的格式展示，如：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>contents = f.readlines();<br>i = <span class="hljs-number">1</span><br>for content in contents:<br>    print(<span class="hljs-string">&quot;%d:%s&quot;</span><span class="hljs-comment">%(i, content))</span><br>    i += <span class="hljs-number">1</span><br>f.close()<br><br>// run<br><span class="hljs-number">1</span>:HELLO,WORLD!<br><br><span class="hljs-number">2</span>:HELLO,WORLD!!<br><br><span class="hljs-number">3</span>:HELLO,WORLD!!!<br><br><span class="hljs-number">4</span>:HELLO,WORLD!!!!<br><br><span class="hljs-number">5</span>:HELLO,WORLD!!!!!<br></code></pre></td></tr></table></figure><ul><li>%是一个占位符，d数字，s字符，占位完了之后使用%()去赋值，如果只有一个占位的话，不需要加（）</li><li>print默认是换行的，如果不需要换行，在print中加上end&#x3D;””,如print(“2:%s”%不换行,end&#x3D;””)</li></ul><br><blockquote><p>文件重命名</p></blockquote><ol><li>导入os模块</li><li>使用rename()方法</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">rename</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;正式文件.txt&quot;</span>)<br></code></pre></td></tr></table></figure><br><blockquote><p>删除文件</p></blockquote><p>也是用os模块中的remove方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">os</span>.<span class="hljs-built_in">remove</span>(<span class="hljs-string">&quot;正式文件.txt&quot;</span>)<br></code></pre></td></tr></table></figure><br><blockquote><p>创建文件夹</p></blockquote><p>使用os模块中你的mikdir方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">os</span>.mkdir(<span class="hljs-string">&quot;文件夹min&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ol><li>导入threading插件</li><li>使用下的Thread方法去定义操作对象，如def函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">print</span>(num)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>threading.Thread(a(<span class="hljs-number">2</span>))<br>threading.Thread(b(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><p>还可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;fsan&quot;</span>, sleep=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-built_in">print</span>(name)<br>    time.sleep(sleep)<br>    <span class="hljs-built_in">print</span>(sleep)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a()<br>    a(<span class="hljs-string">&quot;qixin&quot;</span>)<br>    a(<span class="hljs-string">&quot;wlder&quot;</span>, <span class="hljs-number">6</span>)<br>    <br><span class="hljs-comment"># Run:</span><br>wlder<br><span class="hljs-number">6</span><br>qixin<br><span class="hljs-number">3</span><br>fsan<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="if-name-‘main‘"><a href="#if-name-‘main‘" class="headerlink" title="if name &#x3D;&#x3D; ‘main‘"></a>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘</h3><p>模块都有一个变量name,可以在模块中输出查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(__name__)  <span class="hljs-comment"># __main__</span><br></code></pre></td></tr></table></figure><p>如果被其他模块导入的话，那么这个name在其他模块中就是导入的方法名<br>注意：python中导入其他模块的方法时，也就相当于执行</p><p>加上if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘就等于给个判断谁可以调用方法</p><blockquote><p>没写if</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># test1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是test1下的run方法&quot;</span>)<br><br><br>run()<br><br><span class="hljs-comment"># test2</span><br><span class="hljs-keyword">import</span> test1<br><br>test1.run()<br><br><span class="hljs-comment"># Run:</span><br>这里是test1下的run方法<br>这里是test1下的run方法<br></code></pre></td></tr></table></figure><ul><li>test1中的run被执行了两次，import的时候执行一次，调方法的时候又执行了一次</li></ul> <br><blockquote><p>写if</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># test1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是test1下的run方法&quot;</span>)<br><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    run()<br><br><span class="hljs-comment"># test2</span><br><span class="hljs-keyword">import</span> test1<br><br>test1.run()<br><br><span class="hljs-comment"># Run:</span><br>这里是test1下的run方法<br></code></pre></td></tr></table></figure><ul><li>这样其他模块调用的时候才正常</li></ul><h3 id="在字符串中添加input中输入的值"><a href="#在字符串中添加input中输入的值" class="headerlink" title="在字符串中添加input中输入的值"></a>在字符串中添加input中输入的值</h3><blockquote><p>方法一</p></blockquote><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">jdSearch</span> = <span class="hljs-function"><span class="hljs-title">input</span>(<span class="hljs-string">&quot;请输入要在京东搜索的东西！&quot;</span>)</span><br><span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + <span class="hljs-variable">jdSearch</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">url</span>)</span><br></code></pre></td></tr></table></figure><p>这种是最常见的写法，不是很有b格</p><br><blockquote><p>方法二</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">jdSearch</span> <span class="hljs-operator">=</span> input(<span class="hljs-string">&quot;请输入要在京东搜索的东西！&quot;</span>)<br><span class="hljs-attribute">url</span> <span class="hljs-operator">=</span> f<span class="hljs-string">&quot;https://search.jd.com/Search?keyword=&#123;jdSearch&#125;&quot;</span><br>print(url)<br></code></pre></td></tr></table></figure><ul><li>加上f来使字符串可变</li><li>{}调取对应的变量</li></ul><p>这种写法就显得更专业</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>安装pyinstaller模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pyinstaller<br></code></pre></td></tr></table></figure><p>使用pyinstaller打包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pyinstaller -F 文件名<br></code></pre></td></tr></table></figure><h3 id="使用正则判断"><a href="#使用正则判断" class="headerlink" title="使用正则判断"></a>使用正则判断</h3><p>条件：第一个字符不为数字，由数字字母下划线组成</p><p>使用re正则判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入\n&quot;</span>)<br><br><span class="hljs-comment"># try:</span><br><span class="hljs-comment">#     int(a[0])</span><br><span class="hljs-comment"># except:</span><br><span class="hljs-comment">#     print(&quot;首字母不是数字&quot;)</span><br>rules1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&#x27;&#x27;^[^0-9]&#x27;&#x27;&#x27;</span>)<br>rules2 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&#x27;&#x27;^[0-9A-Za-z_]&#123;1,&#125;$&#x27;&#x27;&#x27;</span>)<br><br>s = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">if</span> rules2.<span class="hljs-keyword">match</span>(a) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请使用数字字母下划线组成！&quot;</span>)<br>    s = <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> rules1.<span class="hljs-keyword">match</span>(a) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能使用数字作为开头！&quot;</span>)<br>    s = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> s:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;通过验证！&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>其中的第一个请求可以使用try报错简单实现</li></ul><h2 id="Python就是方便！！（彩蛋）"><a href="#Python就是方便！！（彩蛋）" class="headerlink" title="Python就是方便！！（彩蛋）"></a>Python就是方便！！（彩蛋）</h2><p>在IDLE里输入import this，会出现一首开发者的诗</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合MyBatis</title>
    <link href="/2021/08/15/SpringBoot%E6%95%B4%E5%90%88MyBatis/"/>
    <url>/2021/08/15/SpringBoot%E6%95%B4%E5%90%88MyBatis/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>创建项目，依赖必选MySQL Driver，JDBC API，Spring web<br>在maven官方仓库中CV MyBatis Spring Boot Starter依赖文件<br>在配置文件中建立数据连接</p><h3 id="建立接口类"><a href="#建立接口类" class="headerlink" title="建立接口类"></a>建立接口类</h3><p>建立mapper包下接口类</p><blockquote><p>使用interface(接口代替class)，写数据库操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;loginUser&gt; <span class="hljs-title function_">queryLoginAll</span><span class="hljs-params">()</span>;<br><br>    loginUser <span class="hljs-title function_">queryLoginById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updataUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建mybatis的配置类"><a href="#创建mybatis的配置类" class="headerlink" title="创建mybatis的配置类"></a>创建mybatis的配置类</h3><p>在resources下新建mybatis下mapper下的xml配置文件</p><ol><li>复制官网<a href="https://mybatis.net.cn/getting-started.html">探究已映射的 SQL 语句</a></li><li>修改mapper 对应的 namespace 路径为你的 mapper 类</li><li>修改id为定义的接口名字</li><li>resultType 属性为java实体对象，使用这个需要在配置文件中整合mybatis</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mybatis:<br>  type-aliases-<span class="hljs-keyword">package</span>: com.fsan.pojo<br>  mapper-locations: <span class="hljs-keyword">classpath</span>:mybatis<span class="hljs-regexp">/mapper/</span>*.xml<br></code></pre></td></tr></table></figure><ul><li><p>将实例对象和配置文件相通 </p></li><li><p>classpath指定的resources文件夹，后面不需要加 &#x2F;</p></li></ul><p>resultType 输出数据格式</p><p>parameterType 输入数据格式</p><p>无返回值的功能可以全部使用resultType，虽然这很像废话，hhh</p><p>然后写对应的接口sql语句</p><h3 id="使用mybatis"><a href="#使用mybatis" class="headerlink" title="使用mybatis"></a>使用mybatis</h3><p>在controller里面创建实例类，在方法里面调用mapper类里的对应方法就可以了<br>注意：java实体类里面名字一定要和数据库属性名一样，使用mybatis是默认自动赋值封装的</p><blockquote><p>使用mybatis手动封装</p></blockquote><p>在mybatis的配置文件中，写查询数据库语句的时候，为查出来的属性使用as定义一个名字，这个名字就可以来进行封装<br>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 数据库中的属性分别为stuNum，stuPwd</span><br><span class="hljs-comment">// 实体类属性为username，password</span><br><br><span class="hljs-comment">// model</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginUser</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>&#125;<br><br><span class="hljs-comment">// mybatis.xml</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.fsan.mapper.UserMapper&quot;</span>&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryLoginAll&quot;</span> resultType=<span class="hljs-string">&quot;loginUser&quot;</span>&gt;<br>        select id,stuNum as username,stuPwd as password from login<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br><br><span class="hljs-comment">// controller</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserControler</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/getListAll&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getListAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;loginUser&gt; listAll = userMapper.queryLoginAll();<br>        <span class="hljs-keyword">for</span> (loginUser loginUser: listAll)&#123;<br>            System.out.println(loginUser);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 控制台输出</span><br>loginUser(username=usetest1, password=pwdtest1)<br>loginUser(username=usetest2, password=pwdtest2)<br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>@Mapper</strong> 这个注解表示了这是一个 mybatis 的 Mapper 类</p><ul><li>也可以在主入口处 使用 <strong>@MapperScan(“com.FSAN.mapper”)</strong> 手动添加扫描 Mapper 类</li></ul><p><strong>@Repository</strong> 使用这个注解实例化一个对象类，也可以使用万能的 <strong>@Component</strong></p><h2 id="总结MyBatis"><a href="#总结MyBatis" class="headerlink" title="总结MyBatis"></a>总结MyBatis</h2><blockquote><p>依赖包：</p></blockquote><p>mybatis-spring-boot-starter</p><blockquote><p>使用步骤：</p></blockquote><ol><li>导入包</li><li>配置文件</li><li>mybatis 配置</li><li>编写 sql</li><li>service 调用 dao</li><li>controller 调用 service</li></ol><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><ol><li>配置文件的文件名一定要和Mapper文件名相同</li><li>找不到接口的时候就说明是配置文件出现问题，注意配置文件的后缀，一定要看的到才行！！</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git基础命令</title>
    <link href="/2021/07/15/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/15/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载并安装git工具"><a href="#下载并安装git工具" class="headerlink" title="下载并安装git工具"></a>下载并安装git工具</h3><ul><li><a href="http://pan.baidu.com/s/1hrgTIdu">点此进入baidu云盘下载</a></li><li><a href="http://jingyan.baidu.com/article/e52e36154233ef40c70c5153.html">点此查看安装教程</a></li></ul><h3 id="git提交结构"><a href="#git提交结构" class="headerlink" title="git提交结构"></a>git提交结构</h3><ol><li>工作区（就是本地初始化地方的文件）</li><li>暂存区（add 中的文件）</li><li>本地库（commit 打上标签的文件）</li><li>远程库（github或gitee仓库）</li></ol><h3 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h3><ol><li>首次利用git提交需要配置好全局用户信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>初始化仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><ol start="3"><li>本地文件提交到暂存区</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 文件<br></code></pre></td></tr></table></figure><ol start="4"><li>暂存区加入本地库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;说明&quot;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>建立本地链接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add 别名 地址<br></code></pre></td></tr></table></figure><ol start="6"><li>提交对应分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u 别名 分支名<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="工作区提交暂存区"><a href="#工作区提交暂存区" class="headerlink" title="工作区提交暂存区"></a>工作区提交暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add .<br></code></pre></td></tr></table></figure><blockquote><p>.表示全部提交覆盖，提交更新个别请输入单个文件路径</p></blockquote><h3 id="暂存区提交至本地库"><a href="#暂存区提交至本地库" class="headerlink" title="暂存区提交至本地库"></a>暂存区提交至本地库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&quot;测试&quot;</span><br></code></pre></td></tr></table></figure><p>在测试后面还可以加一个参数，表示文件名</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch  // 查看当前分支<br>$ git branch -v  // 查看当前分支详细 最后一次提交索引 + 备注<br></code></pre></td></tr></table></figure><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch [分支名]<br></code></pre></td></tr></table></figure><p>使用branch命令，不加是查看，加上名字就是创建</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout [分支名]<br></code></pre></td></tr></table></figure><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git merge [合并的分支]<br></code></pre></td></tr></table></figure><p>如合并远程仓库的master分支和本地的master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git merge origin/merge<br></code></pre></td></tr></table></figure><h4 id="查看远程分支全部文件"><a href="#查看远程分支全部文件" class="headerlink" title="查看远程分支全部文件"></a>查看远程分支全部文件</h4><ol><li>切换到远程分支</li><li>使用ll列出全部文件</li><li>使用cat查看文件内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout origin/master<br>$ ll<br>$ <span class="hljs-built_in">cat</span> [文件名]<br></code></pre></td></tr></table></figure><blockquote><p> 这里的origin是仓库别名，master是分支名字</p></blockquote><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><h4 id="查看版本日志"><a href="#查看版本日志" class="headerlink" title="查看版本日志"></a>查看版本日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>上面这种展开之后太长了，建议下面这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reflog<br></code></pre></td></tr></table></figure><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard 索引<br></code></pre></td></tr></table></figure><p>注意： 这里使用hard回退是工作区，暂存区，本地库一起回退</p><p>要实现远程仓库回退，还要重新强制提交一次</p><blockquote><p>强制提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -f -u origin master <br></code></pre></td></tr></table></figure></blockquote><h3 id="本地地址库"><a href="#本地地址库" class="headerlink" title="本地地址库"></a>本地地址库</h3><h4 id="查看本地的地址库"><a href="#查看本地的地址库" class="headerlink" title="查看本地的地址库"></a>查看本地的地址库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote -v<br></code></pre></td></tr></table></figure><h4 id="添加本地的地址"><a href="#添加本地的地址" class="headerlink" title="添加本地的地址"></a>添加本地的地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add [别名] [仓库地址]<br></code></pre></td></tr></table></figure><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push [别名] [分支名]<br></code></pre></td></tr></table></figure><blockquote><p> 远程仓库里没有对应分支的时候会创建一个</p><p>推送到对应的仓库是要加入团队的，有权限才能推送</p><p>当然这些可以在windows凭据里面查看</p></blockquote><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> [仓库地址]<br></code></pre></td></tr></table></figure><p>将远程仓库克隆下来之后，会自动的将链接取一个别名origin</p><h3 id="抓取操作"><a href="#抓取操作" class="headerlink" title="抓取操作"></a>抓取操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git fetch origin master<br></code></pre></td></tr></table></figure><p>仓库别名加上分支，抓取操作将远程的仓库内容抓到本地，但并不会更新工作区</p><h3 id="pull操作"><a href="#pull操作" class="headerlink" title="pull操作"></a>pull操作</h3><p>pull操作就是抓取操作加上分支合并操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git pull origin master<br></code></pre></td></tr></table></figure><ul><li>别名加地址</li></ul><h3 id="添加到暂存区并加上说明"><a href="#添加到暂存区并加上说明" class="headerlink" title="添加到暂存区并加上说明"></a>添加到暂存区并加上说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add .<br>$ git commit -m <span class="hljs-string">&quot;[对提交文件的说明]&quot;</span><br></code></pre></td></tr></table></figure><p>注意：要确保提交文件夹<mark>只有一个.git文件夹</mark></p><h3 id="提交暂存区"><a href="#提交暂存区" class="headerlink" title="提交暂存区"></a>提交暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch   <span class="hljs-comment">#查看本地分支，无误后提交</span><br>$ git push -u remote地址<br></code></pre></td></tr></table></figure><h3 id="清空git缓存"><a href="#清空git缓存" class="headerlink" title="清空git缓存"></a>清空git缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">rm</span> -r -f --cached .   <span class="hljs-comment">#清空git缓存</span><br></code></pre></td></tr></table></figure><h2 id="gitee免费部署"><a href="#gitee免费部署" class="headerlink" title="gitee免费部署"></a>gitee免费部署</h2><p>步骤：</p><ol><li>创建仓库</li><li>提交包含index.html的目录</li><li>进入仓库，点击服务下git pages中的启动按钮</li></ol><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="add-后提示warning"><a href="#add-后提示warning" class="headerlink" title="add 后提示warning"></a>add 后提示warning</h3><p>描述：<code>The file will have its original line endings in your working directory</code></p><p>原因：在 Unix 系统中，行尾用换行符 (LF) 表示。在windows中，一行用回车符（CR）和换行符（LF）表示（CRLF）。当您从 git 获取从 unix 系统上传的代码时，它们将只有一个 LF。</p><p>解决：</p><p>但这个问题不影响操作，再次add就正常了</p><p>如果你觉得烦，对于只在window中运行的项目来说，可以直接关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.autocrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生ajax</title>
    <link href="/2021/07/13/%E5%8E%9F%E7%94%9Fajax/"/>
    <url>/2021/07/13/%E5%8E%9F%E7%94%9Fajax/</url>
    
    <content type="html"><![CDATA[<h2 id="ajax简介"><a href="#ajax简介" class="headerlink" title="ajax简介"></a>ajax简介</h2><p>Ajax（Asynchronous JavaScript and XML），直译为“异步的JavaScript与XML技术”，是一种创建交互式网页应用的网页开发技术，用于创建快速动态网页，由杰西·詹姆士·贾瑞特所提出。与传统的Web应用相比，Ajax通过浏览器与服务器进行少量的数据交换就可以实现网页的异步更新，在不重新加载整个网页的情况下，即可对网页进行更新。</p><h2 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//根据浏览器创建ajax实例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createXMLHttpRequest</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>        xmlHttpRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        xmlHttpRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><ol><li>创建ajax实例对象</li><li>设置接口地址</li><li>设置回调函数</li><li>设置实例对象（请求方式，请求地址，是否异步）</li><li>发送</li><li>接收判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送请求</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajaxGet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">createXMLHttpRequest</span>();<br>    <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;[接口地址]&quot;</span>;<br>    xmlHttpRequest.<span class="hljs-property">onreadystatechange</span> = handle;<br>    xmlHttpRequest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url, <span class="hljs-literal">true</span>);<br>    xmlHttpRequest.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-comment">// 设置回调函数的接收</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (xmlHttpRequest.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlHttpRequest.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xmlHttpRequest &lt; <span class="hljs-number">300</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(xmlHttpRequest.<span class="hljs-property">responseText</span>)<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><ol><li>创建ajax实例对象</li><li>设置接口地址</li><li>设置实例对象（发送方式，发送地址，是否异步）</li><li>设置数据源（只有post需要）</li><li>设置请求头</li><li>开始发送，使用JSON.stringify（）编译数据</li><li>设置回调函数以及判断状态码</li><li>接收判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送请求</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajaxPost</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">createXMLHttpRequest</span>();<br>    <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;[接口地址]&quot;</span>;<br>    xmlHttpRequest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, url, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">var</span> data = &#123;&#125;;<br>    <span class="hljs-comment">// 设置请求头，让服务器知道发的是json格式</span><br>    xmlHttpRequest.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>    xmlHttpRequest.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    xmlHttpRequest.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (xmlHttpRequest.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlHttpRequest.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xmlHttpRequest &lt; <span class="hljs-number">300</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(xmlHttpRequest.<span class="hljs-property">responseText</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
